#pragma once

#include <tigerpm/util.hpp>

#define WARP_SIZE 32
#define MULTIPOLE_SIZE 35
#define EXPANSION_SIZE 56

using expansion = array<float, EXPANSION_SIZE>;
using multipole = array<float, MULTIPOLE_SIZE>;

#ifdef __CUDACC__
__device__ inline void greens_function(array<float,56> &D, float dx, float dy, float dz, float inv2rs) {
	const float twooversqrtpi = 1.12837917e+00;
	const float r2 = sqr(dx, dy, dz);
	const float rinv = rsqrtf(r2);
	const float r = r2 * rinv;
	const float r0 = r * inv2rs;
	float exp0;
	const float erfc0 = erfcexp(r0, &exp0);
	const float c0 = -2.f * r * inv2rs * inv2rs;
	const float d0 = -erfc0 * rinv;
	float e0 = twooversqrtpi * exp0 * rinv * inv2rs;
	const float d1 = fmaf(float(-1) * d0, rinv, e0);
	e0 *= c0;
	const float d2 = fmaf(float(-3) * d1, rinv, e0);
	e0 *= c0;
	const float d3 = fmaf(float(-5) * d2, rinv, e0);
	e0 *= c0;
	const float d4 = fmaf(float(-7) * d3, rinv, e0);
	e0 *= c0;
	const float d5 = fmaf(float(-9) * d4, rinv, e0);
	e0 *= c0;
	const float rinv0 = 1.f;
	const float rinv1 = rinv;
	const float rinv2 = rinv1 * rinv1;
	const float Drinvpow_0_0 = d0 * rinv0;
	const float Drinvpow_1_0 = d1 * rinv0;
	const float Drinvpow_1_1 = d1 * rinv1;
	const float Drinvpow_2_0 = d2 * rinv0;
	const float Drinvpow_2_1 = d2 * rinv1;
	const float Drinvpow_2_2 = d2 * rinv2;
	const float Drinvpow_3_0 = d3 * rinv0;
	const float Drinvpow_3_1 = d3 * rinv1;
	const float Drinvpow_3_2 = d3 * rinv2;
	const float Drinvpow_4_0 = d4 * rinv0;
	const float Drinvpow_4_1 = d4 * rinv1;
	const float Drinvpow_5_0 = d5 * rinv0;
	array<float,NDIM> dxrinv;
	dxrinv[0] = dx * rinv;
	dxrinv[1] = dy * rinv;
	dxrinv[2] = dz * rinv;
	const float x000 = float(1);
	const float& x100 = dxrinv[0];
	const float& x010 = dxrinv[1];
	const float& x001 = dxrinv[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	const float x005 = x003 * x002;
	const float x014 = x012 * x002;
	const float x023 = x021 * x002;
	const float x032 = x021 * x011;
	const float x041 = x021 * x020;
	const float x050 = x030 * x020;
	const float x104 = x102 * x002;
	const float x113 = x111 * x002;
	const float x122 = x111 * x011;
	const float x131 = x111 * x020;
	const float x140 = x120 * x020;
	const float x203 = x201 * x002;
	const float x212 = x111 * x101;
	const float x221 = x111 * x110;
	const float x230 = x210 * x020;
	const float x302 = x201 * x101;
	const float x311 = x111 * x200;
	const float x320 = x210 * x110;
	const float x401 = x201 * x200;
	const float x410 = x210 * x200;
	const float x500 = x300 * x200;
	float x_2_1_000 = x002;
	float x_3_1_001 = x003;
	float x_4_1_002 = x004;
	float x_5_1_003 = x005;
	float x_3_1_010 = x012;
	float x_4_1_011 = x013;
	float x_5_1_012 = x014;
	float x_4_1_020 = x022;
	float x_5_1_021 = x023;
	float x_5_1_030 = x032;
	float x_3_1_100 = x102;
	float x_4_1_101 = x103;
	float x_5_1_102 = x104;
	float x_4_1_110 = x112;
	float x_5_1_111 = x113;
	float x_5_1_120 = x122;
	float x_4_1_200 = x202;
	float x_5_1_201 = x203;
	float x_5_1_210 = x212;
	float x_5_1_300 = x302;
	float x_4_2_000 = x004;
	float x_5_2_001 = x005;
	float x_5_2_010 = x014;
	float x_5_2_100 = x104;
	x_2_1_000 += x020;
	x_5_1_120 += x140;
	x_2_1_000 += x200;
	x_5_1_120 += x320;
	x_3_1_001 += x021;
	x_4_1_200 += x220;
	x_3_1_001 += x201;
	x_4_1_200 += x400;
	x_4_1_002 += x022;
	x_5_1_201 += x221;
	x_4_1_002 += x202;
	x_5_1_201 += x401;
	x_5_1_003 += x023;
	x_5_1_210 += x230;
	x_5_1_003 += x203;
	x_5_1_210 += x410;
	x_3_1_010 += x030;
	x_5_1_300 += x320;
	x_3_1_010 += x210;
	x_5_1_300 += x500;
	x_4_1_011 += x031;
	x_4_2_000 = fmaf(float(2.00000000e+00), x022, x_4_2_000);
	x_4_1_011 += x211;
	x_4_2_000 += x040;
	x_5_1_012 += x032;
	x_4_2_000 = fmaf(float(2.00000000e+00), x202, x_4_2_000);
	x_5_1_012 += x212;
	x_4_2_000 = fmaf(float(2.00000000e+00), x220, x_4_2_000);
	x_4_1_020 += x040;
	x_4_2_000 += x400;
	x_4_1_020 += x220;
	x_5_2_001 = fmaf(float(2.00000000e+00), x023, x_5_2_001);
	x_5_1_021 += x041;
	x_5_2_001 += x041;
	x_5_1_021 += x221;
	x_5_2_001 = fmaf(float(2.00000000e+00), x203, x_5_2_001);
	x_5_1_030 += x050;
	x_5_2_001 = fmaf(float(2.00000000e+00), x221, x_5_2_001);
	x_5_1_030 += x230;
	x_5_2_001 += x401;
	x_3_1_100 += x120;
	x_5_2_010 = fmaf(float(2.00000000e+00), x032, x_5_2_010);
	x_3_1_100 += x300;
	x_5_2_010 += x050;
	x_4_1_101 += x121;
	x_5_2_010 = fmaf(float(2.00000000e+00), x212, x_5_2_010);
	x_4_1_101 += x301;
	x_5_2_010 = fmaf(float(2.00000000e+00), x230, x_5_2_010);
	x_5_1_102 += x122;
	x_5_2_010 += x410;
	x_5_1_102 += x302;
	x_5_2_100 = fmaf(float(2.00000000e+00), x122, x_5_2_100);
	x_4_1_110 += x130;
	x_5_2_100 += x140;
	x_4_1_110 += x310;
	x_5_2_100 = fmaf(float(2.00000000e+00), x302, x_5_2_100);
	x_5_1_111 += x131;
	x_5_2_100 = fmaf(float(2.00000000e+00), x320, x_5_2_100);
	x_5_1_111 += x311;
	x_5_2_100 += x500;
	x_2_1_000 *= Drinvpow_1_1;
	x_3_1_001 *= Drinvpow_2_1;
	x_4_1_002 *= Drinvpow_3_1;
	x_5_1_003 *= Drinvpow_4_1;
	x_3_1_010 *= Drinvpow_2_1;
	x_4_1_011 *= Drinvpow_3_1;
	x_5_1_012 *= Drinvpow_4_1;
	x_4_1_020 *= Drinvpow_3_1;
	x_5_1_021 *= Drinvpow_4_1;
	x_5_1_030 *= Drinvpow_4_1;
	x_3_1_100 *= Drinvpow_2_1;
	x_4_1_101 *= Drinvpow_3_1;
	x_5_1_102 *= Drinvpow_4_1;
	x_4_1_110 *= Drinvpow_3_1;
	x_5_1_111 *= Drinvpow_4_1;
	x_5_1_120 *= Drinvpow_4_1;
	x_4_1_200 *= Drinvpow_3_1;
	x_5_1_201 *= Drinvpow_4_1;
	x_5_1_210 *= Drinvpow_4_1;
	x_5_1_300 *= Drinvpow_4_1;
	x_4_2_000 *= Drinvpow_2_2;
	x_5_2_001 *= Drinvpow_3_2;
	x_5_2_010 *= Drinvpow_3_2;
	x_5_2_100 *= Drinvpow_3_2;
	D[43] = fmaf(x212, Drinvpow_5_0, D[43]);
	D[32] += x_4_1_020;
	D[44] = fmaf(x203, Drinvpow_5_0, D[44]);
	D[54] = fmaf(x014, Drinvpow_5_0, D[54]);
	D[44] = fmaf(float(3.00000000e+00), x_5_1_201, D[44]);
	D[54] = fmaf(float(6.00000000e+00), x_5_1_012, D[54]);
	D[44] += x_5_1_003;
	D[54] = fmaf(float(3.00000000e+00), x_5_2_010, D[54]);
	D[44] = fmaf(float(3.00000000e+00), x_5_2_001, D[44]);
	D[7] = fmaf(x020, Drinvpow_2_0, D[7]);
	D[11] = fmaf(x210, Drinvpow_3_0, D[11]);
	D[7] += x_2_1_000;
	D[11] += x_3_1_010;
	D[17] = fmaf(x021, Drinvpow_3_0, D[17]);
	D[24] = fmaf(x211, Drinvpow_4_0, D[24]);
	D[17] += x_3_1_001;
	D[24] += x_4_1_011;
	D[32] = fmaf(x022, Drinvpow_4_0, D[32]);
	D[25] += x_4_2_000;
	D[33] = fmaf(float(3.00000000e+00), x_4_1_011, D[33]);
	D[43] += x_5_1_210;
	D[32] += x_4_1_002;
	D[43] += x_5_1_012;
	D[32] += x_4_2_000;
	D[43] += x_5_2_010;
	D[53] = fmaf(x023, Drinvpow_5_0, D[53]);
	D[23] = fmaf(x220, Drinvpow_4_0, D[23]);
	D[53] = fmaf(float(3.00000000e+00), x_5_1_021, D[53]);
	D[23] += x_4_1_200;
	D[53] += x_5_1_003;
	D[23] += x_4_1_020;
	D[53] = fmaf(float(3.00000000e+00), x_5_2_001, D[53]);
	D[23] += x_4_2_000;
	D[16] = fmaf(x030, Drinvpow_3_0, D[16]);
	D[42] = fmaf(x221, Drinvpow_5_0, D[42]);
	D[16] = fmaf(float(3.00000000e+00), x_3_1_010, D[16]);
	D[45] = fmaf(float(3.00000000e+00), x_5_2_100, D[45]);
	D[55] = fmaf(x005, Drinvpow_5_0, D[55]);
	D[47] += x_5_1_102;
	D[3] = fmaf(x001, Drinvpow_1_0, D[3]);
	D[47] += x_5_2_100;
	D[9] = fmaf(x002, Drinvpow_2_0, D[9]);
	D[26] = fmaf(x130, Drinvpow_4_0, D[26]);
	D[9] += x_2_1_000;
	D[26] = fmaf(float(3.00000000e+00), x_4_1_110, D[26]);
	D[19] = fmaf(x003, Drinvpow_3_0, D[19]);
	D[46] = fmaf(x131, Drinvpow_5_0, D[46]);
	D[19] = fmaf(float(3.00000000e+00), x_3_1_001, D[19]);
	D[46] = fmaf(float(3.00000000e+00), x_5_1_111, D[46]);
	D[34] = fmaf(x004, Drinvpow_4_0, D[34]);
	D[45] = fmaf(x140, Drinvpow_5_0, D[45]);
	D[34] = fmaf(float(6.00000000e+00), x_4_1_002, D[34]);
	D[45] = fmaf(float(6.00000000e+00), x_5_1_120, D[45]);
	D[34] = fmaf(float(3.00000000e+00), x_4_2_000, D[34]);
	D[42] += x_5_1_201;
	D[31] = fmaf(x031, Drinvpow_4_0, D[31]);
	D[4] = fmaf(x200, Drinvpow_2_0, D[4]);
	D[55] = fmaf(float(1.00000000e+01), x_5_1_003, D[55]);
	D[4] += x_2_1_000;
	D[55] = fmaf(float(1.50000000e+01), x_5_2_001, D[55]);
	D[12] = fmaf(x201, Drinvpow_3_0, D[12]);
	D[2] = fmaf(x010, Drinvpow_1_0, D[2]);
	D[12] += x_3_1_001;
	D[8] = fmaf(x011, Drinvpow_2_0, D[8]);
	D[25] = fmaf(x202, Drinvpow_4_0, D[25]);
	D[18] = fmaf(x012, Drinvpow_3_0, D[18]);
	D[25] += x_4_1_200;
	D[18] += x_3_1_010;
	D[25] += x_4_1_002;
	D[33] = fmaf(x013, Drinvpow_4_0, D[33]);
	D[37] = fmaf(x401, Drinvpow_5_0, D[37]);
	D[28] = fmaf(x112, Drinvpow_4_0, D[28]);
	D[39] = fmaf(float(3.00000000e+00), x_5_1_111, D[39]);
	D[15] += x_3_1_100;
	D[38] = fmaf(x320, Drinvpow_5_0, D[38]);
	D[29] = fmaf(x103, Drinvpow_4_0, D[29]);
	D[38] += x_5_1_300;
	D[29] = fmaf(float(3.00000000e+00), x_4_1_101, D[29]);
	D[38] = fmaf(float(3.00000000e+00), x_5_1_120, D[38]);
	D[49] = fmaf(x104, Drinvpow_5_0, D[49]);
	D[38] = fmaf(float(3.00000000e+00), x_5_2_100, D[38]);
	D[49] = fmaf(float(6.00000000e+00), x_5_1_102, D[49]);
	D[20] = fmaf(x400, Drinvpow_4_0, D[20]);
	D[49] = fmaf(float(3.00000000e+00), x_5_2_100, D[49]);
	D[20] = fmaf(float(6.00000000e+00), x_4_1_200, D[20]);
	D[5] = fmaf(x110, Drinvpow_2_0, D[5]);
	D[20] = fmaf(float(3.00000000e+00), x_4_2_000, D[20]);
	D[14] = fmaf(x111, Drinvpow_3_0, D[14]);
	D[39] = fmaf(x311, Drinvpow_5_0, D[39]);
	D[15] = fmaf(x102, Drinvpow_3_0, D[15]);
	D[37] = fmaf(float(6.00000000e+00), x_5_1_201, D[37]);
	D[28] += x_4_1_110;
	D[37] = fmaf(float(3.00000000e+00), x_5_2_001, D[37]);
	D[48] = fmaf(x113, Drinvpow_5_0, D[48]);
	D[36] = fmaf(x410, Drinvpow_5_0, D[36]);
	D[48] = fmaf(float(3.00000000e+00), x_5_1_111, D[48]);
	D[36] = fmaf(float(6.00000000e+00), x_5_1_210, D[36]);
	D[13] = fmaf(x120, Drinvpow_3_0, D[13]);
	D[36] = fmaf(float(3.00000000e+00), x_5_2_010, D[36]);
	D[13] += x_3_1_100;
	D[35] = fmaf(x500, Drinvpow_5_0, D[35]);
	D[27] = fmaf(x121, Drinvpow_4_0, D[27]);
	D[35] = fmaf(float(1.00000000e+01), x_5_1_300, D[35]);
	D[27] += x_4_1_101;
	D[35] = fmaf(float(1.50000000e+01), x_5_2_100, D[35]);
	D[47] = fmaf(x122, Drinvpow_5_0, D[47]);
	D[22] = fmaf(x301, Drinvpow_4_0, D[22]);
	D[51] = fmaf(x041, Drinvpow_5_0, D[51]);
	D[42] += x_5_1_021;
	D[31] = fmaf(float(3.00000000e+00), x_4_1_011, D[31]);
	D[42] += x_5_2_001;
	D[52] = fmaf(x032, Drinvpow_5_0, D[52]);
	D[41] = fmaf(x230, Drinvpow_5_0, D[41]);
	D[52] += x_5_1_030;
	D[41] = fmaf(float(3.00000000e+00), x_5_1_210, D[41]);
	D[52] = fmaf(float(3.00000000e+00), x_5_1_012, D[52]);
	D[41] += x_5_1_030;
	D[52] = fmaf(float(3.00000000e+00), x_5_2_010, D[52]);
	D[41] = fmaf(float(3.00000000e+00), x_5_2_010, D[41]);
	D[30] = fmaf(x040, Drinvpow_4_0, D[30]);
	D[10] = fmaf(x300, Drinvpow_3_0, D[10]);
	D[30] = fmaf(float(6.00000000e+00), x_4_1_020, D[30]);
	D[10] = fmaf(float(3.00000000e+00), x_3_1_100, D[10]);
	D[30] = fmaf(float(3.00000000e+00), x_4_2_000, D[30]);
	D[47] += x_5_1_120;
	D[0] = fmaf(x000, Drinvpow_0_0, D[0]);
	D[22] = fmaf(float(3.00000000e+00), x_4_1_101, D[22]);
	D[51] = fmaf(float(6.00000000e+00), x_5_1_021, D[51]);
	D[40] = fmaf(x302, Drinvpow_5_0, D[40]);
	D[51] = fmaf(float(3.00000000e+00), x_5_2_001, D[51]);
	D[40] += x_5_1_300;
	D[50] = fmaf(x050, Drinvpow_5_0, D[50]);
	D[40] = fmaf(float(3.00000000e+00), x_5_1_102, D[40]);
	D[50] = fmaf(float(1.00000000e+01), x_5_1_030, D[50]);
	D[40] = fmaf(float(3.00000000e+00), x_5_2_100, D[40]);
	D[50] = fmaf(float(1.50000000e+01), x_5_2_010, D[50]);
	D[21] = fmaf(x310, Drinvpow_4_0, D[21]);
	D[1] = fmaf(x100, Drinvpow_1_0, D[1]);
	D[21] = fmaf(float(3.00000000e+00), x_4_1_110, D[21]);
	D[6] = fmaf(x101, Drinvpow_2_0, D[6]);
}

#endif
__device__
inline int M2L_kernel(array<float, 4>& L, const array<float, 35>& M, const array<float, 56>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[34], D[34], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[33], D[33], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[32], D[32], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[31], D[31], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[30], D[30], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[29], D[29], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[28], D[28], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[27], D[27], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[26], D[26], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[25], D[25], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[24], D[24], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[23], D[23], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[22], D[22], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[21], D[21], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[20], D[20], L[0]);
	}
	L[1] = fmaf(float(1.66666667e-01) * M[33], D[48], L[1]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[30], D[45], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[31], D[46], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[34], D[54], L[2]);
	L[1] = fmaf(float(2.50000000e-01) * M[32], D[47], L[1]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[20], D[35], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[33], D[53], L[2]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[30], D[50], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[34], D[49], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[31], D[51], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[2] = fmaf(float(2.50000000e-01) * M[32], D[52], L[2]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[29], D[44], L[1]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[21], D[36], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[30], D[51], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[22], D[37], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[31], D[52], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[23], D[38], L[1]);
	L[3] = fmaf(float(2.50000000e-01) * M[32], D[53], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[24], D[39], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[25], D[40], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[33], D[54], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[26], D[41], L[1]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[27], D[42], L[1]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[34], D[55], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[28], D[43], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[3] = fmaf(float(4.16666667e-02) * M[20], D[37], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[26], D[45], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[21], D[39], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[27], D[46], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[22], D[40], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[28], D[47], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[23], D[42], L[3]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[24], D[43], L[3]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[29], D[48], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[25], D[44], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[25], D[43], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[29], D[49], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[24], D[42], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[26], D[46], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[23], D[41], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[27], D[47], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[22], D[39], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[28], D[48], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[21], D[38], L[2]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[2] = fmaf(float(4.16666667e-02) * M[20], D[36], L[2]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	return 291 + do_phi * 97;
}

__device__
inline int M2L_kernel(array<float, 56>& L, const array<float, 35>& M, const array<float, 56>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[34], D[34], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[33], D[33], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[32], D[32], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[31], D[31], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[30], D[30], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[29], D[29], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[28], D[28], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[27], D[27], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[26], D[26], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[25], D[25], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[24], D[24], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[23], D[23], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[22], D[22], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[21], D[21], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[20], D[20], L[0]);
	}
	L[1] = fmaf(float(1.66666667e-01) * M[33], D[48], L[1]);
	L[8] = fmaf(float(5.00000000e-01) * M[11], D[42], L[8]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[8] = fmaf(float(1.66666667e-01) * M[10], D[39], L[8]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[9] = fmaf(float(1.66666667e-01) * M[16], D[52], L[9]);
	L[1] = fmaf(float(4.16666667e-02) * M[30], D[45], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[17], D[53], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[31], D[46], L[1]);
	L[9] = fmaf(M[1], D[15], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[9] = fmaf(M[6], D[29], L[9]);
	L[1] = fmaf(float(2.50000000e-01) * M[32], D[47], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[15], D[49], L[9]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[9] = fmaf(M[5], D[28], L[9]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[9] = fmaf(M[14], D[48], L[9]);
	L[1] = fmaf(float(4.16666667e-02) * M[20], D[35], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[13], D[47], L[9]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[4], D[25], L[9]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[12], D[44], L[9]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[11], D[43], L[9]);
	L[1] = fmaf(float(4.16666667e-02) * M[34], D[49], L[1]);
	L[9] = fmaf(float(1.66666667e-01) * M[10], D[40], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[7], D[32], L[9]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[18], D[54], L[9]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[9] = fmaf(M[8], D[33], L[9]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[9] = fmaf(M[2], D[18], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[29], D[44], L[1]);
	L[9] = fmaf(float(1.66666667e-01) * M[19], D[55], L[9]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[9] = fmaf(float(5.00000000e-01) * M[9], D[34], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[21], D[36], L[1]);
	L[9] = fmaf(M[3], D[19], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[22], D[37], L[1]);
	L[9] = fmaf(M[0], D[9], L[9]);
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[10] = fmaf(float(5.00000000e-01) * M[9], D[40], L[10]);
	L[1] = fmaf(float(2.50000000e-01) * M[23], D[38], L[1]);
	L[10] = fmaf(M[3], D[22], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[24], D[39], L[1]);
	L[10] = fmaf(M[0], D[10], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[10] = fmaf(M[8], D[39], L[10]);
	L[1] = fmaf(float(2.50000000e-01) * M[25], D[40], L[1]);
	L[10] = fmaf(float(5.00000000e-01) * M[7], D[38], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[10] = fmaf(M[1], D[20], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[10] = fmaf(M[6], D[37], L[10]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[10] = fmaf(M[5], D[36], L[10]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[10] = fmaf(float(5.00000000e-01) * M[4], D[35], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[28], D[43], L[1]);
	L[10] = fmaf(M[2], D[21], L[10]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[11] = fmaf(M[8], D[42], L[11]);
	L[1] = fmaf(float(5.00000000e-01) * M[27], D[42], L[1]);
	L[11] = fmaf(float(5.00000000e-01) * M[7], D[41], L[11]);
	L[1] = fmaf(float(1.66666667e-01) * M[26], D[41], L[1]);
	L[11] = fmaf(M[2], D[23], L[11]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	L[11] = fmaf(float(5.00000000e-01) * M[9], D[43], L[11]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[11] = fmaf(M[3], D[24], L[11]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[11] = fmaf(M[0], D[11], L[11]);
	L[2] = fmaf(float(4.16666667e-02) * M[30], D[50], L[2]);
	L[11] = fmaf(float(5.00000000e-01) * M[4], D[36], L[11]);
	L[2] = fmaf(float(1.66666667e-01) * M[31], D[51], L[2]);
	L[11] = fmaf(M[5], D[38], L[11]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[11] = fmaf(M[6], D[39], L[11]);
	L[2] = fmaf(float(2.50000000e-01) * M[32], D[52], L[2]);
	L[11] = fmaf(M[1], D[21], L[11]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[12] = fmaf(M[2], D[24], L[12]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[12] = fmaf(float(5.00000000e-01) * M[4], D[37], L[12]);
	L[2] = fmaf(float(1.66666667e-01) * M[33], D[53], L[2]);
	L[12] = fmaf(M[5], D[39], L[12]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[12] = fmaf(M[6], D[40], L[12]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[12] = fmaf(M[1], D[22], L[12]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[12] = fmaf(float(5.00000000e-01) * M[7], D[42], L[12]);
	L[2] = fmaf(float(4.16666667e-02) * M[34], D[54], L[2]);
	L[12] = fmaf(M[8], D[43], L[12]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[12] = fmaf(float(5.00000000e-01) * M[9], D[44], L[12]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[12] = fmaf(M[3], D[25], L[12]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[12] = fmaf(M[0], D[12], L[12]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[13] = fmaf(M[1], D[23], L[13]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[13] = fmaf(M[0], D[13], L[13]);
	L[2] = fmaf(float(4.16666667e-02) * M[20], D[36], L[2]);
	L[13] = fmaf(M[3], D[27], L[13]);
	L[2] = fmaf(float(1.66666667e-01) * M[21], D[38], L[2]);
	L[13] = fmaf(M[6], D[42], L[13]);
	L[2] = fmaf(float(1.66666667e-01) * M[22], D[39], L[2]);
	L[13] = fmaf(float(5.00000000e-01) * M[9], D[47], L[13]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[13] = fmaf(M[2], D[26], L[13]);
	L[2] = fmaf(float(2.50000000e-01) * M[23], D[41], L[2]);
	L[13] = fmaf(M[8], D[46], L[13]);
	L[2] = fmaf(float(5.00000000e-01) * M[24], D[42], L[2]);
	L[13] = fmaf(float(5.00000000e-01) * M[7], D[45], L[13]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[13] = fmaf(float(5.00000000e-01) * M[4], D[38], L[13]);
	L[2] = fmaf(float(2.50000000e-01) * M[25], D[43], L[2]);
	L[13] = fmaf(M[5], D[41], L[13]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[14] = fmaf(float(5.00000000e-01) * M[4], D[39], L[14]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[14] = fmaf(M[5], D[42], L[14]);
	L[2] = fmaf(float(1.66666667e-01) * M[26], D[45], L[2]);
	L[14] = fmaf(M[6], D[43], L[14]);
	L[2] = fmaf(float(5.00000000e-01) * M[27], D[46], L[2]);
	L[14] = fmaf(M[1], D[24], L[14]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[14] = fmaf(float(5.00000000e-01) * M[7], D[46], L[14]);
	L[2] = fmaf(float(5.00000000e-01) * M[28], D[47], L[2]);
	L[14] = fmaf(M[8], D[47], L[14]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[14] = fmaf(M[2], D[27], L[14]);
	L[2] = fmaf(float(1.66666667e-01) * M[29], D[48], L[2]);
	L[14] = fmaf(float(5.00000000e-01) * M[9], D[48], L[14]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[14] = fmaf(M[3], D[28], L[14]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[14] = fmaf(M[0], D[14], L[14]);
	L[3] = fmaf(float(1.66666667e-01) * M[33], D[54], L[3]);
	L[15] = fmaf(M[5], D[43], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[15] = fmaf(float(5.00000000e-01) * M[4], D[40], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[15] = fmaf(M[3], D[29], L[15]);
	L[3] = fmaf(float(2.50000000e-01) * M[32], D[53], L[3]);
	L[15] = fmaf(M[0], D[15], L[15]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[15] = fmaf(M[6], D[44], L[15]);
	L[3] = fmaf(float(1.66666667e-01) * M[31], D[52], L[3]);
	L[15] = fmaf(float(5.00000000e-01) * M[9], D[49], L[15]);
	L[3] = fmaf(float(4.16666667e-02) * M[30], D[51], L[3]);
	L[15] = fmaf(M[2], D[28], L[15]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[15] = fmaf(M[8], D[48], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[15] = fmaf(float(5.00000000e-01) * M[7], D[47], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[15] = fmaf(M[1], D[25], L[15]);
	L[3] = fmaf(float(1.66666667e-01) * M[29], D[49], L[3]);
	L[16] = fmaf(M[6], D[46], L[16]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[16] = fmaf(M[8], D[51], L[16]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[16] = fmaf(M[2], D[30], L[16]);
	L[3] = fmaf(float(5.00000000e-01) * M[28], D[48], L[3]);
	L[16] = fmaf(float(5.00000000e-01) * M[9], D[52], L[16]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[16] = fmaf(M[3], D[31], L[16]);
	L[3] = fmaf(float(5.00000000e-01) * M[27], D[47], L[3]);
	L[16] = fmaf(M[0], D[16], L[16]);
	L[3] = fmaf(float(1.66666667e-01) * M[26], D[46], L[3]);
	L[16] = fmaf(float(5.00000000e-01) * M[4], D[41], L[16]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[16] = fmaf(float(5.00000000e-01) * M[7], D[50], L[16]);
	L[3] = fmaf(float(4.16666667e-02) * M[20], D[37], L[3]);
	L[16] = fmaf(M[1], D[26], L[16]);
	L[3] = fmaf(float(1.66666667e-01) * M[21], D[39], L[3]);
	L[16] = fmaf(M[5], D[45], L[16]);
	L[3] = fmaf(float(1.66666667e-01) * M[22], D[40], L[3]);
	L[17] = fmaf(M[0], D[17], L[17]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[17] = fmaf(M[3], D[32], L[17]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[17] = fmaf(float(5.00000000e-01) * M[9], D[53], L[17]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[17] = fmaf(M[2], D[31], L[17]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	L[17] = fmaf(M[8], D[52], L[17]);
	L[3] = fmaf(float(2.50000000e-01) * M[23], D[42], L[3]);
	L[17] = fmaf(float(5.00000000e-01) * M[7], D[51], L[17]);
	L[3] = fmaf(float(5.00000000e-01) * M[24], D[43], L[3]);
	L[17] = fmaf(M[1], D[27], L[17]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[17] = fmaf(M[6], D[47], L[17]);
	L[3] = fmaf(float(2.50000000e-01) * M[25], D[44], L[3]);
	L[17] = fmaf(M[5], D[46], L[17]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[17] = fmaf(float(5.00000000e-01) * M[4], D[42], L[17]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[18] = fmaf(M[3], D[33], L[18]);
	L[3] = fmaf(float(4.16666667e-02) * M[34], D[55], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[7], D[52], L[18]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[18] = fmaf(M[0], D[18], L[18]);
	L[4] = fmaf(M[0], D[4], L[4]);
	L[18] = fmaf(float(5.00000000e-01) * M[9], D[54], L[18]);
	L[4] = fmaf(M[8], D[24], L[4]);
	L[18] = fmaf(M[2], D[32], L[18]);
	L[4] = fmaf(M[3], D[12], L[4]);
	L[18] = fmaf(M[8], D[53], L[18]);
	L[4] = fmaf(float(5.00000000e-01) * M[9], D[25], L[4]);
	L[18] = fmaf(float(5.00000000e-01) * M[4], D[43], L[18]);
	L[4] = fmaf(float(1.66666667e-01) * M[19], D[44], L[4]);
	L[18] = fmaf(M[5], D[47], L[18]);
	L[4] = fmaf(M[2], D[11], L[4]);
	L[18] = fmaf(M[6], D[48], L[18]);
	L[4] = fmaf(float(5.00000000e-01) * M[15], D[40], L[4]);
	L[18] = fmaf(M[1], D[28], L[18]);
	L[4] = fmaf(M[6], D[22], L[4]);
	L[19] = fmaf(M[8], D[54], L[19]);
	L[4] = fmaf(M[1], D[10], L[4]);
	L[19] = fmaf(M[2], D[33], L[19]);
	L[4] = fmaf(float(1.66666667e-01) * M[16], D[41], L[4]);
	L[19] = fmaf(float(5.00000000e-01) * M[9], D[55], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[17], D[42], L[4]);
	L[19] = fmaf(M[3], D[34], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[7], D[23], L[4]);
	L[19] = fmaf(M[0], D[19], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[18], D[43], L[4]);
	L[19] = fmaf(float(5.00000000e-01) * M[7], D[53], L[19]);
	L[4] = fmaf(M[5], D[21], L[4]);
	L[19] = fmaf(M[1], D[29], L[19]);
	L[4] = fmaf(M[14], D[39], L[4]);
	L[19] = fmaf(M[6], D[49], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[13], D[38], L[4]);
	L[19] = fmaf(M[5], D[48], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[4], D[20], L[4]);
	L[19] = fmaf(float(5.00000000e-01) * M[4], D[44], L[19]);
	L[4] = fmaf(float(5.00000000e-01) * M[12], D[37], L[4]);
	L[20] = fmaf(M[0], D[20], L[20]);
	L[4] = fmaf(float(5.00000000e-01) * M[11], D[36], L[4]);
	L[20] = fmaf(M[3], D[37], L[20]);
	L[4] = fmaf(float(1.66666667e-01) * M[10], D[35], L[4]);
	L[20] = fmaf(M[2], D[36], L[20]);
	L[5] = fmaf(float(5.00000000e-01) * M[18], D[47], L[5]);
	L[20] = fmaf(M[1], D[35], L[20]);
	L[5] = fmaf(float(5.00000000e-01) * M[7], D[26], L[5]);
	L[21] = fmaf(M[0], D[21], L[21]);
	L[5] = fmaf(M[8], D[27], L[5]);
	L[21] = fmaf(M[2], D[38], L[21]);
	L[5] = fmaf(M[2], D[13], L[5]);
	L[21] = fmaf(M[1], D[36], L[21]);
	L[5] = fmaf(float(1.66666667e-01) * M[19], D[48], L[5]);
	L[21] = fmaf(M[3], D[39], L[21]);
	L[5] = fmaf(float(5.00000000e-01) * M[9], D[28], L[5]);
	L[22] = fmaf(M[1], D[37], L[22]);
	L[5] = fmaf(M[3], D[14], L[5]);
	L[22] = fmaf(M[3], D[40], L[22]);
	L[5] = fmaf(M[0], D[5], L[5]);
	L[22] = fmaf(M[2], D[39], L[22]);
	L[5] = fmaf(float(5.00000000e-01) * M[17], D[46], L[5]);
	L[22] = fmaf(M[0], D[22], L[22]);
	L[5] = fmaf(float(1.66666667e-01) * M[16], D[45], L[5]);
	L[23] = fmaf(M[0], D[23], L[23]);
	L[5] = fmaf(M[1], D[11], L[5]);
	L[23] = fmaf(M[3], D[42], L[23]);
	L[5] = fmaf(M[6], D[24], L[5]);
	L[23] = fmaf(M[2], D[41], L[23]);
	L[5] = fmaf(float(5.00000000e-01) * M[15], D[43], L[5]);
	L[23] = fmaf(M[1], D[38], L[23]);
	L[5] = fmaf(M[5], D[23], L[5]);
	L[24] = fmaf(M[1], D[39], L[24]);
	L[5] = fmaf(float(1.66666667e-01) * M[10], D[36], L[5]);
	L[24] = fmaf(M[2], D[42], L[24]);
	L[5] = fmaf(float(5.00000000e-01) * M[11], D[38], L[5]);
	L[24] = fmaf(M[3], D[43], L[24]);
	L[5] = fmaf(float(5.00000000e-01) * M[12], D[39], L[5]);
	L[24] = fmaf(M[0], D[24], L[24]);
	L[5] = fmaf(float(5.00000000e-01) * M[4], D[21], L[5]);
	L[25] = fmaf(M[2], D[43], L[25]);
	L[5] = fmaf(float(5.00000000e-01) * M[13], D[41], L[5]);
	L[25] = fmaf(M[1], D[40], L[25]);
	L[5] = fmaf(M[14], D[42], L[5]);
	L[25] = fmaf(M[3], D[44], L[25]);
	L[6] = fmaf(M[8], D[28], L[6]);
	L[25] = fmaf(M[0], D[25], L[25]);
	L[6] = fmaf(float(1.66666667e-01) * M[16], D[46], L[6]);
	L[26] = fmaf(M[0], D[26], L[26]);
	L[6] = fmaf(float(1.66666667e-01) * M[19], D[49], L[6]);
	L[26] = fmaf(M[3], D[46], L[26]);
	L[6] = fmaf(float(5.00000000e-01) * M[9], D[29], L[6]);
	L[26] = fmaf(M[2], D[45], L[26]);
	L[6] = fmaf(M[3], D[15], L[6]);
	L[26] = fmaf(M[1], D[41], L[26]);
	L[6] = fmaf(M[0], D[6], L[6]);
	L[27] = fmaf(M[1], D[42], L[27]);
	L[6] = fmaf(M[2], D[14], L[6]);
	L[27] = fmaf(M[2], D[46], L[27]);
	L[6] = fmaf(float(5.00000000e-01) * M[18], D[48], L[6]);
	L[27] = fmaf(M[3], D[47], L[27]);
	L[6] = fmaf(float(5.00000000e-01) * M[7], D[27], L[6]);
	L[27] = fmaf(M[0], D[27], L[27]);
	L[6] = fmaf(float(5.00000000e-01) * M[17], D[47], L[6]);
	L[28] = fmaf(M[0], D[28], L[28]);
	L[6] = fmaf(float(1.66666667e-01) * M[10], D[37], L[6]);
	L[28] = fmaf(M[3], D[48], L[28]);
	L[6] = fmaf(M[1], D[12], L[6]);
	L[28] = fmaf(M[2], D[47], L[28]);
	L[6] = fmaf(M[6], D[25], L[6]);
	L[28] = fmaf(M[1], D[43], L[28]);
	L[6] = fmaf(float(5.00000000e-01) * M[15], D[44], L[6]);
	L[29] = fmaf(M[1], D[44], L[29]);
	L[6] = fmaf(M[5], D[24], L[6]);
	L[29] = fmaf(M[0], D[29], L[29]);
	L[6] = fmaf(M[14], D[43], L[6]);
	L[29] = fmaf(M[3], D[49], L[29]);
	L[6] = fmaf(float(5.00000000e-01) * M[13], D[42], L[6]);
	L[29] = fmaf(M[2], D[48], L[29]);
	L[6] = fmaf(float(5.00000000e-01) * M[4], D[22], L[6]);
	L[30] = fmaf(M[2], D[50], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[12], D[40], L[6]);
	L[30] = fmaf(M[1], D[45], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[11], D[39], L[6]);
	L[30] = fmaf(M[0], D[30], L[30]);
	L[7] = fmaf(M[5], D[26], L[7]);
	L[30] = fmaf(M[3], D[51], L[30]);
	L[7] = fmaf(float(5.00000000e-01) * M[11], D[41], L[7]);
	L[31] = fmaf(M[0], D[31], L[31]);
	L[7] = fmaf(float(1.66666667e-01) * M[10], D[38], L[7]);
	L[31] = fmaf(M[1], D[46], L[31]);
	L[7] = fmaf(M[0], D[7], L[7]);
	L[31] = fmaf(M[2], D[51], L[31]);
	L[7] = fmaf(M[3], D[17], L[7]);
	L[31] = fmaf(M[3], D[52], L[31]);
	L[7] = fmaf(float(5.00000000e-01) * M[9], D[32], L[7]);
	L[32] = fmaf(M[0], D[32], L[32]);
	L[7] = fmaf(float(1.66666667e-01) * M[19], D[53], L[7]);
	L[32] = fmaf(M[1], D[47], L[32]);
	L[7] = fmaf(M[2], D[16], L[7]);
	L[32] = fmaf(M[2], D[52], L[32]);
	L[7] = fmaf(M[8], D[31], L[7]);
	L[32] = fmaf(M[3], D[53], L[32]);
	L[7] = fmaf(float(5.00000000e-01) * M[18], D[52], L[7]);
	L[33] = fmaf(M[3], D[54], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[7], D[30], L[7]);
	L[33] = fmaf(M[1], D[48], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[17], D[51], L[7]);
	L[33] = fmaf(M[2], D[53], L[33]);
	L[7] = fmaf(M[1], D[13], L[7]);
	L[33] = fmaf(M[0], D[33], L[33]);
	L[7] = fmaf(M[6], D[27], L[7]);
	L[34] = fmaf(M[1], D[49], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[15], D[47], L[7]);
	L[34] = fmaf(M[2], D[54], L[34]);
	L[7] = fmaf(float(1.66666667e-01) * M[16], D[50], L[7]);
	L[34] = fmaf(M[3], D[55], L[34]);
	L[7] = fmaf(M[14], D[46], L[7]);
	L[34] = fmaf(M[0], D[34], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[13], D[45], L[7]);
	L[35] = fmaf(M[0], D[35], L[35]);
	L[7] = fmaf(float(5.00000000e-01) * M[4], D[23], L[7]);
	L[36] = fmaf(M[0], D[36], L[36]);
	L[7] = fmaf(float(5.00000000e-01) * M[12], D[42], L[7]);
	L[37] = fmaf(M[0], D[37], L[37]);
	L[8] = fmaf(M[6], D[28], L[8]);
	L[38] = fmaf(M[0], D[38], L[38]);
	L[8] = fmaf(M[1], D[14], L[8]);
	L[39] = fmaf(M[0], D[39], L[39]);
	L[8] = fmaf(float(1.66666667e-01) * M[16], D[51], L[8]);
	L[40] = fmaf(M[0], D[40], L[40]);
	L[8] = fmaf(float(5.00000000e-01) * M[17], D[52], L[8]);
	L[41] = fmaf(M[0], D[41], L[41]);
	L[8] = fmaf(float(5.00000000e-01) * M[7], D[31], L[8]);
	L[42] = fmaf(M[0], D[42], L[42]);
	L[8] = fmaf(float(5.00000000e-01) * M[18], D[53], L[8]);
	L[43] = fmaf(M[0], D[43], L[43]);
	L[8] = fmaf(M[8], D[32], L[8]);
	L[44] = fmaf(M[0], D[44], L[44]);
	L[8] = fmaf(M[2], D[17], L[8]);
	L[45] = fmaf(M[0], D[45], L[45]);
	L[8] = fmaf(float(1.66666667e-01) * M[19], D[54], L[8]);
	L[46] = fmaf(M[0], D[46], L[46]);
	L[8] = fmaf(float(5.00000000e-01) * M[9], D[33], L[8]);
	L[47] = fmaf(M[0], D[47], L[47]);
	L[8] = fmaf(M[3], D[18], L[8]);
	L[48] = fmaf(M[0], D[48], L[48]);
	L[8] = fmaf(M[0], D[8], L[8]);
	L[49] = fmaf(M[0], D[49], L[49]);
	L[8] = fmaf(float(5.00000000e-01) * M[15], D[48], L[8]);
	L[50] = fmaf(M[0], D[50], L[50]);
	L[8] = fmaf(M[5], D[27], L[8]);
	L[51] = fmaf(M[0], D[51], L[51]);
	L[8] = fmaf(M[14], D[47], L[8]);
	L[52] = fmaf(M[0], D[52], L[52]);
	L[8] = fmaf(float(5.00000000e-01) * M[13], D[46], L[8]);
	L[53] = fmaf(M[0], D[53], L[53]);
	L[8] = fmaf(float(5.00000000e-01) * M[4], D[24], L[8]);
	L[54] = fmaf(M[0], D[54], L[54]);
	L[8] = fmaf(float(5.00000000e-01) * M[12], D[43], L[8]);
	L[55] = fmaf(M[0], D[55], L[55]);
	return 995 + do_phi * 97;
}

inline array<float, 35> P2M_kernel(array<float, NDIM>& X) {
	array<float, 35> M;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	M[0] = float(1);
	M[1] = X[0];
	M[2] = X[1];
	M[3] = X[2];
	M[9] = M[3] * M[3];
	M[8] = M[2] * M[3];
	M[7] = M[2] * M[2];
	M[6] = M[1] * M[3];
	M[5] = M[1] * M[2];
	M[4] = M[1] * M[1];
	M[19] = M[9] * M[3];
	M[18] = M[8] * M[3];
	M[17] = M[8] * M[2];
	M[16] = M[7] * M[2];
	M[15] = M[6] * M[3];
	M[14] = M[5] * M[3];
	M[13] = M[5] * M[2];
	M[12] = M[6] * M[1];
	M[11] = M[5] * M[1];
	M[10] = M[4] * M[1];
	M[34] = M[9] * M[9];
	M[33] = M[8] * M[9];
	M[32] = M[8] * M[8];
	M[31] = M[8] * M[7];
	M[30] = M[7] * M[7];
	M[29] = M[6] * M[9];
	M[28] = M[5] * M[9];
	M[27] = M[5] * M[8];
	M[26] = M[5] * M[7];
	M[25] = M[6] * M[6];
	M[24] = M[5] * M[6];
	M[23] = M[5] * M[5];
	M[22] = M[6] * M[4];
	M[21] = M[5] * M[4];
	M[20] = M[4] * M[4];
	return M;
/* FLOPS = 34*/
}

inline array<float, 35> M2M_kernel(const array<float,35>& Ma, array<float, NDIM>& X) {
	array<float, 35> Mb;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	Mb[0] = Ma[0];
	Mb[1] = Ma[1];
	Mb[2] = Ma[2];
	Mb[3] = Ma[3];
	Mb[4] = Ma[4];
	Mb[5] = Ma[5];
	Mb[6] = Ma[6];
	Mb[7] = Ma[7];
	Mb[8] = Ma[8];
	Mb[9] = Ma[9];
	Mb[10] = Ma[10];
	Mb[11] = Ma[11];
	Mb[12] = Ma[12];
	Mb[13] = Ma[13];
	Mb[14] = Ma[14];
	Mb[15] = Ma[15];
	Mb[16] = Ma[16];
	Mb[17] = Ma[17];
	Mb[18] = Ma[18];
	Mb[19] = Ma[19];
	Mb[20] = Ma[20];
	Mb[21] = Ma[21];
	Mb[22] = Ma[22];
	Mb[23] = Ma[23];
	Mb[24] = Ma[24];
	Mb[25] = Ma[25];
	Mb[26] = Ma[26];
	Mb[27] = Ma[27];
	Mb[28] = Ma[28];
	Mb[29] = Ma[29];
	Mb[30] = Ma[30];
	Mb[31] = Ma[31];
	Mb[32] = Ma[32];
	Mb[33] = Ma[33];
	Mb[34] = Ma[34];
	Mb[1] = fmaf( x100, Ma[0], Mb[1]);
	Mb[23] = fmaf(float(2.00000000e+00) * x100, Ma[13], Mb[23]);
	Mb[2] = fmaf( x010, Ma[0], Mb[2]);
	Mb[23] = fmaf(float(2.00000000e+00) * x010, Ma[11], Mb[23]);
	Mb[3] = fmaf( x001, Ma[0], Mb[3]);
	Mb[24] = fmaf(float(2.00000000e+00) * x111, Ma[1], Mb[24]);
	Mb[4] = fmaf(float(2.00000000e+00) * x100, Ma[1], Mb[4]);
	Mb[24] = fmaf( x211, Ma[0], Mb[24]);
	Mb[4] = fmaf( x200, Ma[0], Mb[4]);
	Mb[24] = fmaf( x210, Ma[3], Mb[24]);
	Mb[5] = fmaf( x010, Ma[1], Mb[5]);
	Mb[24] = fmaf( x201, Ma[2], Mb[24]);
	Mb[5] = fmaf( x100, Ma[2], Mb[5]);
	Mb[24] = fmaf( x200, Ma[8], Mb[24]);
	Mb[5] = fmaf( x110, Ma[0], Mb[5]);
	Mb[24] = fmaf(float(2.00000000e+00) * x110, Ma[6], Mb[24]);
	Mb[6] = fmaf( x001, Ma[1], Mb[6]);
	Mb[24] = fmaf( x001, Ma[11], Mb[24]);
	Mb[6] = fmaf( x100, Ma[3], Mb[6]);
	Mb[24] = fmaf( x010, Ma[12], Mb[24]);
	Mb[6] = fmaf( x101, Ma[0], Mb[6]);
	Mb[24] = fmaf( x011, Ma[4], Mb[24]);
	Mb[7] = fmaf(float(2.00000000e+00) * x010, Ma[2], Mb[7]);
	Mb[24] = fmaf(float(2.00000000e+00) * x101, Ma[5], Mb[24]);
	Mb[7] = fmaf( x020, Ma[0], Mb[7]);
	Mb[24] = fmaf(float(2.00000000e+00) * x100, Ma[14], Mb[24]);
	Mb[8] = fmaf( x001, Ma[2], Mb[8]);
	Mb[25] = fmaf( x202, Ma[0], Mb[25]);
	Mb[8] = fmaf( x010, Ma[3], Mb[8]);
	Mb[25] = fmaf(float(2.00000000e+00) * x201, Ma[3], Mb[25]);
	Mb[8] = fmaf( x011, Ma[0], Mb[8]);
	Mb[25] = fmaf( x200, Ma[9], Mb[25]);
	Mb[9] = fmaf(float(2.00000000e+00) * x001, Ma[3], Mb[9]);
	Mb[25] = fmaf(float(2.00000000e+00) * x102, Ma[1], Mb[25]);
	Mb[9] = fmaf( x002, Ma[0], Mb[9]);
	Mb[25] = fmaf(float(4.00000000e+00) * x101, Ma[6], Mb[25]);
	Mb[10] = fmaf(float(3.00000000e+00) * x100, Ma[4], Mb[10]);
	Mb[25] = fmaf(float(2.00000000e+00) * x100, Ma[15], Mb[25]);
	Mb[10] = fmaf(float(3.00000000e+00) * x200, Ma[1], Mb[10]);
	Mb[25] = fmaf( x002, Ma[4], Mb[25]);
	Mb[10] = fmaf( x300, Ma[0], Mb[10]);
	Mb[25] = fmaf(float(2.00000000e+00) * x001, Ma[12], Mb[25]);
	Mb[11] = fmaf( x010, Ma[4], Mb[11]);
	Mb[26] = fmaf(float(3.00000000e+00) * x010, Ma[13], Mb[26]);
	Mb[11] = fmaf( x210, Ma[0], Mb[11]);
	Mb[26] = fmaf(float(3.00000000e+00) * x020, Ma[5], Mb[26]);
	Mb[11] = fmaf( x200, Ma[2], Mb[11]);
	Mb[26] = fmaf( x030, Ma[1], Mb[26]);
	Mb[11] = fmaf(float(2.00000000e+00) * x100, Ma[5], Mb[11]);
	Mb[26] = fmaf( x100, Ma[16], Mb[26]);
	Mb[11] = fmaf(float(2.00000000e+00) * x110, Ma[1], Mb[11]);
	Mb[26] = fmaf(float(3.00000000e+00) * x110, Ma[7], Mb[26]);
	Mb[12] = fmaf( x001, Ma[4], Mb[12]);
	Mb[26] = fmaf(float(3.00000000e+00) * x120, Ma[2], Mb[26]);
	Mb[12] = fmaf(float(2.00000000e+00) * x100, Ma[6], Mb[12]);
	Mb[26] = fmaf( x130, Ma[0], Mb[26]);
	Mb[12] = fmaf(float(2.00000000e+00) * x101, Ma[1], Mb[12]);
	Mb[27] = fmaf(float(2.00000000e+00) * x011, Ma[5], Mb[27]);
	Mb[12] = fmaf( x200, Ma[3], Mb[12]);
	Mb[27] = fmaf(float(2.00000000e+00) * x010, Ma[14], Mb[27]);
	Mb[12] = fmaf( x201, Ma[0], Mb[12]);
	Mb[27] = fmaf( x001, Ma[13], Mb[27]);
	Mb[13] = fmaf( x100, Ma[7], Mb[13]);
	Mb[27] = fmaf( x021, Ma[1], Mb[27]);
	Mb[13] = fmaf( x120, Ma[0], Mb[13]);
	Mb[27] = fmaf( x100, Ma[17], Mb[27]);
	Mb[13] = fmaf(float(2.00000000e+00) * x110, Ma[2], Mb[13]);
	Mb[27] = fmaf( x020, Ma[6], Mb[27]);
	Mb[13] = fmaf( x020, Ma[1], Mb[13]);
	Mb[27] = fmaf( x121, Ma[0], Mb[27]);
	Mb[13] = fmaf(float(2.00000000e+00) * x010, Ma[5], Mb[13]);
	Mb[27] = fmaf( x120, Ma[3], Mb[27]);
	Mb[14] = fmaf( x001, Ma[5], Mb[14]);
	Mb[27] = fmaf(float(2.00000000e+00) * x110, Ma[8], Mb[27]);
	Mb[14] = fmaf( x010, Ma[6], Mb[14]);
	Mb[27] = fmaf( x101, Ma[7], Mb[27]);
	Mb[14] = fmaf( x111, Ma[0], Mb[14]);
	Mb[27] = fmaf(float(2.00000000e+00) * x111, Ma[2], Mb[27]);
	Mb[14] = fmaf( x110, Ma[3], Mb[14]);
	Mb[28] = fmaf( x100, Ma[18], Mb[28]);
	Mb[14] = fmaf( x101, Ma[2], Mb[14]);
	Mb[28] = fmaf( x112, Ma[0], Mb[28]);
	Mb[14] = fmaf( x100, Ma[8], Mb[14]);
	Mb[28] = fmaf(float(2.00000000e+00) * x111, Ma[3], Mb[28]);
	Mb[14] = fmaf( x011, Ma[1], Mb[14]);
	Mb[28] = fmaf( x110, Ma[9], Mb[28]);
	Mb[15] = fmaf( x102, Ma[0], Mb[15]);
	Mb[28] = fmaf( x102, Ma[2], Mb[28]);
	Mb[15] = fmaf( x002, Ma[1], Mb[15]);
	Mb[28] = fmaf(float(2.00000000e+00) * x101, Ma[8], Mb[28]);
	Mb[15] = fmaf( x100, Ma[9], Mb[15]);
	Mb[28] = fmaf( x012, Ma[1], Mb[28]);
	Mb[15] = fmaf(float(2.00000000e+00) * x101, Ma[3], Mb[15]);
	Mb[28] = fmaf(float(2.00000000e+00) * x011, Ma[6], Mb[28]);
	Mb[15] = fmaf(float(2.00000000e+00) * x001, Ma[6], Mb[15]);
	Mb[28] = fmaf( x010, Ma[15], Mb[28]);
	Mb[16] = fmaf(float(3.00000000e+00) * x010, Ma[7], Mb[16]);
	Mb[28] = fmaf( x002, Ma[5], Mb[28]);
	Mb[16] = fmaf(float(3.00000000e+00) * x020, Ma[2], Mb[16]);
	Mb[28] = fmaf(float(2.00000000e+00) * x001, Ma[14], Mb[28]);
	Mb[16] = fmaf( x030, Ma[0], Mb[16]);
	Mb[29] = fmaf( x103, Ma[0], Mb[29]);
	Mb[17] = fmaf( x021, Ma[0], Mb[17]);
	Mb[29] = fmaf(float(3.00000000e+00) * x102, Ma[3], Mb[29]);
	Mb[17] = fmaf( x020, Ma[3], Mb[17]);
	Mb[29] = fmaf(float(3.00000000e+00) * x101, Ma[9], Mb[29]);
	Mb[17] = fmaf(float(2.00000000e+00) * x011, Ma[2], Mb[17]);
	Mb[29] = fmaf( x003, Ma[1], Mb[29]);
	Mb[17] = fmaf(float(2.00000000e+00) * x010, Ma[8], Mb[17]);
	Mb[29] = fmaf(float(3.00000000e+00) * x002, Ma[6], Mb[29]);
	Mb[17] = fmaf( x001, Ma[7], Mb[17]);
	Mb[29] = fmaf(float(3.00000000e+00) * x001, Ma[15], Mb[29]);
	Mb[18] = fmaf(float(2.00000000e+00) * x001, Ma[8], Mb[18]);
	Mb[29] = fmaf( x100, Ma[19], Mb[29]);
	Mb[18] = fmaf( x002, Ma[2], Mb[18]);
	Mb[30] = fmaf(float(4.00000000e+00) * x010, Ma[16], Mb[30]);
	Mb[18] = fmaf( x010, Ma[9], Mb[18]);
	Mb[30] = fmaf(float(6.00000000e+00) * x020, Ma[7], Mb[30]);
	Mb[18] = fmaf(float(2.00000000e+00) * x011, Ma[3], Mb[18]);
	Mb[30] = fmaf(float(4.00000000e+00) * x030, Ma[2], Mb[30]);
	Mb[18] = fmaf( x012, Ma[0], Mb[18]);
	Mb[30] = fmaf( x040, Ma[0], Mb[30]);
	Mb[19] = fmaf(float(3.00000000e+00) * x001, Ma[9], Mb[19]);
	Mb[31] = fmaf(float(3.00000000e+00) * x021, Ma[2], Mb[31]);
	Mb[19] = fmaf(float(3.00000000e+00) * x002, Ma[3], Mb[19]);
	Mb[31] = fmaf( x031, Ma[0], Mb[31]);
	Mb[19] = fmaf( x003, Ma[0], Mb[19]);
	Mb[31] = fmaf( x030, Ma[3], Mb[31]);
	Mb[20] = fmaf(float(4.00000000e+00) * x100, Ma[10], Mb[20]);
	Mb[31] = fmaf(float(3.00000000e+00) * x020, Ma[8], Mb[31]);
	Mb[20] = fmaf(float(6.00000000e+00) * x200, Ma[4], Mb[20]);
	Mb[31] = fmaf(float(3.00000000e+00) * x011, Ma[7], Mb[31]);
	Mb[20] = fmaf(float(4.00000000e+00) * x300, Ma[1], Mb[20]);
	Mb[31] = fmaf(float(3.00000000e+00) * x010, Ma[17], Mb[31]);
	Mb[20] = fmaf( x400, Ma[0], Mb[20]);
	Mb[31] = fmaf( x001, Ma[16], Mb[31]);
	Mb[21] = fmaf( x010, Ma[10], Mb[21]);
	Mb[32] = fmaf(float(2.00000000e+00) * x001, Ma[17], Mb[32]);
	Mb[21] = fmaf( x310, Ma[0], Mb[21]);
	Mb[32] = fmaf( x002, Ma[7], Mb[32]);
	Mb[21] = fmaf( x300, Ma[2], Mb[21]);
	Mb[32] = fmaf(float(2.00000000e+00) * x010, Ma[18], Mb[32]);
	Mb[21] = fmaf(float(3.00000000e+00) * x210, Ma[1], Mb[21]);
	Mb[32] = fmaf(float(4.00000000e+00) * x011, Ma[8], Mb[32]);
	Mb[21] = fmaf(float(3.00000000e+00) * x110, Ma[4], Mb[21]);
	Mb[32] = fmaf(float(2.00000000e+00) * x012, Ma[2], Mb[32]);
	Mb[21] = fmaf(float(3.00000000e+00) * x100, Ma[11], Mb[21]);
	Mb[32] = fmaf( x020, Ma[9], Mb[32]);
	Mb[21] = fmaf(float(3.00000000e+00) * x200, Ma[5], Mb[21]);
	Mb[32] = fmaf(float(2.00000000e+00) * x021, Ma[3], Mb[32]);
	Mb[22] = fmaf( x001, Ma[10], Mb[22]);
	Mb[32] = fmaf( x022, Ma[0], Mb[32]);
	Mb[22] = fmaf(float(3.00000000e+00) * x100, Ma[12], Mb[22]);
	Mb[33] = fmaf(float(3.00000000e+00) * x012, Ma[3], Mb[33]);
	Mb[22] = fmaf(float(3.00000000e+00) * x101, Ma[4], Mb[22]);
	Mb[33] = fmaf(float(3.00000000e+00) * x001, Ma[18], Mb[33]);
	Mb[22] = fmaf(float(3.00000000e+00) * x200, Ma[6], Mb[22]);
	Mb[33] = fmaf(float(3.00000000e+00) * x002, Ma[8], Mb[33]);
	Mb[22] = fmaf(float(3.00000000e+00) * x201, Ma[1], Mb[22]);
	Mb[33] = fmaf( x003, Ma[2], Mb[33]);
	Mb[22] = fmaf( x300, Ma[3], Mb[22]);
	Mb[33] = fmaf( x010, Ma[19], Mb[33]);
	Mb[22] = fmaf( x301, Ma[0], Mb[22]);
	Mb[33] = fmaf(float(3.00000000e+00) * x011, Ma[9], Mb[33]);
	Mb[23] = fmaf( x020, Ma[4], Mb[23]);
	Mb[33] = fmaf( x013, Ma[0], Mb[33]);
	Mb[23] = fmaf( x220, Ma[0], Mb[23]);
	Mb[34] = fmaf(float(4.00000000e+00) * x001, Ma[19], Mb[34]);
	Mb[23] = fmaf(float(2.00000000e+00) * x210, Ma[2], Mb[23]);
	Mb[34] = fmaf(float(6.00000000e+00) * x002, Ma[9], Mb[34]);
	Mb[23] = fmaf( x200, Ma[7], Mb[23]);
	Mb[34] = fmaf(float(4.00000000e+00) * x003, Ma[3], Mb[34]);
	Mb[23] = fmaf(float(2.00000000e+00) * x120, Ma[1], Mb[23]);
	Mb[34] = fmaf( x004, Ma[0], Mb[34]);
	Mb[23] = fmaf(float(4.00000000e+00) * x110, Ma[5], Mb[23]);
	return Mb;
/* FLOPS = 462*/
}

static __device__ char Ldest1[176] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};
static __device__ float factor1[176] = { 1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01};
static __device__ char xsrc1[176] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};
static __device__ char Lsrc1[176] = { 4,5,6,10,11,12,13,14,15,20,21,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,5,7,8,11,13,14,16,17,18,21,23,24,26,27,28,30,31,32,33,36,38,39,41,42,43,45,46,47,48,50,51,52,53,54,6,8,9,12,14,15,17,18,19,22,24,25,27,28,29,31,32,33,34,37,39,40,42,43,44,46,47,48,49,51,52,53,54,55,10,11,12,20,21,22,23,24,25,35,36,37,38,39,40,41,42,43,44,11,13,14,21,23,24,26,27,28,36,38,39,41,42,43,45,46,47,48,12,14,15,22,24,25,27,28,29,37,39,40,42,43,44,46,47,48,49,13,16,17,23,26,27,30,31,32,38,41,42,45,46,47,50,51};
static __device__ char Ldest2[175] = { 7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34};
static __device__ float factor2[175] = { 5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00};
static __device__ char xsrc2[175] = { 18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3};
static __device__ char Lsrc2[175] = { 52,53,14,17,18,24,27,28,31,32,33,39,42,43,46,47,48,51,52,53,54,15,18,19,25,28,29,32,33,34,40,43,44,47,48,49,52,53,54,55,20,21,22,35,36,37,38,39,40,21,23,24,36,38,39,41,42,43,22,24,25,37,39,40,42,43,44,23,26,27,38,41,42,45,46,47,24,27,28,39,42,43,46,47,48,25,28,29,40,43,44,47,48,49,26,30,31,41,45,46,50,51,52,27,31,32,42,46,47,51,52,53,28,32,33,43,47,48,52,53,54,29,33,34,44,48,49,53,54,55,35,36,37,36,38,39,37,39,40,38,41,42,39,42,43,40,43,44,41,45,46,42,46,47,43,47,48,44,48,49,45,50,51,46,51,52,47,52,53,48,53,54,49,54,55};
static __device__ float phi_factor[55] = { 1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,4.16666679e-02,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,2.50000000e-01,2.50000000e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,4.16666679e-02,4.16666679e-02,4.16666679e-02,8.33333377e-03};
static __device__ char phi_Lsrc[55] = { 3,9,19,34,55,2,8,18,33,54,7,17,32,53,16,31,52,30,51,50,1,6,15,29,49,5,14,28,48,13,27,47,26,46,45,4,12,25,44,11,24,43,23,42,41,10,22,40,21,39,38,20,37,36,35};

#ifdef __CUDACC__
__device__
inline array<float, 56> L2L_kernel(const array<float, 56>& La, const array<float, NDIM>& X, bool do_phi) {
	const int tid = threadIdx.x;
	array<float, 56> Lb;
	for( int i = 0; i < EXPANSION_SIZE; i++) {
		Lb[i] = 0.0f;
	}
	for( int i = tid; i < EXPANSION_SIZE; i += WARP_SIZE ) {
		Lb[i] = La[i];
	}
	array<float,56> dx;
	dx[0] = float(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	dx[55]= dx[19] * dx[9];
	dx[54]= dx[18] * dx[9];
	dx[53]= dx[17] * dx[9];
	dx[52]= dx[17] * dx[8];
	dx[51]= dx[17] * dx[7];
	dx[50]= dx[16] * dx[7];
	dx[49]= dx[15] * dx[9];
	dx[48]= dx[14] * dx[9];
	dx[47]= dx[14] * dx[8];
	dx[46]= dx[14] * dx[7];
	dx[45]= dx[13] * dx[7];
	dx[44]= dx[12] * dx[9];
	dx[43]= dx[14] * dx[6];
	dx[42]= dx[14] * dx[5];
	dx[41]= dx[11] * dx[7];
	dx[40]= dx[12] * dx[6];
	dx[39]= dx[14] * dx[4];
	dx[38]= dx[11] * dx[5];
	dx[37]= dx[12] * dx[4];
	dx[36]= dx[11] * dx[4];
	dx[35]= dx[10] * dx[4];
	for( int i = tid; i < 175; i+=WARP_SIZE) {
		Lb[Ldest1[i]] = fmaf(factor1[i] * dx[xsrc1[i]], La[Lsrc1[i]], Lb[Ldest1[i]]);
		Lb[Ldest2[i]] = fmaf(factor2[i] * dx[xsrc2[i]], La[Lsrc2[i]], Lb[Ldest2[i]]);
	}
	if( tid == 0 ) {
		Lb[Ldest1[175]] = fmaf(factor1[175] * dx[xsrc1[175]], La[Lsrc1[175]], Lb[Ldest1[175]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 55; i+=WARP_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], La[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < EXPANSION_SIZE; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
		}
	}
	return Lb;
/* FLOPS = 1456 + do_phi * 220*/
}
#endif

__device__
inline array<float, 4> L2P_kernel(const array<float, 56>& La, const array<float, NDIM>& X, bool do_phi) {
	array<float, 4> Lb;
//	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	const float x005 = x003 * x002;
	const float x014 = x012 * x002;
	const float x023 = x021 * x002;
	const float x032 = x021 * x011;
	const float x041 = x021 * x020;
	const float x050 = x030 * x020;
	const float x104 = x102 * x002;
	const float x113 = x111 * x002;
	const float x122 = x111 * x011;
	const float x131 = x111 * x020;
	const float x140 = x120 * x020;
	const float x203 = x201 * x002;
	const float x212 = x111 * x101;
	const float x221 = x111 * x110;
	const float x230 = x210 * x020;
	const float x302 = x201 * x101;
	const float x311 = x111 * x200;
	const float x320 = x210 * x110;
	const float x401 = x201 * x200;
	const float x410 = x210 * x200;
	const float x500 = x300 * x200;
	Lb[0] = La[0];
	Lb[1] = La[1];
	Lb[2] = La[2];
	Lb[3] = La[3];
	if( do_phi ) {
		Lb[0] = fmaf( x001, La[3], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x002, La[9], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x003, La[19], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x004, La[34], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x005, La[55], Lb[0]);
		Lb[0] = fmaf( x010, La[2], Lb[0]);
		Lb[0] = fmaf( x011, La[8], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x012, La[18], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x013, La[33], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x014, La[54], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x020, La[7], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x021, La[17], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x022, La[32], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x023, La[53], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x030, La[16], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x031, La[31], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x032, La[52], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x040, La[30], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x041, La[51], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x050, La[50], Lb[0]);
		Lb[0] = fmaf( x100, La[1], Lb[0]);
		Lb[0] = fmaf( x101, La[6], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x102, La[15], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x103, La[29], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x104, La[49], Lb[0]);
		Lb[0] = fmaf( x110, La[5], Lb[0]);
		Lb[0] = fmaf( x111, La[14], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x112, La[28], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x113, La[48], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x120, La[13], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x121, La[27], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x122, La[47], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x130, La[26], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x131, La[46], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x140, La[45], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x200, La[4], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x201, La[12], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x202, La[25], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x203, La[44], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x210, La[11], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x211, La[24], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x212, La[43], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x220, La[23], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x221, La[42], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x230, La[41], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x300, La[10], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x301, La[22], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x302, La[40], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x310, La[21], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x311, La[39], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x320, La[38], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x400, La[20], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x401, La[37], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x410, La[36], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x500, La[35], Lb[0]);
	}
	Lb[1] = fmaf( x100, La[4], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x012, La[32], Lb[2]);
	Lb[1] = fmaf( x010, La[5], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x003, La[33], Lb[2]);
	Lb[1] = fmaf( x001, La[6], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x400, La[36], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x200, La[10], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x310, La[38], Lb[2]);
	Lb[1] = fmaf( x110, La[11], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x301, La[39], Lb[2]);
	Lb[1] = fmaf( x101, La[12], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x220, La[41], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x020, La[13], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x211, La[42], Lb[2]);
	Lb[1] = fmaf( x011, La[14], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x202, La[43], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x002, La[15], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x130, La[45], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x300, La[20], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x121, La[46], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x210, La[21], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x112, La[47], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x201, La[22], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x103, La[48], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x120, La[23], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x040, La[50], Lb[2]);
	Lb[1] = fmaf( x111, La[24], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x031, La[51], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x102, La[25], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x022, La[52], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x030, La[26], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x013, La[53], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x021, La[27], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x004, La[54], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x012, La[28], Lb[1]);
	Lb[3] = fmaf( x100, La[6], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x003, La[29], Lb[1]);
	Lb[3] = fmaf( x010, La[8], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x400, La[35], Lb[1]);
	Lb[3] = fmaf( x001, La[9], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x310, La[36], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x200, La[12], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x301, La[37], Lb[1]);
	Lb[3] = fmaf( x110, La[14], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x220, La[38], Lb[1]);
	Lb[3] = fmaf( x101, La[15], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x211, La[39], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x020, La[17], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x202, La[40], Lb[1]);
	Lb[3] = fmaf( x011, La[18], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x130, La[41], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x002, La[19], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x121, La[42], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x300, La[22], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x112, La[43], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x210, La[24], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x103, La[44], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x201, La[25], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x040, La[45], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x120, La[27], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x031, La[46], Lb[1]);
	Lb[3] = fmaf( x111, La[28], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x022, La[47], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x102, La[29], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x013, La[48], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x030, La[31], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x004, La[49], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x021, La[32], Lb[3]);
	Lb[2] = fmaf( x100, La[5], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x012, La[33], Lb[3]);
	Lb[2] = fmaf( x010, La[7], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x003, La[34], Lb[3]);
	Lb[2] = fmaf( x001, La[8], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x400, La[37], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x200, La[11], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x310, La[39], Lb[3]);
	Lb[2] = fmaf( x110, La[13], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x301, La[40], Lb[3]);
	Lb[2] = fmaf( x101, La[14], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x220, La[42], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x020, La[16], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x211, La[43], Lb[3]);
	Lb[2] = fmaf( x011, La[17], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x202, La[44], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x002, La[18], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x130, La[46], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x300, La[21], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x121, La[47], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x210, La[23], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x112, La[48], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x201, La[24], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x103, La[49], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x120, La[26], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x040, La[51], Lb[3]);
	Lb[2] = fmaf( x111, La[27], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x031, La[52], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x102, La[28], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x022, La[53], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x030, La[30], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x013, La[54], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x021, La[31], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x004, La[55], Lb[3]);
	return Lb;
/* FLOPS = 495*/
}

