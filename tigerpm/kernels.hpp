#pragma once

#include <tigerpm/util.hpp>

#define WARP_SIZE 32
#define MULTIPOLE_SIZE 20
#define EXPANSION_SIZE 35

using expansion = array<float, EXPANSION_SIZE>;
using multipole = array<float, MULTIPOLE_SIZE>;

#ifdef __CUDACC__
__device__ inline void greens_function(array<float,35> &D, float dx, float dy, float dz, float inv2rs) {
	const float twooversqrtpi = 1.12837917e+00;
	const float r2 = sqr(dx, dy, dz);
	const float rinv = rsqrtf(r2);
	const float r = r2 * rinv;
	const float r0 = r * inv2rs;
	float exp0;
	const float erfc0 = erfcexp(r0, &exp0);
	const float c0 = -2.f * r * inv2rs * inv2rs;
	const float d0 = -erfc0 * rinv;
	float e0 = twooversqrtpi * exp0 * rinv * inv2rs;
	const float d1 = fmaf(float(-1) * d0, rinv, e0);
	e0 *= c0;
	const float d2 = fmaf(float(-3) * d1, rinv, e0);
	e0 *= c0;
	const float d3 = fmaf(float(-5) * d2, rinv, e0);
	e0 *= c0;
	const float d4 = fmaf(float(-7) * d3, rinv, e0);
	e0 *= c0;
	const float rinv0 = 1.f;
	const float rinv1 = rinv;
	const float rinv2 = rinv1 * rinv1;
	const float Drinvpow_0_0 = d0 * rinv0;
	const float Drinvpow_1_0 = d1 * rinv0;
	const float Drinvpow_1_1 = d1 * rinv1;
	const float Drinvpow_2_0 = d2 * rinv0;
	const float Drinvpow_2_1 = d2 * rinv1;
	const float Drinvpow_2_2 = d2 * rinv2;
	const float Drinvpow_3_0 = d3 * rinv0;
	const float Drinvpow_3_1 = d3 * rinv1;
	const float Drinvpow_4_0 = d4 * rinv0;
	array<float,NDIM> dxrinv;
	dxrinv[0] = dx * rinv;
	dxrinv[1] = dy * rinv;
	dxrinv[2] = dz * rinv;
	const float x000 = float(1);
	const float& x100 = dxrinv[0];
	const float& x010 = dxrinv[1];
	const float& x001 = dxrinv[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	float x_2_1_000 = x002;
	float x_3_1_001 = x003;
	float x_4_1_002 = x004;
	float x_3_1_010 = x012;
	float x_4_1_011 = x013;
	float x_4_1_020 = x022;
	float x_3_1_100 = x102;
	float x_4_1_101 = x103;
	float x_4_1_110 = x112;
	float x_4_1_200 = x202;
	float x_4_2_000 = x004;
	x_2_1_000 += x020;
	x_3_1_100 += x300;
	x_2_1_000 += x200;
	x_4_1_101 += x121;
	x_3_1_001 += x021;
	x_4_1_101 += x301;
	x_3_1_001 += x201;
	x_4_1_110 += x130;
	x_4_1_002 += x022;
	x_4_1_110 += x310;
	x_4_1_002 += x202;
	x_4_1_200 += x220;
	x_3_1_010 += x030;
	x_4_1_200 += x400;
	x_3_1_010 += x210;
	x_4_2_000 = fmaf(float(2.00000000e+00), x022, x_4_2_000);
	x_4_1_011 += x031;
	x_4_2_000 += x040;
	x_4_1_011 += x211;
	x_4_2_000 = fmaf(float(2.00000000e+00), x202, x_4_2_000);
	x_4_1_020 += x040;
	x_4_2_000 = fmaf(float(2.00000000e+00), x220, x_4_2_000);
	x_4_1_020 += x220;
	x_4_2_000 += x400;
	x_3_1_100 += x120;
	x_2_1_000 *= Drinvpow_1_1;
	x_3_1_001 *= Drinvpow_2_1;
	x_4_1_002 *= Drinvpow_3_1;
	x_3_1_010 *= Drinvpow_2_1;
	x_4_1_011 *= Drinvpow_3_1;
	x_4_1_020 *= Drinvpow_3_1;
	x_3_1_100 *= Drinvpow_2_1;
	x_4_1_101 *= Drinvpow_3_1;
	x_4_1_110 *= Drinvpow_3_1;
	x_4_1_200 *= Drinvpow_3_1;
	x_4_2_000 *= Drinvpow_2_2;
	D[26] = fmaf(x130, Drinvpow_4_0, D[26]);
	D[2] = fmaf(x010, Drinvpow_1_0, D[2]);
	D[25] += x_4_1_002;
	D[17] = fmaf(x021, Drinvpow_3_0, D[17]);
	D[25] += x_4_1_200;
	D[7] += x_2_1_000;
	D[25] = fmaf(x202, Drinvpow_4_0, D[25]);
	D[7] = fmaf(x020, Drinvpow_2_0, D[7]);
	D[12] += x_3_1_001;
	D[33] = fmaf(float(3.00000000e+00), x_4_1_011, D[33]);
	D[12] = fmaf(x201, Drinvpow_3_0, D[12]);
	D[33] = fmaf(x013, Drinvpow_4_0, D[33]);
	D[4] += x_2_1_000;
	D[18] += x_3_1_010;
	D[4] = fmaf(x200, Drinvpow_2_0, D[4]);
	D[18] = fmaf(x012, Drinvpow_3_0, D[18]);
	D[26] = fmaf(float(3.00000000e+00), x_4_1_110, D[26]);
	D[8] = fmaf(x011, Drinvpow_2_0, D[8]);
	D[25] += x_4_2_000;
	D[17] += x_3_1_001;
	D[27] += x_4_1_101;
	D[34] = fmaf(float(3.00000000e+00), x_4_2_000, D[34]);
	D[27] = fmaf(x121, Drinvpow_4_0, D[27]);
	D[34] = fmaf(float(6.00000000e+00), x_4_1_002, D[34]);
	D[13] += x_3_1_100;
	D[34] = fmaf(x004, Drinvpow_4_0, D[34]);
	D[13] = fmaf(x120, Drinvpow_3_0, D[13]);
	D[19] = fmaf(float(3.00000000e+00), x_3_1_001, D[19]);
	D[28] += x_4_1_110;
	D[19] = fmaf(x003, Drinvpow_3_0, D[19]);
	D[28] = fmaf(x112, Drinvpow_4_0, D[28]);
	D[9] += x_2_1_000;
	D[14] = fmaf(x111, Drinvpow_3_0, D[14]);
	D[9] = fmaf(x002, Drinvpow_2_0, D[9]);
	D[5] = fmaf(x110, Drinvpow_2_0, D[5]);
	D[3] = fmaf(x001, Drinvpow_1_0, D[3]);
	D[10] = fmaf(x300, Drinvpow_3_0, D[10]);
	D[31] = fmaf(float(3.00000000e+00), x_4_1_011, D[31]);
	D[20] = fmaf(float(3.00000000e+00), x_4_2_000, D[20]);
	D[29] = fmaf(x103, Drinvpow_4_0, D[29]);
	D[20] = fmaf(float(6.00000000e+00), x_4_1_200, D[20]);
	D[15] += x_3_1_100;
	D[20] = fmaf(x400, Drinvpow_4_0, D[20]);
	D[15] = fmaf(x102, Drinvpow_3_0, D[15]);
	D[21] = fmaf(float(3.00000000e+00), x_4_1_110, D[21]);
	D[6] = fmaf(x101, Drinvpow_2_0, D[6]);
	D[21] = fmaf(x310, Drinvpow_4_0, D[21]);
	D[1] = fmaf(x100, Drinvpow_1_0, D[1]);
	D[22] = fmaf(float(3.00000000e+00), x_4_1_101, D[22]);
	D[30] = fmaf(float(3.00000000e+00), x_4_2_000, D[30]);
	D[22] = fmaf(x301, Drinvpow_4_0, D[22]);
	D[30] = fmaf(float(6.00000000e+00), x_4_1_020, D[30]);
	D[10] = fmaf(float(3.00000000e+00), x_3_1_100, D[10]);
	D[30] = fmaf(x040, Drinvpow_4_0, D[30]);
	D[29] = fmaf(float(3.00000000e+00), x_4_1_101, D[29]);
	D[0] = fmaf(x000, Drinvpow_0_0, D[0]);
	D[23] += x_4_2_000;
	D[31] = fmaf(x031, Drinvpow_4_0, D[31]);
	D[23] += x_4_1_020;
	D[16] = fmaf(float(3.00000000e+00), x_3_1_010, D[16]);
	D[23] += x_4_1_200;
	D[16] = fmaf(x030, Drinvpow_3_0, D[16]);
	D[23] = fmaf(x220, Drinvpow_4_0, D[23]);
	D[32] += x_4_2_000;
	D[24] += x_4_1_011;
	D[32] += x_4_1_002;
	D[24] = fmaf(x211, Drinvpow_4_0, D[24]);
	D[32] += x_4_1_020;
	D[11] += x_3_1_010;
	D[32] = fmaf(x022, Drinvpow_4_0, D[32]);
	D[11] = fmaf(x210, Drinvpow_3_0, D[11]);
}

#endif
__device__
inline int M2L_kernel(array<float, 4>& L, const array<float, 20>& M, const array<float, 35>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
	}
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	return 156 + do_phi * 52;
}

__device__
inline int M2L_kernel(array<float, 35>& L, const array<float, 20>& M, const array<float, 35>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
	}
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[6] = fmaf(M[5], D[24], L[6]);
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[6] = fmaf(M[6], D[25], L[6]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[7] = fmaf(float(5.00000000e-01) * M[9], D[32], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[7] = fmaf(float(5.00000000e-01) * M[4], D[23], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[7] = fmaf(M[5], D[26], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[7] = fmaf(M[6], D[27], L[7]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[7] = fmaf(M[1], D[13], L[7]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[7] = fmaf(float(5.00000000e-01) * M[7], D[30], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[7] = fmaf(M[8], D[31], L[7]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[7] = fmaf(M[2], D[16], L[7]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[7] = fmaf(M[3], D[17], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[7] = fmaf(M[0], D[7], L[7]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[8] = fmaf(M[6], D[28], L[8]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[8] = fmaf(M[5], D[27], L[8]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[8] = fmaf(float(5.00000000e-01) * M[4], D[24], L[8]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[8] = fmaf(M[3], D[18], L[8]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[8] = fmaf(M[0], D[8], L[8]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[8] = fmaf(M[1], D[14], L[8]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[8] = fmaf(float(5.00000000e-01) * M[7], D[31], L[8]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[8] = fmaf(M[8], D[32], L[8]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[8] = fmaf(M[2], D[17], L[8]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[8] = fmaf(float(5.00000000e-01) * M[9], D[33], L[8]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[9] = fmaf(M[1], D[15], L[9]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[9] = fmaf(M[8], D[33], L[9]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[9] = fmaf(float(5.00000000e-01) * M[7], D[32], L[9]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[9] = fmaf(M[5], D[28], L[9]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[9] = fmaf(M[6], D[29], L[9]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[9] = fmaf(float(5.00000000e-01) * M[4], D[25], L[9]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[9] = fmaf(M[2], D[18], L[9]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[9] = fmaf(float(5.00000000e-01) * M[9], D[34], L[9]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[9] = fmaf(M[3], D[19], L[9]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[9] = fmaf(M[0], D[9], L[9]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	L[10] = fmaf(M[0], D[10], L[10]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[10] = fmaf(M[3], D[22], L[10]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[10] = fmaf(M[2], D[21], L[10]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[10] = fmaf(M[1], D[20], L[10]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[11] = fmaf(M[2], D[23], L[11]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[11] = fmaf(M[3], D[24], L[11]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[11] = fmaf(M[1], D[21], L[11]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[11] = fmaf(M[0], D[11], L[11]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[12] = fmaf(M[3], D[25], L[12]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[12] = fmaf(M[1], D[22], L[12]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[12] = fmaf(M[2], D[24], L[12]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[12] = fmaf(M[0], D[12], L[12]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[13] = fmaf(M[0], D[13], L[13]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[13] = fmaf(M[3], D[27], L[13]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	L[13] = fmaf(M[2], D[26], L[13]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[13] = fmaf(M[1], D[23], L[13]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[14] = fmaf(M[0], D[14], L[14]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[14] = fmaf(M[3], D[28], L[14]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[14] = fmaf(M[2], D[27], L[14]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[14] = fmaf(M[1], D[24], L[14]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[15] = fmaf(M[1], D[25], L[15]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[15] = fmaf(M[2], D[28], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[15] = fmaf(M[3], D[29], L[15]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[15] = fmaf(M[0], D[15], L[15]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[16] = fmaf(M[2], D[30], L[16]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[16] = fmaf(M[1], D[26], L[16]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[16] = fmaf(M[3], D[31], L[16]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[16] = fmaf(M[0], D[16], L[16]);
	L[4] = fmaf(float(5.00000000e-01) * M[9], D[25], L[4]);
	L[17] = fmaf(M[1], D[27], L[17]);
	L[4] = fmaf(float(5.00000000e-01) * M[4], D[20], L[4]);
	L[17] = fmaf(M[2], D[31], L[17]);
	L[4] = fmaf(M[5], D[21], L[4]);
	L[17] = fmaf(M[3], D[32], L[17]);
	L[4] = fmaf(M[6], D[22], L[4]);
	L[17] = fmaf(M[0], D[17], L[17]);
	L[4] = fmaf(M[1], D[10], L[4]);
	L[18] = fmaf(M[0], D[18], L[18]);
	L[4] = fmaf(float(5.00000000e-01) * M[7], D[23], L[4]);
	L[18] = fmaf(M[3], D[33], L[18]);
	L[4] = fmaf(M[8], D[24], L[4]);
	L[18] = fmaf(M[2], D[32], L[18]);
	L[4] = fmaf(M[2], D[11], L[4]);
	L[18] = fmaf(M[1], D[28], L[18]);
	L[4] = fmaf(M[0], D[4], L[4]);
	L[19] = fmaf(M[0], D[19], L[19]);
	L[4] = fmaf(M[3], D[12], L[4]);
	L[19] = fmaf(M[3], D[34], L[19]);
	L[5] = fmaf(float(5.00000000e-01) * M[4], D[21], L[5]);
	L[19] = fmaf(M[2], D[33], L[19]);
	L[5] = fmaf(M[0], D[5], L[5]);
	L[19] = fmaf(M[1], D[29], L[19]);
	L[5] = fmaf(M[3], D[14], L[5]);
	L[20] = fmaf(M[0], D[20], L[20]);
	L[5] = fmaf(float(5.00000000e-01) * M[9], D[28], L[5]);
	L[21] = fmaf(M[0], D[21], L[21]);
	L[5] = fmaf(M[2], D[13], L[5]);
	L[22] = fmaf(M[0], D[22], L[22]);
	L[5] = fmaf(M[8], D[27], L[5]);
	L[23] = fmaf(M[0], D[23], L[23]);
	L[5] = fmaf(float(5.00000000e-01) * M[7], D[26], L[5]);
	L[24] = fmaf(M[0], D[24], L[24]);
	L[5] = fmaf(M[1], D[11], L[5]);
	L[25] = fmaf(M[0], D[25], L[25]);
	L[5] = fmaf(M[6], D[24], L[5]);
	L[26] = fmaf(M[0], D[26], L[26]);
	L[5] = fmaf(M[5], D[23], L[5]);
	L[27] = fmaf(M[0], D[27], L[27]);
	L[6] = fmaf(M[1], D[12], L[6]);
	L[28] = fmaf(M[0], D[28], L[28]);
	L[6] = fmaf(float(5.00000000e-01) * M[7], D[27], L[6]);
	L[29] = fmaf(M[0], D[29], L[29]);
	L[6] = fmaf(M[8], D[28], L[6]);
	L[30] = fmaf(M[0], D[30], L[30]);
	L[6] = fmaf(M[2], D[14], L[6]);
	L[31] = fmaf(M[0], D[31], L[31]);
	L[6] = fmaf(float(5.00000000e-01) * M[9], D[29], L[6]);
	L[32] = fmaf(M[0], D[32], L[32]);
	L[6] = fmaf(M[3], D[15], L[6]);
	L[33] = fmaf(M[0], D[33], L[33]);
	L[6] = fmaf(M[0], D[6], L[6]);
	L[34] = fmaf(M[0], D[34], L[34]);
	L[6] = fmaf(float(5.00000000e-01) * M[4], D[22], L[6]);
	return 404 + do_phi * 52;
}

inline array<float, 20> P2M_kernel(array<float, NDIM>& X) {
	array<float, 20> M;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	M[0] = float(1);
	M[1] = X[0];
	M[2] = X[1];
	M[3] = X[2];
	M[9] = M[3] * M[3];
	M[8] = M[2] * M[3];
	M[7] = M[2] * M[2];
	M[6] = M[1] * M[3];
	M[5] = M[1] * M[2];
	M[4] = M[1] * M[1];
	M[19] = M[9] * M[3];
	M[18] = M[8] * M[3];
	M[17] = M[8] * M[2];
	M[16] = M[7] * M[2];
	M[15] = M[6] * M[3];
	M[14] = M[5] * M[3];
	M[13] = M[5] * M[2];
	M[12] = M[6] * M[1];
	M[11] = M[5] * M[1];
	M[10] = M[4] * M[1];
	return M;
/* FLOPS = 19*/
}

inline array<float, 20> M2M_kernel(const array<float,20>& Ma, array<float, NDIM>& X) {
	array<float, 20> Mb;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	Mb[0] = Ma[0];
	Mb[1] = Ma[1];
	Mb[2] = Ma[2];
	Mb[3] = Ma[3];
	Mb[4] = Ma[4];
	Mb[5] = Ma[5];
	Mb[6] = Ma[6];
	Mb[7] = Ma[7];
	Mb[8] = Ma[8];
	Mb[9] = Ma[9];
	Mb[10] = Ma[10];
	Mb[11] = Ma[11];
	Mb[12] = Ma[12];
	Mb[13] = Ma[13];
	Mb[14] = Ma[14];
	Mb[15] = Ma[15];
	Mb[16] = Ma[16];
	Mb[17] = Ma[17];
	Mb[18] = Ma[18];
	Mb[19] = Ma[19];
	Mb[1] = fmaf( x100, Ma[0], Mb[1]);
	Mb[13] = fmaf( x020, Ma[1], Mb[13]);
	Mb[2] = fmaf( x010, Ma[0], Mb[2]);
	Mb[13] = fmaf( x100, Ma[7], Mb[13]);
	Mb[3] = fmaf( x001, Ma[0], Mb[3]);
	Mb[13] = fmaf(float(2.00000000e+00) * x110, Ma[2], Mb[13]);
	Mb[4] = fmaf(float(2.00000000e+00) * x100, Ma[1], Mb[4]);
	Mb[13] = fmaf( x120, Ma[0], Mb[13]);
	Mb[4] = fmaf( x200, Ma[0], Mb[4]);
	Mb[14] = fmaf( x001, Ma[5], Mb[14]);
	Mb[5] = fmaf( x010, Ma[1], Mb[5]);
	Mb[14] = fmaf( x010, Ma[6], Mb[14]);
	Mb[5] = fmaf( x100, Ma[2], Mb[5]);
	Mb[14] = fmaf( x011, Ma[1], Mb[14]);
	Mb[5] = fmaf( x110, Ma[0], Mb[5]);
	Mb[14] = fmaf( x100, Ma[8], Mb[14]);
	Mb[6] = fmaf( x101, Ma[0], Mb[6]);
	Mb[14] = fmaf( x110, Ma[3], Mb[14]);
	Mb[6] = fmaf( x001, Ma[1], Mb[6]);
	Mb[14] = fmaf( x101, Ma[2], Mb[14]);
	Mb[6] = fmaf( x100, Ma[3], Mb[6]);
	Mb[14] = fmaf( x111, Ma[0], Mb[14]);
	Mb[7] = fmaf(float(2.00000000e+00) * x010, Ma[2], Mb[7]);
	Mb[15] = fmaf(float(2.00000000e+00) * x001, Ma[6], Mb[15]);
	Mb[7] = fmaf( x020, Ma[0], Mb[7]);
	Mb[15] = fmaf( x002, Ma[1], Mb[15]);
	Mb[8] = fmaf( x001, Ma[2], Mb[8]);
	Mb[15] = fmaf( x100, Ma[9], Mb[15]);
	Mb[8] = fmaf( x010, Ma[3], Mb[8]);
	Mb[15] = fmaf(float(2.00000000e+00) * x101, Ma[3], Mb[15]);
	Mb[8] = fmaf( x011, Ma[0], Mb[8]);
	Mb[15] = fmaf( x102, Ma[0], Mb[15]);
	Mb[9] = fmaf(float(2.00000000e+00) * x001, Ma[3], Mb[9]);
	Mb[16] = fmaf(float(3.00000000e+00) * x010, Ma[7], Mb[16]);
	Mb[9] = fmaf( x002, Ma[0], Mb[9]);
	Mb[16] = fmaf(float(3.00000000e+00) * x020, Ma[2], Mb[16]);
	Mb[10] = fmaf(float(3.00000000e+00) * x100, Ma[4], Mb[10]);
	Mb[16] = fmaf( x030, Ma[0], Mb[16]);
	Mb[10] = fmaf(float(3.00000000e+00) * x200, Ma[1], Mb[10]);
	Mb[17] = fmaf( x001, Ma[7], Mb[17]);
	Mb[10] = fmaf( x300, Ma[0], Mb[10]);
	Mb[17] = fmaf(float(2.00000000e+00) * x010, Ma[8], Mb[17]);
	Mb[11] = fmaf( x010, Ma[4], Mb[11]);
	Mb[17] = fmaf(float(2.00000000e+00) * x011, Ma[2], Mb[17]);
	Mb[11] = fmaf( x210, Ma[0], Mb[11]);
	Mb[17] = fmaf( x020, Ma[3], Mb[17]);
	Mb[11] = fmaf( x200, Ma[2], Mb[11]);
	Mb[17] = fmaf( x021, Ma[0], Mb[17]);
	Mb[11] = fmaf(float(2.00000000e+00) * x100, Ma[5], Mb[11]);
	Mb[18] = fmaf(float(2.00000000e+00) * x011, Ma[3], Mb[18]);
	Mb[11] = fmaf(float(2.00000000e+00) * x110, Ma[1], Mb[11]);
	Mb[18] = fmaf(float(2.00000000e+00) * x001, Ma[8], Mb[18]);
	Mb[12] = fmaf( x001, Ma[4], Mb[12]);
	Mb[18] = fmaf( x002, Ma[2], Mb[18]);
	Mb[12] = fmaf(float(2.00000000e+00) * x100, Ma[6], Mb[12]);
	Mb[18] = fmaf( x010, Ma[9], Mb[18]);
	Mb[12] = fmaf(float(2.00000000e+00) * x101, Ma[1], Mb[12]);
	Mb[18] = fmaf( x012, Ma[0], Mb[18]);
	Mb[12] = fmaf( x200, Ma[3], Mb[12]);
	Mb[19] = fmaf(float(3.00000000e+00) * x001, Ma[9], Mb[19]);
	Mb[12] = fmaf( x201, Ma[0], Mb[12]);
	Mb[19] = fmaf(float(3.00000000e+00) * x002, Ma[3], Mb[19]);
	Mb[13] = fmaf(float(2.00000000e+00) * x010, Ma[5], Mb[13]);
	Mb[19] = fmaf( x003, Ma[0], Mb[19]);
	return Mb;
/* FLOPS = 165*/
}

static __device__ char Ldest1[71] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5};
static __device__ float factor1[71] = { 1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00};
static __device__ char xsrc1[71] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5};
static __device__ char Lsrc1[71] = { 4,5,6,10,11,12,13,14,15,20,21,22,23,24,25,26,27,28,29,5,7,8,11,13,14,16,17,18,21,23,24,26,27,28,30,31,32,33,6,8,9,12,14,15,17,18,19,22,24,25,27,28,29,31,32,33,34,10,11,12,20,21,22,23,24,25,11,13,14,21,23};
static __device__ char Ldest2[70] = { 5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19};
static __device__ float factor2[70] = { 1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00};
static __device__ char xsrc2[70] = { 6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3};
static __device__ char Lsrc2[70] = { 24,26,27,28,12,14,15,22,24,25,27,28,29,13,16,17,23,26,27,30,31,32,14,17,18,24,27,28,31,32,33,15,18,19,25,28,29,32,33,34,20,21,22,21,23,24,22,24,25,23,26,27,24,27,28,25,28,29,26,30,31,27,31,32,28,32,33,29,33,34};
static __device__ float phi_factor[34] = { 1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,5.00000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,1.66666672e-01,1.66666672e-01,4.16666679e-02};
static __device__ char phi_Lsrc[34] = { 3,9,19,34,2,8,18,33,7,17,32,16,31,30,1,6,15,29,5,14,28,13,27,26,4,12,25,11,24,23,10,22,21,20};

#ifdef __CUDACC__
__device__
inline array<float, 35> L2L_kernel(const array<float, 35>& La, const array<float, NDIM>& X, bool do_phi) {
	const int tid = threadIdx.x;
	array<float, 35> Lb;
	for( int i = 0; i < EXPANSION_SIZE; i++) {
		Lb[i] = 0.0f;
	}
	for( int i = tid; i < EXPANSION_SIZE; i += WARP_SIZE ) {
		Lb[i] = La[i];
	}
	array<float,35> dx;
	dx[0] = float(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	for( int i = tid; i < 70; i+=WARP_SIZE) {
		Lb[Ldest1[i]] = fmaf(factor1[i] * dx[xsrc1[i]], La[Lsrc1[i]], Lb[Ldest1[i]]);
		Lb[Ldest2[i]] = fmaf(factor2[i] * dx[xsrc2[i]], La[Lsrc2[i]], Lb[Ldest2[i]]);
	}
	if( tid == 0 ) {
		Lb[Ldest1[70]] = fmaf(factor1[70] * dx[xsrc1[70]], La[Lsrc1[70]], Lb[Ldest1[70]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 34; i+=WARP_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], La[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < EXPANSION_SIZE; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
		}
	}
	return Lb;
/* FLOPS = 595 + do_phi * 136*/
}
#endif

__device__
inline array<float, 4> L2P_kernel(const array<float, 35>& La, const array<float, NDIM>& X, bool do_phi) {
	array<float, 4> Lb;
//	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	Lb[0] = La[0];
	Lb[1] = La[1];
	Lb[2] = La[2];
	Lb[3] = La[3];
	if( do_phi ) {
		Lb[0] = fmaf( x001, La[3], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x002, La[9], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x003, La[19], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x004, La[34], Lb[0]);
		Lb[0] = fmaf( x010, La[2], Lb[0]);
		Lb[0] = fmaf( x011, La[8], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x012, La[18], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x013, La[33], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x020, La[7], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x021, La[17], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x022, La[32], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x030, La[16], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x031, La[31], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x040, La[30], Lb[0]);
		Lb[0] = fmaf( x100, La[1], Lb[0]);
		Lb[0] = fmaf( x101, La[6], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x102, La[15], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x103, La[29], Lb[0]);
		Lb[0] = fmaf( x110, La[5], Lb[0]);
		Lb[0] = fmaf( x111, La[14], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x112, La[28], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x120, La[13], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x121, La[27], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x130, La[26], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x200, La[4], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x201, La[12], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x202, La[25], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x210, La[11], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x211, La[24], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x220, La[23], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x300, La[10], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x301, La[22], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x310, La[21], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x400, La[20], Lb[0]);
	}
	Lb[1] = fmaf( x100, La[4], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x210, La[23], Lb[2]);
	Lb[1] = fmaf( x010, La[5], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x201, La[24], Lb[2]);
	Lb[1] = fmaf( x001, La[6], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x120, La[26], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x200, La[10], Lb[1]);
	Lb[2] = fmaf( x111, La[27], Lb[2]);
	Lb[1] = fmaf( x110, La[11], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x102, La[28], Lb[2]);
	Lb[1] = fmaf( x101, La[12], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x030, La[30], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x020, La[13], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x021, La[31], Lb[2]);
	Lb[1] = fmaf( x011, La[14], Lb[1]);
	Lb[2] = fmaf(float(5.00000000e-01) * x012, La[32], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x002, La[15], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x003, La[33], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x300, La[20], Lb[1]);
	Lb[3] = fmaf( x100, La[6], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x210, La[21], Lb[1]);
	Lb[3] = fmaf( x010, La[8], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x201, La[22], Lb[1]);
	Lb[3] = fmaf( x001, La[9], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x120, La[23], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x200, La[12], Lb[3]);
	Lb[1] = fmaf( x111, La[24], Lb[1]);
	Lb[3] = fmaf( x110, La[14], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x102, La[25], Lb[1]);
	Lb[3] = fmaf( x101, La[15], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x030, La[26], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x020, La[17], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x021, La[27], Lb[1]);
	Lb[3] = fmaf( x011, La[18], Lb[3]);
	Lb[1] = fmaf(float(5.00000000e-01) * x012, La[28], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x002, La[19], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x003, La[29], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x300, La[22], Lb[3]);
	Lb[2] = fmaf( x100, La[5], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x210, La[24], Lb[3]);
	Lb[2] = fmaf( x010, La[7], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x201, La[25], Lb[3]);
	Lb[2] = fmaf( x001, La[8], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x120, La[27], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x200, La[11], Lb[2]);
	Lb[3] = fmaf( x111, La[28], Lb[3]);
	Lb[2] = fmaf( x110, La[13], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x102, La[29], Lb[3]);
	Lb[2] = fmaf( x101, La[14], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x030, La[31], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x020, La[16], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x021, La[32], Lb[3]);
	Lb[2] = fmaf( x011, La[17], Lb[2]);
	Lb[3] = fmaf(float(5.00000000e-01) * x012, La[33], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x002, La[18], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x003, La[34], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x300, La[21], Lb[2]);
	return Lb;
/* FLOPS = 276*/
}

