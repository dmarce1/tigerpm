#pragma once

#include <tigerpm/util.hpp>

#define WARP_SIZE 32
#define MULTIPOLE_SIZE 56
#define EXPANSION_SIZE 84

using expansion = array<float, EXPANSION_SIZE>;
using multipole = array<float, MULTIPOLE_SIZE>;

#ifdef __CUDACC__
__device__ inline void greens_function(array<float,84> &D, float dx, float dy, float dz, float inv2rs) {
	const float twooversqrtpi = 1.12837917e+00;
	const float r2 = sqr(dx, dy, dz);
	const float rinv = rsqrtf(r2);
	const float r = r2 * rinv;
	const float r0 = r * inv2rs;
	float exp0;
	const float erfc0 = erfcexp(r0, &exp0);
	const float r02 = r0 * r0;
	const float c0 = -2.f * r * inv2rs * inv2rs;
	const float d0 = -erfc0 * rinv;
	float e0 = twooversqrtpi * exp0 * rinv * inv2rs;
	const float d1 = fmaf(float(-1) * d0, rinv, e0);
	e0 *= c0;
	const float d2 = fmaf(float(-3) * d1, rinv, e0);
	e0 *= c0;
	const float d3 = fmaf(float(-5) * d2, rinv, e0);
	e0 *= c0;
	const float d4 = fmaf(float(-7) * d3, rinv, e0);
	e0 *= c0;
	const float d5 = fmaf(float(-9) * d4, rinv, e0);
	e0 *= c0;
	const float d6 = fmaf(float(-11) * d5, rinv, e0);
	e0 *= c0;
	const float rinv0 = 1.f;
	const float rinv1 = rinv;
	const float rinv2 = rinv1 * rinv1;
	const float rinv3 = rinv1 * rinv2;
	const float Drinvpow_0_0 = d0 * rinv0;
	const float Drinvpow_1_0 = d1 * rinv0;
	const float Drinvpow_1_1 = d1 * rinv1;
	const float Drinvpow_2_0 = d2 * rinv0;
	const float Drinvpow_2_1 = d2 * rinv1;
	const float Drinvpow_2_2 = d2 * rinv2;
	const float Drinvpow_3_0 = d3 * rinv0;
	const float Drinvpow_3_1 = d3 * rinv1;
	const float Drinvpow_3_2 = d3 * rinv2;
	const float Drinvpow_3_3 = d3 * rinv3;
	const float Drinvpow_4_0 = d4 * rinv0;
	const float Drinvpow_4_1 = d4 * rinv1;
	const float Drinvpow_4_2 = d4 * rinv2;
	const float Drinvpow_5_0 = d5 * rinv0;
	const float Drinvpow_5_1 = d5 * rinv1;
	const float Drinvpow_6_0 = d6 * rinv0;
	array<float,NDIM> dxrinv;
	dxrinv[0] = dx * rinv;
	dxrinv[1] = dy * rinv;
	dxrinv[2] = dz * rinv;
	const float x000 = float(1);
	const float& x100 = dxrinv[0];
	const float& x010 = dxrinv[1];
	const float& x001 = dxrinv[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	const float x005 = x003 * x002;
	const float x014 = x012 * x002;
	const float x023 = x021 * x002;
	const float x032 = x021 * x011;
	const float x041 = x021 * x020;
	const float x050 = x030 * x020;
	const float x104 = x102 * x002;
	const float x113 = x111 * x002;
	const float x122 = x111 * x011;
	const float x131 = x111 * x020;
	const float x140 = x120 * x020;
	const float x203 = x201 * x002;
	const float x212 = x111 * x101;
	const float x221 = x111 * x110;
	const float x230 = x210 * x020;
	const float x302 = x201 * x101;
	const float x311 = x111 * x200;
	const float x320 = x210 * x110;
	const float x401 = x201 * x200;
	const float x410 = x210 * x200;
	const float x500 = x300 * x200;
	const float x006 = x003 * x003;
	const float x015 = x012 * x003;
	const float x024 = x021 * x003;
	const float x033 = x021 * x012;
	const float x042 = x021 * x021;
	const float x051 = x021 * x030;
	const float x060 = x030 * x030;
	const float x105 = x102 * x003;
	const float x114 = x111 * x003;
	const float x123 = x111 * x012;
	const float x132 = x111 * x021;
	const float x141 = x111 * x030;
	const float x150 = x120 * x030;
	const float x204 = x201 * x003;
	const float x213 = x111 * x102;
	const float x222 = x111 * x111;
	const float x231 = x111 * x120;
	const float x240 = x210 * x030;
	const float x303 = x201 * x102;
	const float x312 = x111 * x201;
	const float x321 = x111 * x210;
	const float x330 = x210 * x120;
	const float x402 = x201 * x201;
	const float x411 = x111 * x300;
	const float x420 = x210 * x210;
	const float x501 = x201 * x300;
	const float x510 = x210 * x300;
	const float x600 = x300 * x300;
	float x_2_1_000 = x002;
	float x_3_1_001 = x003;
	float x_4_1_002 = x004;
	float x_5_1_003 = x005;
	float x_6_1_004 = x006;
	float x_3_1_010 = x012;
	float x_4_1_011 = x013;
	float x_5_1_012 = x014;
	float x_6_1_013 = x015;
	float x_4_1_020 = x022;
	float x_5_1_021 = x023;
	float x_6_1_022 = x024;
	float x_5_1_030 = x032;
	float x_6_1_031 = x033;
	float x_6_1_040 = x042;
	float x_3_1_100 = x102;
	float x_4_1_101 = x103;
	float x_5_1_102 = x104;
	float x_6_1_103 = x105;
	float x_4_1_110 = x112;
	float x_5_1_111 = x113;
	float x_6_1_112 = x114;
	float x_5_1_120 = x122;
	float x_6_1_121 = x123;
	float x_6_1_130 = x132;
	float x_4_1_200 = x202;
	float x_5_1_201 = x203;
	float x_6_1_202 = x204;
	float x_5_1_210 = x212;
	float x_6_1_211 = x213;
	float x_6_1_220 = x222;
	float x_5_1_300 = x302;
	float x_6_1_301 = x303;
	float x_6_1_310 = x312;
	float x_6_1_400 = x402;
	float x_4_2_000 = x004;
	float x_5_2_001 = x005;
	float x_6_2_002 = x006;
	float x_5_2_010 = x014;
	float x_6_2_011 = x015;
	float x_6_2_020 = x024;
	float x_5_2_100 = x104;
	float x_6_2_101 = x105;
	float x_6_2_110 = x114;
	float x_6_2_200 = x204;
	float x_6_3_000 = x006;
	x_2_1_000 += x020;
	x_6_1_301 += x501;
	x_2_1_000 += x200;
	x_6_1_310 += x330;
	x_3_1_001 += x021;
	x_6_1_310 += x510;
	x_3_1_001 += x201;
	x_6_1_400 += x420;
	x_4_1_002 += x022;
	x_6_1_400 += x600;
	x_4_1_002 += x202;
	x_4_2_000 = fmaf(float(2.00000000e+00), x022, x_4_2_000);
	x_5_1_003 += x023;
	x_4_2_000 += x040;
	x_5_1_003 += x203;
	x_4_2_000 = fmaf(float(2.00000000e+00), x202, x_4_2_000);
	x_6_1_004 += x024;
	x_4_2_000 = fmaf(float(2.00000000e+00), x220, x_4_2_000);
	x_6_1_004 += x204;
	x_4_2_000 += x400;
	x_3_1_010 += x030;
	x_5_2_001 = fmaf(float(2.00000000e+00), x023, x_5_2_001);
	x_3_1_010 += x210;
	x_5_2_001 += x041;
	x_4_1_011 += x031;
	x_5_2_001 = fmaf(float(2.00000000e+00), x203, x_5_2_001);
	x_4_1_011 += x211;
	x_5_2_001 = fmaf(float(2.00000000e+00), x221, x_5_2_001);
	x_5_1_012 += x032;
	x_5_2_001 += x401;
	x_5_1_012 += x212;
	x_6_2_002 = fmaf(float(2.00000000e+00), x024, x_6_2_002);
	x_6_1_013 += x033;
	x_6_2_002 += x042;
	x_6_1_013 += x213;
	x_6_2_002 = fmaf(float(2.00000000e+00), x204, x_6_2_002);
	x_4_1_020 += x040;
	x_6_2_002 = fmaf(float(2.00000000e+00), x222, x_6_2_002);
	x_4_1_020 += x220;
	x_6_2_002 += x402;
	x_5_1_021 += x041;
	x_5_2_010 = fmaf(float(2.00000000e+00), x032, x_5_2_010);
	x_5_1_021 += x221;
	x_5_2_010 += x050;
	x_6_1_022 += x042;
	x_5_2_010 = fmaf(float(2.00000000e+00), x212, x_5_2_010);
	x_6_1_022 += x222;
	x_5_2_010 = fmaf(float(2.00000000e+00), x230, x_5_2_010);
	x_5_1_030 += x050;
	x_5_2_010 += x410;
	x_5_1_030 += x230;
	x_6_2_011 = fmaf(float(2.00000000e+00), x033, x_6_2_011);
	x_6_1_031 += x051;
	x_6_2_011 += x051;
	x_6_1_031 += x231;
	x_6_2_011 = fmaf(float(2.00000000e+00), x213, x_6_2_011);
	x_6_1_040 += x060;
	x_6_2_011 = fmaf(float(2.00000000e+00), x231, x_6_2_011);
	x_6_1_040 += x240;
	x_6_2_011 += x411;
	x_3_1_100 += x120;
	x_6_2_020 = fmaf(float(2.00000000e+00), x042, x_6_2_020);
	x_3_1_100 += x300;
	x_6_2_020 += x060;
	x_4_1_101 += x121;
	x_6_2_020 = fmaf(float(2.00000000e+00), x222, x_6_2_020);
	x_4_1_101 += x301;
	x_6_2_020 = fmaf(float(2.00000000e+00), x240, x_6_2_020);
	x_5_1_102 += x122;
	x_6_2_020 += x420;
	x_5_1_102 += x302;
	x_5_2_100 = fmaf(float(2.00000000e+00), x122, x_5_2_100);
	x_6_1_103 += x123;
	x_5_2_100 += x140;
	x_6_1_103 += x303;
	x_5_2_100 = fmaf(float(2.00000000e+00), x302, x_5_2_100);
	x_4_1_110 += x130;
	x_5_2_100 = fmaf(float(2.00000000e+00), x320, x_5_2_100);
	x_4_1_110 += x310;
	x_5_2_100 += x500;
	x_5_1_111 += x131;
	x_6_2_101 = fmaf(float(2.00000000e+00), x123, x_6_2_101);
	x_5_1_111 += x311;
	x_6_2_101 += x141;
	x_6_1_112 += x132;
	x_6_2_101 = fmaf(float(2.00000000e+00), x303, x_6_2_101);
	x_6_1_112 += x312;
	x_6_2_101 = fmaf(float(2.00000000e+00), x321, x_6_2_101);
	x_5_1_120 += x140;
	x_6_2_101 += x501;
	x_5_1_120 += x320;
	x_6_2_110 = fmaf(float(2.00000000e+00), x132, x_6_2_110);
	x_6_1_121 += x141;
	x_6_2_110 += x150;
	x_6_1_121 += x321;
	x_6_2_110 = fmaf(float(2.00000000e+00), x312, x_6_2_110);
	x_6_1_130 += x150;
	x_6_2_110 = fmaf(float(2.00000000e+00), x330, x_6_2_110);
	x_6_1_130 += x330;
	x_6_2_110 += x510;
	x_4_1_200 += x220;
	x_6_2_200 = fmaf(float(2.00000000e+00), x222, x_6_2_200);
	x_4_1_200 += x400;
	x_6_2_200 += x240;
	x_5_1_201 += x221;
	x_6_2_200 = fmaf(float(2.00000000e+00), x402, x_6_2_200);
	x_5_1_201 += x401;
	x_6_2_200 = fmaf(float(2.00000000e+00), x420, x_6_2_200);
	x_6_1_202 += x222;
	x_6_2_200 += x600;
	x_6_1_202 += x402;
	x_6_3_000 = fmaf(float(3.00000000e+00), x024, x_6_3_000);
	x_5_1_210 += x230;
	x_6_3_000 = fmaf(float(3.00000000e+00), x042, x_6_3_000);
	x_5_1_210 += x410;
	x_6_3_000 += x060;
	x_6_1_211 += x231;
	x_6_3_000 = fmaf(float(3.00000000e+00), x204, x_6_3_000);
	x_6_1_211 += x411;
	x_6_3_000 = fmaf(float(6.00000000e+00), x222, x_6_3_000);
	x_6_1_220 += x240;
	x_6_3_000 = fmaf(float(3.00000000e+00), x240, x_6_3_000);
	x_6_1_220 += x420;
	x_6_3_000 = fmaf(float(3.00000000e+00), x402, x_6_3_000);
	x_5_1_300 += x320;
	x_6_3_000 = fmaf(float(3.00000000e+00), x420, x_6_3_000);
	x_5_1_300 += x500;
	x_6_3_000 += x600;
	x_6_1_301 += x321;
	x_2_1_000 *= Drinvpow_1_1;
	x_3_1_001 *= Drinvpow_2_1;
	x_4_1_002 *= Drinvpow_3_1;
	x_5_1_003 *= Drinvpow_4_1;
	x_6_1_004 *= Drinvpow_5_1;
	x_3_1_010 *= Drinvpow_2_1;
	x_4_1_011 *= Drinvpow_3_1;
	x_5_1_012 *= Drinvpow_4_1;
	x_6_1_013 *= Drinvpow_5_1;
	x_4_1_020 *= Drinvpow_3_1;
	x_5_1_021 *= Drinvpow_4_1;
	x_6_1_022 *= Drinvpow_5_1;
	x_5_1_030 *= Drinvpow_4_1;
	x_6_1_031 *= Drinvpow_5_1;
	x_6_1_040 *= Drinvpow_5_1;
	x_3_1_100 *= Drinvpow_2_1;
	x_4_1_101 *= Drinvpow_3_1;
	x_5_1_102 *= Drinvpow_4_1;
	x_6_1_103 *= Drinvpow_5_1;
	x_4_1_110 *= Drinvpow_3_1;
	x_5_1_111 *= Drinvpow_4_1;
	x_6_1_112 *= Drinvpow_5_1;
	x_5_1_120 *= Drinvpow_4_1;
	x_6_1_121 *= Drinvpow_5_1;
	x_6_1_130 *= Drinvpow_5_1;
	x_4_1_200 *= Drinvpow_3_1;
	x_5_1_201 *= Drinvpow_4_1;
	x_6_1_202 *= Drinvpow_5_1;
	x_5_1_210 *= Drinvpow_4_1;
	x_6_1_211 *= Drinvpow_5_1;
	x_6_1_220 *= Drinvpow_5_1;
	x_5_1_300 *= Drinvpow_4_1;
	x_6_1_301 *= Drinvpow_5_1;
	x_6_1_310 *= Drinvpow_5_1;
	x_6_1_400 *= Drinvpow_5_1;
	x_4_2_000 *= Drinvpow_2_2;
	x_5_2_001 *= Drinvpow_3_2;
	x_6_2_002 *= Drinvpow_4_2;
	x_5_2_010 *= Drinvpow_3_2;
	x_6_2_011 *= Drinvpow_4_2;
	x_6_2_020 *= Drinvpow_4_2;
	x_5_2_100 *= Drinvpow_3_2;
	x_6_2_101 *= Drinvpow_4_2;
	x_6_2_110 *= Drinvpow_4_2;
	x_6_2_200 *= Drinvpow_4_2;
	x_6_3_000 *= Drinvpow_3_3;
	D[68] += x_6_1_220;
	D[81] = fmaf(x024, Drinvpow_6_0, D[81]);
	D[41] = fmaf(float(3.00000000e+00), x_5_1_210, D[41]);
	D[31] = fmaf(x031, Drinvpow_4_0, D[31]);
	D[41] = fmaf(x230, Drinvpow_5_0, D[41]);
	D[16] = fmaf(float(3.00000000e+00), x_3_1_010, D[16]);
	D[68] += x_6_3_000;
	D[16] = fmaf(x030, Drinvpow_3_0, D[16]);
	D[68] += x_6_2_002;
	D[81] = fmaf(float(3.00000000e+00), x_6_3_000, D[81]);
	D[68] += x_6_2_020;
	D[81] = fmaf(float(6.00000000e+00), x_6_2_002, D[81]);
	D[68] += x_6_1_022;
	D[81] += x_6_1_004;
	D[68] += x_6_2_200;
	D[81] = fmaf(float(3.00000000e+00), x_6_2_020, D[81]);
	D[68] += x_6_1_202;
	D[81] = fmaf(float(6.00000000e+00), x_6_1_022, D[81]);
	D[41] += x_5_1_030;
	D[31] = fmaf(float(3.00000000e+00), x_4_1_011, D[31]);
	D[68] = fmaf(x222, Drinvpow_6_0, D[68]);
	D[53] = fmaf(float(3.00000000e+00), x_5_2_001, D[53]);
	D[42] += x_5_2_001;
	D[53] += x_5_1_003;
	D[42] += x_5_1_021;
	D[53] = fmaf(float(3.00000000e+00), x_5_1_021, D[53]);
	D[42] += x_5_1_201;
	D[53] = fmaf(x023, Drinvpow_5_0, D[53]);
	D[42] = fmaf(x221, Drinvpow_5_0, D[42]);
	D[32] += x_4_2_000;
	D[23] += x_4_2_000;
	D[32] += x_4_1_002;
	D[23] += x_4_1_020;
	D[32] += x_4_1_020;
	D[23] += x_4_1_200;
	D[32] = fmaf(x022, Drinvpow_4_0, D[32]);
	D[41] = fmaf(float(3.00000000e+00), x_5_2_010, D[41]);
	D[52] = fmaf(x032, Drinvpow_5_0, D[52]);
	D[67] = fmaf(x231, Drinvpow_6_0, D[67]);
	D[52] += x_5_1_030;
	D[67] = fmaf(float(3.00000000e+00), x_6_1_211, D[67]);
	D[52] = fmaf(float(3.00000000e+00), x_5_1_012, D[52]);
	D[67] += x_6_1_031;
	D[52] = fmaf(float(3.00000000e+00), x_5_2_010, D[52]);
	D[67] = fmaf(float(3.00000000e+00), x_6_2_011, D[67]);
	D[80] = fmaf(x033, Drinvpow_6_0, D[80]);
	D[66] = fmaf(x240, Drinvpow_6_0, D[66]);
	D[80] = fmaf(float(3.00000000e+00), x_6_1_031, D[80]);
	D[66] = fmaf(float(6.00000000e+00), x_6_1_220, D[66]);
	D[80] = fmaf(float(3.00000000e+00), x_6_1_013, D[80]);
	D[66] = fmaf(float(3.00000000e+00), x_6_2_200, D[66]);
	D[80] = fmaf(float(9.00000000e+00), x_6_2_011, D[80]);
	D[66] += x_6_1_040;
	D[30] = fmaf(x040, Drinvpow_4_0, D[30]);
	D[66] = fmaf(float(6.00000000e+00), x_6_2_020, D[66]);
	D[30] = fmaf(float(6.00000000e+00), x_4_1_020, D[30]);
	D[66] = fmaf(float(3.00000000e+00), x_6_3_000, D[66]);
	D[30] = fmaf(float(3.00000000e+00), x_4_2_000, D[30]);
	D[10] = fmaf(x300, Drinvpow_3_0, D[10]);
	D[51] = fmaf(x041, Drinvpow_5_0, D[51]);
	D[10] = fmaf(float(3.00000000e+00), x_3_1_100, D[10]);
	D[51] = fmaf(float(6.00000000e+00), x_5_1_021, D[51]);
	D[22] = fmaf(x301, Drinvpow_4_0, D[22]);
	D[51] = fmaf(float(3.00000000e+00), x_5_2_001, D[51]);
	D[22] = fmaf(float(3.00000000e+00), x_4_1_101, D[22]);
	D[79] = fmaf(x042, Drinvpow_6_0, D[79]);
	D[70] += x_6_1_004;
	D[2] = fmaf(x010, Drinvpow_1_0, D[2]);
	D[4] = fmaf(x200, Drinvpow_2_0, D[4]);
	D[3] = fmaf(x001, Drinvpow_1_0, D[3]);
	D[4] += x_2_1_000;
	D[9] = fmaf(x002, Drinvpow_2_0, D[9]);
	D[12] = fmaf(x201, Drinvpow_3_0, D[12]);
	D[9] += x_2_1_000;
	D[12] += x_3_1_001;
	D[19] = fmaf(x003, Drinvpow_3_0, D[19]);
	D[25] = fmaf(x202, Drinvpow_4_0, D[25]);
	D[19] = fmaf(float(3.00000000e+00), x_3_1_001, D[19]);
	D[25] += x_4_1_200;
	D[34] = fmaf(x004, Drinvpow_4_0, D[34]);
	D[25] += x_4_1_002;
	D[34] = fmaf(float(6.00000000e+00), x_4_1_002, D[34]);
	D[25] += x_4_2_000;
	D[34] = fmaf(float(3.00000000e+00), x_4_2_000, D[34]);
	D[44] = fmaf(x203, Drinvpow_5_0, D[44]);
	D[55] = fmaf(x005, Drinvpow_5_0, D[55]);
	D[44] = fmaf(float(3.00000000e+00), x_5_1_201, D[44]);
	D[55] = fmaf(float(1.00000000e+01), x_5_1_003, D[55]);
	D[44] += x_5_1_003;
	D[55] = fmaf(float(1.50000000e+01), x_5_2_001, D[55]);
	D[44] = fmaf(float(3.00000000e+00), x_5_2_001, D[44]);
	D[83] = fmaf(x006, Drinvpow_6_0, D[83]);
	D[70] = fmaf(x204, Drinvpow_6_0, D[70]);
	D[83] = fmaf(float(1.50000000e+01), x_6_1_004, D[83]);
	D[70] = fmaf(float(6.00000000e+00), x_6_1_202, D[70]);
	D[83] = fmaf(float(4.50000000e+01), x_6_2_002, D[83]);
	D[70] = fmaf(float(3.00000000e+00), x_6_2_200, D[70]);
	D[83] = fmaf(float(1.50000000e+01), x_6_3_000, D[83]);
	D[40] = fmaf(x302, Drinvpow_5_0, D[40]);
	D[79] += x_6_1_040;
	D[70] = fmaf(float(6.00000000e+00), x_6_2_002, D[70]);
	D[8] = fmaf(x011, Drinvpow_2_0, D[8]);
	D[70] = fmaf(float(3.00000000e+00), x_6_3_000, D[70]);
	D[18] = fmaf(x012, Drinvpow_3_0, D[18]);
	D[11] = fmaf(x210, Drinvpow_3_0, D[11]);
	D[18] += x_3_1_010;
	D[11] += x_3_1_010;
	D[33] = fmaf(x013, Drinvpow_4_0, D[33]);
	D[24] = fmaf(x211, Drinvpow_4_0, D[24]);
	D[33] = fmaf(float(3.00000000e+00), x_4_1_011, D[33]);
	D[24] += x_4_1_011;
	D[54] = fmaf(x014, Drinvpow_5_0, D[54]);
	D[43] = fmaf(x212, Drinvpow_5_0, D[43]);
	D[54] = fmaf(float(6.00000000e+00), x_5_1_012, D[54]);
	D[43] += x_5_1_210;
	D[54] = fmaf(float(3.00000000e+00), x_5_2_010, D[54]);
	D[43] += x_5_1_012;
	D[82] = fmaf(x015, Drinvpow_6_0, D[82]);
	D[43] += x_5_2_010;
	D[82] = fmaf(float(1.00000000e+01), x_6_1_013, D[82]);
	D[69] = fmaf(x213, Drinvpow_6_0, D[69]);
	D[82] = fmaf(float(1.50000000e+01), x_6_2_011, D[82]);
	D[69] = fmaf(float(3.00000000e+00), x_6_1_211, D[69]);
	D[7] = fmaf(x020, Drinvpow_2_0, D[7]);
	D[69] += x_6_1_013;
	D[7] += x_2_1_000;
	D[69] = fmaf(float(3.00000000e+00), x_6_2_011, D[69]);
	D[17] = fmaf(x021, Drinvpow_3_0, D[17]);
	D[23] = fmaf(x220, Drinvpow_4_0, D[23]);
	D[17] += x_3_1_001;
	D[36] = fmaf(x410, Drinvpow_5_0, D[36]);
	D[26] = fmaf(x130, Drinvpow_4_0, D[26]);
	D[59] = fmaf(float(6.00000000e+00), x_6_1_220, D[59]);
	D[75] = fmaf(x114, Drinvpow_6_0, D[75]);
	D[59] += x_6_1_400;
	D[75] = fmaf(float(6.00000000e+00), x_6_1_112, D[75]);
	D[59] = fmaf(x420, Drinvpow_6_0, D[59]);
	D[75] = fmaf(float(3.00000000e+00), x_6_2_110, D[75]);
	D[60] = fmaf(float(3.00000000e+00), x_6_2_011, D[60]);
	D[13] = fmaf(x120, Drinvpow_3_0, D[13]);
	D[60] = fmaf(float(6.00000000e+00), x_6_1_211, D[60]);
	D[13] += x_3_1_100;
	D[60] = fmaf(x411, Drinvpow_6_0, D[60]);
	D[27] = fmaf(x121, Drinvpow_4_0, D[27]);
	D[36] = fmaf(float(3.00000000e+00), x_5_2_010, D[36]);
	D[27] += x_4_1_101;
	D[36] = fmaf(float(6.00000000e+00), x_5_1_210, D[36]);
	D[47] = fmaf(x122, Drinvpow_5_0, D[47]);
	D[59] = fmaf(float(6.00000000e+00), x_6_2_200, D[59]);
	D[47] += x_5_1_120;
	D[61] = fmaf(float(3.00000000e+00), x_6_3_000, D[61]);
	D[47] += x_5_1_102;
	D[61] = fmaf(float(3.00000000e+00), x_6_2_002, D[61]);
	D[47] += x_5_2_100;
	D[61] = fmaf(float(6.00000000e+00), x_6_2_200, D[61]);
	D[74] = fmaf(x123, Drinvpow_6_0, D[74]);
	D[61] = fmaf(float(6.00000000e+00), x_6_1_202, D[61]);
	D[74] = fmaf(float(3.00000000e+00), x_6_1_121, D[74]);
	D[61] += x_6_1_400;
	D[74] += x_6_1_103;
	D[61] = fmaf(x402, Drinvpow_6_0, D[61]);
	D[74] = fmaf(float(3.00000000e+00), x_6_2_101, D[74]);
	D[37] = fmaf(float(3.00000000e+00), x_5_2_001, D[37]);
	D[48] = fmaf(float(3.00000000e+00), x_5_1_111, D[48]);
	D[37] = fmaf(float(6.00000000e+00), x_5_1_201, D[37]);
	D[26] = fmaf(float(3.00000000e+00), x_4_1_110, D[26]);
	D[59] = fmaf(float(3.00000000e+00), x_6_2_020, D[59]);
	D[46] = fmaf(x131, Drinvpow_5_0, D[46]);
	D[59] = fmaf(float(3.00000000e+00), x_6_3_000, D[59]);
	D[46] = fmaf(float(3.00000000e+00), x_5_1_111, D[46]);
	D[35] = fmaf(x500, Drinvpow_5_0, D[35]);
	D[73] = fmaf(x132, Drinvpow_6_0, D[73]);
	D[35] = fmaf(float(1.00000000e+01), x_5_1_300, D[35]);
	D[73] += x_6_1_130;
	D[35] = fmaf(float(1.50000000e+01), x_5_2_100, D[35]);
	D[73] = fmaf(float(3.00000000e+00), x_6_1_112, D[73]);
	D[58] = fmaf(x501, Drinvpow_6_0, D[58]);
	D[73] = fmaf(float(3.00000000e+00), x_6_2_110, D[73]);
	D[58] = fmaf(float(1.00000000e+01), x_6_1_301, D[58]);
	D[45] = fmaf(x140, Drinvpow_5_0, D[45]);
	D[58] = fmaf(float(1.50000000e+01), x_6_2_101, D[58]);
	D[45] = fmaf(float(6.00000000e+00), x_5_1_120, D[45]);
	D[57] = fmaf(x510, Drinvpow_6_0, D[57]);
	D[45] = fmaf(float(3.00000000e+00), x_5_2_100, D[45]);
	D[57] = fmaf(float(1.00000000e+01), x_6_1_310, D[57]);
	D[72] = fmaf(x141, Drinvpow_6_0, D[72]);
	D[57] = fmaf(float(1.50000000e+01), x_6_2_110, D[57]);
	D[72] = fmaf(float(6.00000000e+00), x_6_1_121, D[72]);
	D[56] = fmaf(x600, Drinvpow_6_0, D[56]);
	D[72] = fmaf(float(3.00000000e+00), x_6_2_101, D[72]);
	D[56] = fmaf(float(1.50000000e+01), x_6_1_400, D[56]);
	D[71] = fmaf(x150, Drinvpow_6_0, D[71]);
	D[56] = fmaf(float(4.50000000e+01), x_6_2_200, D[56]);
	D[71] = fmaf(float(1.00000000e+01), x_6_1_130, D[71]);
	D[56] = fmaf(float(1.50000000e+01), x_6_3_000, D[56]);
	D[6] = fmaf(x101, Drinvpow_2_0, D[6]);
	D[38] = fmaf(x320, Drinvpow_5_0, D[38]);
	D[79] = fmaf(float(6.00000000e+00), x_6_1_022, D[79]);
	D[40] += x_5_1_300;
	D[79] = fmaf(float(6.00000000e+00), x_6_2_020, D[79]);
	D[40] = fmaf(float(3.00000000e+00), x_5_1_102, D[40]);
	D[79] = fmaf(float(3.00000000e+00), x_6_2_002, D[79]);
	D[40] = fmaf(float(3.00000000e+00), x_5_2_100, D[40]);
	D[79] = fmaf(float(3.00000000e+00), x_6_3_000, D[79]);
	D[65] = fmaf(x303, Drinvpow_6_0, D[65]);
	D[50] = fmaf(x050, Drinvpow_5_0, D[50]);
	D[65] = fmaf(float(3.00000000e+00), x_6_1_301, D[65]);
	D[50] = fmaf(float(1.00000000e+01), x_5_1_030, D[50]);
	D[65] = fmaf(float(3.00000000e+00), x_6_1_103, D[65]);
	D[50] = fmaf(float(1.50000000e+01), x_5_2_010, D[50]);
	D[65] = fmaf(float(9.00000000e+00), x_6_2_101, D[65]);
	D[78] = fmaf(x051, Drinvpow_6_0, D[78]);
	D[21] = fmaf(x310, Drinvpow_4_0, D[21]);
	D[78] = fmaf(float(1.00000000e+01), x_6_1_031, D[78]);
	D[21] = fmaf(float(3.00000000e+00), x_4_1_110, D[21]);
	D[78] = fmaf(float(1.50000000e+01), x_6_2_011, D[78]);
	D[39] = fmaf(x311, Drinvpow_5_0, D[39]);
	D[77] = fmaf(x060, Drinvpow_6_0, D[77]);
	D[39] = fmaf(float(3.00000000e+00), x_5_1_111, D[39]);
	D[77] = fmaf(float(1.50000000e+01), x_6_1_040, D[77]);
	D[64] = fmaf(x312, Drinvpow_6_0, D[64]);
	D[77] = fmaf(float(4.50000000e+01), x_6_2_020, D[77]);
	D[64] += x_6_1_310;
	D[77] = fmaf(float(1.50000000e+01), x_6_3_000, D[77]);
	D[64] = fmaf(float(3.00000000e+00), x_6_1_112, D[64]);
	D[1] = fmaf(x100, Drinvpow_1_0, D[1]);
	D[64] = fmaf(float(3.00000000e+00), x_6_2_110, D[64]);
	D[0] = fmaf(x000, Drinvpow_0_0, D[0]);
	D[71] = fmaf(float(1.50000000e+01), x_6_2_110, D[71]);
	D[15] = fmaf(x102, Drinvpow_3_0, D[15]);
	D[38] += x_5_1_300;
	D[15] += x_3_1_100;
	D[38] = fmaf(float(3.00000000e+00), x_5_1_120, D[38]);
	D[29] = fmaf(x103, Drinvpow_4_0, D[29]);
	D[38] = fmaf(float(3.00000000e+00), x_5_2_100, D[38]);
	D[29] = fmaf(float(3.00000000e+00), x_4_1_101, D[29]);
	D[63] = fmaf(x321, Drinvpow_6_0, D[63]);
	D[49] = fmaf(x104, Drinvpow_5_0, D[49]);
	D[63] += x_6_1_301;
	D[49] = fmaf(float(6.00000000e+00), x_5_1_102, D[49]);
	D[63] = fmaf(float(3.00000000e+00), x_6_1_121, D[63]);
	D[49] = fmaf(float(3.00000000e+00), x_5_2_100, D[49]);
	D[63] = fmaf(float(3.00000000e+00), x_6_2_101, D[63]);
	D[76] = fmaf(x105, Drinvpow_6_0, D[76]);
	D[62] = fmaf(x330, Drinvpow_6_0, D[62]);
	D[76] = fmaf(float(1.00000000e+01), x_6_1_103, D[76]);
	D[62] = fmaf(float(3.00000000e+00), x_6_1_310, D[62]);
	D[76] = fmaf(float(1.50000000e+01), x_6_2_101, D[76]);
	D[62] = fmaf(float(3.00000000e+00), x_6_1_130, D[62]);
	D[5] = fmaf(x110, Drinvpow_2_0, D[5]);
	D[62] = fmaf(float(9.00000000e+00), x_6_2_110, D[62]);
	D[14] = fmaf(x111, Drinvpow_3_0, D[14]);
	D[20] = fmaf(x400, Drinvpow_4_0, D[20]);
	D[28] = fmaf(x112, Drinvpow_4_0, D[28]);
	D[20] = fmaf(float(6.00000000e+00), x_4_1_200, D[20]);
	D[28] += x_4_1_110;
	D[20] = fmaf(float(3.00000000e+00), x_4_2_000, D[20]);
	D[48] = fmaf(x113, Drinvpow_5_0, D[48]);
	D[37] = fmaf(x401, Drinvpow_5_0, D[37]);
}

#endif
__device__
inline int M2L_kernel(array<float, 4>& L, const array<float, 56>& M, const array<float, 84>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[34], D[34], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[55], D[55], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[33], D[33], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[54], D[54], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[32], D[32], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[53], D[53], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[31], D[31], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[52], D[52], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[30], D[30], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[51], D[51], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[50], D[50], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[29], D[29], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[49], D[49], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[28], D[28], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[48], D[48], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[27], D[27], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[47], D[47], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[26], D[26], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[46], D[46], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[45], D[45], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[25], D[25], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[44], D[44], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[24], D[24], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[43], D[43], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[23], D[23], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[42], D[42], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[41], D[41], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[22], D[22], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[40], D[40], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[21], D[21], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[39], D[39], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[38], D[38], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[20], D[20], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[37], D[37], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[36], D[36], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[35], D[35], L[0]);
	}
	L[1] = fmaf(float(2.50000000e-01) * M[32], D[47], L[1]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[49], D[70], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[29], D[44], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[34], D[54], L[2]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[2] = fmaf(float(8.33333333e-03) * M[55], D[82], L[2]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[1] = fmaf(float(8.33333333e-03) * M[50], D[71], L[1]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[51], D[72], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[30], D[45], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[33], D[53], L[2]);
	L[1] = fmaf(float(8.33333333e-02) * M[52], D[73], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[54], D[81], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[31], D[46], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[1] = fmaf(float(8.33333333e-02) * M[53], D[74], L[1]);
	L[2] = fmaf(float(2.50000000e-01) * M[32], D[52], L[2]);
	L[1] = fmaf(float(8.33333333e-03) * M[35], D[56], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[2] = fmaf(float(8.33333333e-02) * M[53], D[80], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[54], D[75], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[49], D[75], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[33], D[48], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[29], D[48], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[2] = fmaf(float(8.33333333e-03) * M[50], D[77], L[2]);
	L[1] = fmaf(float(8.33333333e-03) * M[55], D[76], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[51], D[78], L[2]);
	L[1] = fmaf(float(4.16666667e-02) * M[34], D[49], L[1]);
	L[2] = fmaf(float(4.16666667e-02) * M[30], D[50], L[2]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[2] = fmaf(float(8.33333333e-02) * M[52], D[79], L[2]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[2] = fmaf(float(1.66666667e-01) * M[31], D[51], L[2]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[3] = fmaf(float(8.33333333e-02) * M[53], D[81], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[48], D[69], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[28], D[43], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[31], D[52], L[3]);
	L[1] = fmaf(float(4.16666667e-02) * M[36], D[57], L[1]);
	L[3] = fmaf(float(8.33333333e-02) * M[52], D[80], L[3]);
	L[1] = fmaf(float(4.16666667e-02) * M[37], D[58], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[30], D[51], L[3]);
	L[1] = fmaf(float(4.16666667e-02) * M[20], D[35], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[51], D[79], L[3]);
	L[1] = fmaf(float(8.33333333e-02) * M[38], D[59], L[1]);
	L[3] = fmaf(float(8.33333333e-03) * M[50], D[78], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[39], D[60], L[1]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[21], D[36], L[1]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[1] = fmaf(float(8.33333333e-02) * M[40], D[61], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[22], D[37], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[29], D[49], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[49], D[76], L[3]);
	L[1] = fmaf(float(8.33333333e-02) * M[41], D[62], L[1]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[42], D[63], L[1]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[23], D[38], L[1]);
	L[3] = fmaf(float(2.50000000e-01) * M[32], D[53], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[24], D[39], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[43], D[64], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[54], D[82], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[27], D[42], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[33], D[54], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[47], D[68], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[26], D[41], L[1]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[1] = fmaf(float(1.66666667e-01) * M[46], D[67], L[1]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[1] = fmaf(float(4.16666667e-02) * M[45], D[66], L[1]);
	L[3] = fmaf(float(8.33333333e-03) * M[55], D[83], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[3] = fmaf(float(4.16666667e-02) * M[34], D[55], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[1] = fmaf(float(2.50000000e-01) * M[25], D[40], L[1]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[1] = fmaf(float(8.33333333e-02) * M[44], D[65], L[1]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[43], D[68], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[43], D[69], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[24], D[42], L[2]);
	L[3] = fmaf(float(8.33333333e-03) * M[35], D[58], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[3] = fmaf(float(4.16666667e-02) * M[36], D[60], L[3]);
	L[2] = fmaf(float(8.33333333e-02) * M[44], D[69], L[2]);
	L[3] = fmaf(float(4.16666667e-02) * M[37], D[61], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[25], D[43], L[2]);
	L[3] = fmaf(float(4.16666667e-02) * M[20], D[37], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[3] = fmaf(float(8.33333333e-02) * M[38], D[63], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[39], D[64], L[3]);
	L[2] = fmaf(float(4.16666667e-02) * M[45], D[71], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[21], D[39], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[46], D[72], L[2]);
	L[3] = fmaf(float(8.33333333e-02) * M[40], D[65], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[26], D[45], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[22], D[40], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[47], D[73], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[27], D[46], L[2]);
	L[3] = fmaf(float(8.33333333e-02) * M[41], D[67], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[42], D[68], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[48], D[74], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[23], D[42], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[23], D[41], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[28], D[48], L[3]);
	L[2] = fmaf(float(2.50000000e-01) * M[42], D[67], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[24], D[43], L[3]);
	L[2] = fmaf(float(8.33333333e-02) * M[41], D[66], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[3] = fmaf(float(8.33333333e-02) * M[44], D[70], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[22], D[39], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[25], D[44], L[3]);
	L[2] = fmaf(float(8.33333333e-02) * M[40], D[64], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[21], D[38], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[2] = fmaf(float(1.66666667e-01) * M[39], D[63], L[2]);
	L[3] = fmaf(float(4.16666667e-02) * M[45], D[72], L[3]);
	L[2] = fmaf(float(8.33333333e-02) * M[38], D[62], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[46], D[73], L[3]);
	L[2] = fmaf(float(4.16666667e-02) * M[20], D[36], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[26], D[46], L[3]);
	L[2] = fmaf(float(4.16666667e-02) * M[37], D[60], L[2]);
	L[3] = fmaf(float(2.50000000e-01) * M[47], D[74], L[3]);
	L[2] = fmaf(float(4.16666667e-02) * M[36], D[59], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[27], D[47], L[3]);
	L[2] = fmaf(float(8.33333333e-03) * M[35], D[57], L[2]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[2] = fmaf(float(5.00000000e-01) * M[28], D[47], L[2]);
	L[3] = fmaf(float(1.66666667e-01) * M[48], D[75], L[3]);
	return 480 + do_phi * 160;
}

__device__
inline int M2L_kernel(array<float, 84>& L, const array<float, 56>& M, const array<float, 84>& D, bool do_phi) {
	if( do_phi ) {
		L[0] = fmaf(M[0], D[0], L[0]);
		L[0] = fmaf(M[3], D[3], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[9], D[9], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[19], D[19], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[34], D[34], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[55], D[55], L[0]);
		L[0] = fmaf(M[2], D[2], L[0]);
		L[0] = fmaf(M[8], D[8], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[18], D[18], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[33], D[33], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[54], D[54], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[7], D[7], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[17], D[17], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[32], D[32], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[53], D[53], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[16], D[16], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[31], D[31], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[52], D[52], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[30], D[30], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[51], D[51], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[50], D[50], L[0]);
		L[0] = fmaf(M[1], D[1], L[0]);
		L[0] = fmaf(M[6], D[6], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[15], D[15], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[29], D[29], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[49], D[49], L[0]);
		L[0] = fmaf(M[5], D[5], L[0]);
		L[0] = fmaf(M[14], D[14], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[28], D[28], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[48], D[48], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[13], D[13], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[27], D[27], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[47], D[47], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[26], D[26], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[46], D[46], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[45], D[45], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[4], D[4], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[12], D[12], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[25], D[25], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[44], D[44], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[11], D[11], L[0]);
		L[0] = fmaf(float(5.00000000e-01) * M[24], D[24], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[43], D[43], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[23], D[23], L[0]);
		L[0] = fmaf(float(2.50000000e-01) * M[42], D[42], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[41], D[41], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[10], D[10], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[22], D[22], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[40], D[40], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[21], D[21], L[0]);
		L[0] = fmaf(float(1.66666667e-01) * M[39], D[39], L[0]);
		L[0] = fmaf(float(8.33333333e-02) * M[38], D[38], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[20], D[20], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[37], D[37], L[0]);
		L[0] = fmaf(float(4.16666667e-02) * M[36], D[36], L[0]);
		L[0] = fmaf(float(8.33333333e-03) * M[35], D[35], L[0]);
	}
	L[1] = fmaf(float(2.50000000e-01) * M[32], D[47], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[11], D[60], L[12]);
	L[1] = fmaf(M[14], D[24], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[12], D[61], L[12]);
	L[1] = fmaf(M[5], D[11], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[4], D[37], L[12]);
	L[1] = fmaf(float(4.16666667e-02) * M[49], D[70], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[13], D[63], L[12]);
	L[1] = fmaf(float(1.66666667e-01) * M[29], D[44], L[1]);
	L[12] = fmaf(M[14], D[64], L[12]);
	L[1] = fmaf(float(5.00000000e-01) * M[15], D[25], L[1]);
	L[12] = fmaf(M[0], D[12], L[12]);
	L[1] = fmaf(M[6], D[12], L[1]);
	L[12] = fmaf(M[3], D[25], L[12]);
	L[1] = fmaf(M[1], D[4], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[9], D[44], L[12]);
	L[1] = fmaf(float(8.33333333e-03) * M[50], D[71], L[1]);
	L[12] = fmaf(float(1.66666667e-01) * M[19], D[70], L[12]);
	L[1] = fmaf(float(4.16666667e-02) * M[51], D[72], L[1]);
	L[12] = fmaf(M[8], D[43], L[12]);
	L[1] = fmaf(float(4.16666667e-02) * M[30], D[45], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[15], D[65], L[12]);
	L[1] = fmaf(float(8.33333333e-02) * M[52], D[73], L[1]);
	L[12] = fmaf(M[6], D[40], L[12]);
	L[1] = fmaf(float(1.66666667e-01) * M[31], D[46], L[1]);
	L[12] = fmaf(M[1], D[22], L[12]);
	L[1] = fmaf(float(1.66666667e-01) * M[16], D[26], L[1]);
	L[12] = fmaf(float(1.66666667e-01) * M[16], D[67], L[12]);
	L[1] = fmaf(float(8.33333333e-02) * M[53], D[74], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[17], D[68], L[12]);
	L[1] = fmaf(float(8.33333333e-03) * M[35], D[56], L[1]);
	L[12] = fmaf(M[2], D[24], L[12]);
	L[1] = fmaf(float(5.00000000e-01) * M[17], D[27], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[18], D[69], L[12]);
	L[1] = fmaf(float(5.00000000e-01) * M[7], D[13], L[1]);
	L[12] = fmaf(float(5.00000000e-01) * M[7], D[42], L[12]);
	L[1] = fmaf(float(4.16666667e-02) * M[54], D[75], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[4], D[38], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[33], D[48], L[1]);
	L[13] = fmaf(float(1.66666667e-01) * M[10], D[59], L[13]);
	L[1] = fmaf(float(5.00000000e-01) * M[18], D[28], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[11], D[62], L[13]);
	L[1] = fmaf(M[8], D[14], L[1]);
	L[13] = fmaf(M[0], D[13], L[13]);
	L[1] = fmaf(M[2], D[5], L[1]);
	L[13] = fmaf(M[3], D[27], L[13]);
	L[1] = fmaf(float(8.33333333e-03) * M[55], D[76], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[9], D[47], L[13]);
	L[1] = fmaf(float(4.16666667e-02) * M[34], D[49], L[1]);
	L[13] = fmaf(float(1.66666667e-01) * M[19], D[74], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[19], D[29], L[1]);
	L[13] = fmaf(M[2], D[26], L[13]);
	L[1] = fmaf(float(5.00000000e-01) * M[9], D[15], L[1]);
	L[13] = fmaf(M[8], D[46], L[13]);
	L[1] = fmaf(M[3], D[6], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[7], D[45], L[13]);
	L[1] = fmaf(M[0], D[1], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[18], D[73], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[48], D[69], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[12], D[63], L[13]);
	L[1] = fmaf(float(5.00000000e-01) * M[28], D[43], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[13], D[66], L[13]);
	L[1] = fmaf(float(4.16666667e-02) * M[36], D[57], L[1]);
	L[13] = fmaf(M[14], D[67], L[13]);
	L[1] = fmaf(float(4.16666667e-02) * M[37], D[58], L[1]);
	L[13] = fmaf(M[5], D[41], L[13]);
	L[1] = fmaf(float(4.16666667e-02) * M[20], D[35], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[15], D[68], L[13]);
	L[1] = fmaf(float(8.33333333e-02) * M[38], D[59], L[1]);
	L[13] = fmaf(M[6], D[42], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[39], D[60], L[1]);
	L[13] = fmaf(M[1], D[23], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[21], D[36], L[1]);
	L[13] = fmaf(float(1.66666667e-01) * M[16], D[71], L[13]);
	L[1] = fmaf(float(8.33333333e-02) * M[40], D[61], L[1]);
	L[13] = fmaf(float(5.00000000e-01) * M[17], D[72], L[13]);
	L[1] = fmaf(float(1.66666667e-01) * M[22], D[37], L[1]);
	L[14] = fmaf(float(1.66666667e-01) * M[16], D[72], L[14]);
	L[1] = fmaf(float(1.66666667e-01) * M[10], D[20], L[1]);
	L[14] = fmaf(M[0], D[14], L[14]);
	L[1] = fmaf(float(8.33333333e-02) * M[41], D[62], L[1]);
	L[14] = fmaf(M[3], D[28], L[14]);
	L[1] = fmaf(float(2.50000000e-01) * M[42], D[63], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[9], D[48], L[14]);
	L[1] = fmaf(float(2.50000000e-01) * M[23], D[38], L[1]);
	L[14] = fmaf(float(1.66666667e-01) * M[19], D[75], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[24], D[39], L[1]);
	L[14] = fmaf(M[2], D[27], L[14]);
	L[1] = fmaf(float(2.50000000e-01) * M[43], D[64], L[1]);
	L[14] = fmaf(M[8], D[47], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[13], D[23], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[18], D[74], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[27], D[42], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[7], D[46], L[14]);
	L[1] = fmaf(float(2.50000000e-01) * M[47], D[68], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[17], D[73], L[14]);
	L[1] = fmaf(float(1.66666667e-01) * M[26], D[41], L[1]);
	L[14] = fmaf(M[1], D[24], L[14]);
	L[1] = fmaf(float(1.66666667e-01) * M[46], D[67], L[1]);
	L[14] = fmaf(M[6], D[43], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[4], D[10], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[15], D[69], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[12], D[22], L[1]);
	L[14] = fmaf(M[5], D[42], L[14]);
	L[1] = fmaf(float(2.50000000e-01) * M[25], D[40], L[1]);
	L[14] = fmaf(M[14], D[68], L[14]);
	L[1] = fmaf(float(8.33333333e-02) * M[44], D[65], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[13], D[67], L[14]);
	L[1] = fmaf(float(5.00000000e-01) * M[11], D[21], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[4], D[39], L[14]);
	L[1] = fmaf(float(4.16666667e-02) * M[45], D[66], L[1]);
	L[14] = fmaf(float(5.00000000e-01) * M[12], D[64], L[14]);
	L[2] = fmaf(float(8.33333333e-02) * M[53], D[80], L[2]);
	L[14] = fmaf(float(5.00000000e-01) * M[11], D[63], L[14]);
	L[2] = fmaf(float(1.66666667e-01) * M[16], D[30], L[2]);
	L[14] = fmaf(float(1.66666667e-01) * M[10], D[60], L[14]);
	L[2] = fmaf(float(1.66666667e-01) * M[31], D[51], L[2]);
	L[15] = fmaf(M[1], D[25], L[15]);
	L[2] = fmaf(float(8.33333333e-02) * M[52], D[79], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[17], D[74], L[15]);
	L[2] = fmaf(float(4.16666667e-02) * M[30], D[50], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[7], D[47], L[15]);
	L[2] = fmaf(float(4.16666667e-02) * M[51], D[78], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[18], D[75], L[15]);
	L[2] = fmaf(float(8.33333333e-03) * M[50], D[77], L[2]);
	L[15] = fmaf(M[8], D[48], L[15]);
	L[2] = fmaf(M[1], D[5], L[2]);
	L[15] = fmaf(M[2], D[28], L[15]);
	L[2] = fmaf(M[6], D[14], L[2]);
	L[15] = fmaf(float(1.66666667e-01) * M[19], D[76], L[15]);
	L[2] = fmaf(float(5.00000000e-01) * M[15], D[28], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[9], D[49], L[15]);
	L[2] = fmaf(float(1.66666667e-01) * M[29], D[48], L[2]);
	L[15] = fmaf(M[3], D[29], L[15]);
	L[2] = fmaf(float(4.16666667e-02) * M[49], D[75], L[2]);
	L[15] = fmaf(M[0], D[15], L[15]);
	L[2] = fmaf(M[5], D[13], L[2]);
	L[15] = fmaf(float(1.66666667e-01) * M[16], D[73], L[15]);
	L[2] = fmaf(M[14], D[27], L[2]);
	L[15] = fmaf(M[6], D[44], L[15]);
	L[2] = fmaf(float(2.50000000e-01) * M[32], D[52], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[15], D[70], L[15]);
	L[2] = fmaf(float(5.00000000e-01) * M[17], D[31], L[2]);
	L[15] = fmaf(float(1.66666667e-01) * M[10], D[61], L[15]);
	L[2] = fmaf(float(5.00000000e-01) * M[7], D[16], L[2]);
	L[15] = fmaf(M[5], D[43], L[15]);
	L[2] = fmaf(float(4.16666667e-02) * M[54], D[81], L[2]);
	L[15] = fmaf(M[14], D[69], L[15]);
	L[2] = fmaf(float(1.66666667e-01) * M[33], D[53], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[13], D[68], L[15]);
	L[2] = fmaf(float(5.00000000e-01) * M[18], D[32], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[4], D[40], L[15]);
	L[2] = fmaf(M[8], D[17], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[12], D[65], L[15]);
	L[2] = fmaf(M[2], D[7], L[2]);
	L[15] = fmaf(float(5.00000000e-01) * M[11], D[64], L[15]);
	L[2] = fmaf(float(8.33333333e-03) * M[55], D[82], L[2]);
	L[16] = fmaf(M[8], D[51], L[16]);
	L[2] = fmaf(float(4.16666667e-02) * M[34], D[54], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[13], D[71], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[19], D[33], L[2]);
	L[16] = fmaf(M[0], D[16], L[16]);
	L[2] = fmaf(float(5.00000000e-01) * M[9], D[18], L[2]);
	L[16] = fmaf(M[3], D[31], L[16]);
	L[2] = fmaf(M[3], D[8], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[9], D[52], L[16]);
	L[2] = fmaf(M[0], D[2], L[2]);
	L[16] = fmaf(float(1.66666667e-01) * M[19], D[80], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[48], D[74], L[2]);
	L[16] = fmaf(M[2], D[30], L[16]);
	L[2] = fmaf(float(8.33333333e-03) * M[35], D[57], L[2]);
	L[16] = fmaf(float(1.66666667e-01) * M[10], D[62], L[16]);
	L[2] = fmaf(float(4.16666667e-02) * M[36], D[59], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[18], D[79], L[16]);
	L[2] = fmaf(float(4.16666667e-02) * M[37], D[60], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[7], D[50], L[16]);
	L[2] = fmaf(float(4.16666667e-02) * M[20], D[36], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[17], D[78], L[16]);
	L[2] = fmaf(float(8.33333333e-02) * M[38], D[62], L[2]);
	L[16] = fmaf(float(1.66666667e-01) * M[16], D[77], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[39], D[63], L[2]);
	L[16] = fmaf(M[1], D[26], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[21], D[38], L[2]);
	L[16] = fmaf(M[6], D[46], L[16]);
	L[2] = fmaf(float(8.33333333e-02) * M[40], D[64], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[15], D[73], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[22], D[39], L[2]);
	L[16] = fmaf(M[5], D[45], L[16]);
	L[2] = fmaf(float(1.66666667e-01) * M[10], D[21], L[2]);
	L[16] = fmaf(M[14], D[72], L[16]);
	L[2] = fmaf(float(8.33333333e-02) * M[41], D[66], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[4], D[41], L[16]);
	L[2] = fmaf(float(2.50000000e-01) * M[42], D[67], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[12], D[67], L[16]);
	L[2] = fmaf(float(2.50000000e-01) * M[23], D[41], L[2]);
	L[16] = fmaf(float(5.00000000e-01) * M[11], D[66], L[16]);
	L[2] = fmaf(float(2.50000000e-01) * M[43], D[68], L[2]);
	L[17] = fmaf(float(1.66666667e-01) * M[16], D[78], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[24], D[42], L[2]);
	L[17] = fmaf(float(1.66666667e-01) * M[10], D[63], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[11], D[23], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[11], D[67], L[17]);
	L[2] = fmaf(float(8.33333333e-02) * M[44], D[69], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[12], D[68], L[17]);
	L[2] = fmaf(float(2.50000000e-01) * M[25], D[43], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[4], D[42], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[12], D[24], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[13], D[72], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[4], D[11], L[2]);
	L[17] = fmaf(M[14], D[73], L[17]);
	L[2] = fmaf(float(4.16666667e-02) * M[45], D[71], L[2]);
	L[17] = fmaf(M[5], D[46], L[17]);
	L[2] = fmaf(float(1.66666667e-01) * M[46], D[72], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[15], D[74], L[17]);
	L[2] = fmaf(float(1.66666667e-01) * M[26], D[45], L[2]);
	L[17] = fmaf(M[6], D[47], L[17]);
	L[2] = fmaf(float(2.50000000e-01) * M[47], D[73], L[2]);
	L[17] = fmaf(M[1], D[27], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[27], D[46], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[17], D[79], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[13], D[26], L[2]);
	L[17] = fmaf(float(5.00000000e-01) * M[7], D[51], L[17]);
	L[2] = fmaf(float(5.00000000e-01) * M[28], D[47], L[2]);
	L[17] = fmaf(M[0], D[17], L[17]);
	L[3] = fmaf(M[3], D[9], L[3]);
	L[17] = fmaf(float(5.00000000e-01) * M[18], D[80], L[17]);
	L[3] = fmaf(float(8.33333333e-02) * M[41], D[67], L[3]);
	L[17] = fmaf(M[8], D[52], L[17]);
	L[3] = fmaf(float(4.16666667e-02) * M[37], D[61], L[3]);
	L[17] = fmaf(M[2], D[31], L[17]);
	L[3] = fmaf(float(4.16666667e-02) * M[20], D[37], L[3]);
	L[17] = fmaf(M[3], D[32], L[17]);
	L[3] = fmaf(float(8.33333333e-02) * M[38], D[63], L[3]);
	L[17] = fmaf(float(5.00000000e-01) * M[9], D[53], L[17]);
	L[3] = fmaf(float(1.66666667e-01) * M[39], D[64], L[3]);
	L[17] = fmaf(float(1.66666667e-01) * M[19], D[81], L[17]);
	L[3] = fmaf(float(1.66666667e-01) * M[21], D[39], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[17], D[80], L[18]);
	L[3] = fmaf(float(8.33333333e-02) * M[40], D[65], L[3]);
	L[18] = fmaf(M[0], D[18], L[18]);
	L[3] = fmaf(float(1.66666667e-01) * M[22], D[40], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[7], D[52], L[18]);
	L[3] = fmaf(float(1.66666667e-01) * M[10], D[22], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[18], D[81], L[18]);
	L[3] = fmaf(float(4.16666667e-02) * M[36], D[60], L[3]);
	L[18] = fmaf(M[8], D[53], L[18]);
	L[3] = fmaf(float(2.50000000e-01) * M[42], D[68], L[3]);
	L[18] = fmaf(M[2], D[32], L[18]);
	L[3] = fmaf(float(2.50000000e-01) * M[23], D[42], L[3]);
	L[18] = fmaf(float(1.66666667e-01) * M[19], D[82], L[18]);
	L[3] = fmaf(float(2.50000000e-01) * M[43], D[69], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[9], D[54], L[18]);
	L[3] = fmaf(float(5.00000000e-01) * M[24], D[43], L[3]);
	L[18] = fmaf(M[3], D[33], L[18]);
	L[3] = fmaf(float(5.00000000e-01) * M[11], D[24], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[11], D[68], L[18]);
	L[3] = fmaf(float(8.33333333e-02) * M[44], D[70], L[3]);
	L[18] = fmaf(float(1.66666667e-01) * M[16], D[79], L[18]);
	L[3] = fmaf(float(2.50000000e-01) * M[25], D[44], L[3]);
	L[18] = fmaf(M[1], D[28], L[18]);
	L[3] = fmaf(float(5.00000000e-01) * M[12], D[25], L[3]);
	L[18] = fmaf(float(1.66666667e-01) * M[10], D[64], L[18]);
	L[3] = fmaf(float(1.66666667e-01) * M[33], D[54], L[3]);
	L[18] = fmaf(M[6], D[48], L[18]);
	L[3] = fmaf(M[0], D[3], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[15], D[75], L[18]);
	L[3] = fmaf(float(5.00000000e-01) * M[9], D[19], L[3]);
	L[18] = fmaf(M[5], D[47], L[18]);
	L[3] = fmaf(float(1.66666667e-01) * M[19], D[34], L[3]);
	L[18] = fmaf(M[14], D[74], L[18]);
	L[3] = fmaf(float(4.16666667e-02) * M[34], D[55], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[13], D[73], L[18]);
	L[3] = fmaf(float(8.33333333e-03) * M[55], D[83], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[4], D[43], L[18]);
	L[3] = fmaf(M[2], D[8], L[3]);
	L[18] = fmaf(float(5.00000000e-01) * M[12], D[69], L[18]);
	L[3] = fmaf(M[8], D[18], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[9], D[55], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[18], D[33], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[13], D[74], L[19]);
	L[3] = fmaf(float(8.33333333e-02) * M[52], D[80], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[4], D[44], L[19]);
	L[3] = fmaf(float(4.16666667e-02) * M[54], D[82], L[3]);
	L[19] = fmaf(M[14], D[75], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[7], D[17], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[12], D[70], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[17], D[32], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[11], D[69], L[19]);
	L[3] = fmaf(float(2.50000000e-01) * M[32], D[53], L[3]);
	L[19] = fmaf(float(1.66666667e-01) * M[10], D[65], L[19]);
	L[3] = fmaf(float(8.33333333e-02) * M[53], D[81], L[3]);
	L[19] = fmaf(M[0], D[19], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[16], D[31], L[3]);
	L[19] = fmaf(M[3], D[34], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[31], D[52], L[3]);
	L[19] = fmaf(float(1.66666667e-01) * M[19], D[83], L[19]);
	L[3] = fmaf(float(8.33333333e-03) * M[35], D[58], L[3]);
	L[19] = fmaf(M[2], D[33], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[29], D[49], L[3]);
	L[19] = fmaf(M[8], D[54], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[48], D[75], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[18], D[82], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[13], D[27], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[7], D[53], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[27], D[47], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[17], D[81], L[19]);
	L[3] = fmaf(float(2.50000000e-01) * M[47], D[74], L[3]);
	L[19] = fmaf(float(1.66666667e-01) * M[16], D[80], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[26], D[46], L[3]);
	L[19] = fmaf(M[1], D[29], L[19]);
	L[3] = fmaf(float(1.66666667e-01) * M[46], D[73], L[3]);
	L[19] = fmaf(M[6], D[49], L[19]);
	L[3] = fmaf(float(4.16666667e-02) * M[45], D[72], L[3]);
	L[19] = fmaf(float(5.00000000e-01) * M[15], D[76], L[19]);
	L[3] = fmaf(float(5.00000000e-01) * M[28], D[48], L[3]);
	L[19] = fmaf(M[5], D[48], L[19]);
	L[3] = fmaf(M[14], D[28], L[3]);
	L[20] = fmaf(M[8], D[60], L[20]);
	L[3] = fmaf(M[5], D[14], L[3]);
	L[20] = fmaf(float(5.00000000e-01) * M[4], D[56], L[20]);
	L[3] = fmaf(float(4.16666667e-02) * M[49], D[76], L[3]);
	L[20] = fmaf(M[5], D[57], L[20]);
	L[3] = fmaf(float(5.00000000e-01) * M[15], D[29], L[3]);
	L[20] = fmaf(M[6], D[58], L[20]);
	L[3] = fmaf(M[6], D[15], L[3]);
	L[20] = fmaf(M[0], D[20], L[20]);
	L[3] = fmaf(M[1], D[6], L[3]);
	L[20] = fmaf(float(5.00000000e-01) * M[7], D[59], L[20]);
	L[3] = fmaf(float(8.33333333e-03) * M[50], D[78], L[3]);
	L[20] = fmaf(M[2], D[36], L[20]);
	L[3] = fmaf(float(4.16666667e-02) * M[51], D[79], L[3]);
	L[20] = fmaf(float(5.00000000e-01) * M[9], D[61], L[20]);
	L[3] = fmaf(float(4.16666667e-02) * M[30], D[51], L[3]);
	L[20] = fmaf(M[3], D[37], L[20]);
	L[3] = fmaf(float(5.00000000e-01) * M[4], D[12], L[3]);
	L[20] = fmaf(M[1], D[35], L[20]);
	L[4] = fmaf(float(5.00000000e-01) * M[9], D[25], L[4]);
	L[21] = fmaf(M[0], D[21], L[21]);
	L[4] = fmaf(float(4.16666667e-02) * M[34], D[70], L[4]);
	L[21] = fmaf(M[3], D[39], L[21]);
	L[4] = fmaf(float(1.66666667e-01) * M[19], D[44], L[4]);
	L[21] = fmaf(float(5.00000000e-01) * M[9], D[64], L[21]);
	L[4] = fmaf(M[14], D[39], L[4]);
	L[21] = fmaf(M[2], D[38], L[21]);
	L[4] = fmaf(M[2], D[11], L[4]);
	L[21] = fmaf(M[8], D[63], L[21]);
	L[4] = fmaf(M[8], D[24], L[4]);
	L[21] = fmaf(float(5.00000000e-01) * M[7], D[62], L[21]);
	L[4] = fmaf(float(5.00000000e-01) * M[18], D[43], L[4]);
	L[21] = fmaf(float(5.00000000e-01) * M[4], D[57], L[21]);
	L[4] = fmaf(float(1.66666667e-01) * M[33], D[69], L[4]);
	L[21] = fmaf(M[5], D[59], L[21]);
	L[4] = fmaf(float(5.00000000e-01) * M[7], D[23], L[4]);
	L[21] = fmaf(M[6], D[60], L[21]);
	L[4] = fmaf(float(5.00000000e-01) * M[17], D[42], L[4]);
	L[21] = fmaf(M[1], D[36], L[21]);
	L[4] = fmaf(float(2.50000000e-01) * M[32], D[68], L[4]);
	L[22] = fmaf(float(5.00000000e-01) * M[9], D[65], L[22]);
	L[4] = fmaf(float(1.66666667e-01) * M[16], D[41], L[4]);
	L[22] = fmaf(M[2], D[39], L[22]);
	L[4] = fmaf(float(1.66666667e-01) * M[31], D[67], L[4]);
	L[22] = fmaf(M[8], D[64], L[22]);
	L[4] = fmaf(float(4.16666667e-02) * M[30], D[66], L[4]);
	L[22] = fmaf(M[3], D[40], L[22]);
	L[4] = fmaf(M[1], D[10], L[4]);
	L[22] = fmaf(M[0], D[22], L[22]);
	L[4] = fmaf(M[6], D[22], L[4]);
	L[22] = fmaf(float(5.00000000e-01) * M[7], D[63], L[22]);
	L[4] = fmaf(float(5.00000000e-01) * M[15], D[40], L[4]);
	L[22] = fmaf(M[1], D[37], L[22]);
	L[4] = fmaf(float(1.66666667e-01) * M[29], D[65], L[4]);
	L[22] = fmaf(M[6], D[61], L[22]);
	L[4] = fmaf(M[5], D[21], L[4]);
	L[22] = fmaf(M[5], D[60], L[22]);
	L[4] = fmaf(M[0], D[4], L[4]);
	L[22] = fmaf(float(5.00000000e-01) * M[4], D[58], L[22]);
	L[4] = fmaf(float(5.00000000e-01) * M[28], D[64], L[4]);
	L[23] = fmaf(M[2], D[41], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[13], D[38], L[4]);
	L[23] = fmaf(M[0], D[23], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[27], D[63], L[4]);
	L[23] = fmaf(M[3], D[42], L[23]);
	L[4] = fmaf(float(1.66666667e-01) * M[26], D[62], L[4]);
	L[23] = fmaf(float(5.00000000e-01) * M[9], D[68], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[4], D[20], L[4]);
	L[23] = fmaf(M[8], D[67], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[12], D[37], L[4]);
	L[23] = fmaf(float(5.00000000e-01) * M[4], D[59], L[23]);
	L[4] = fmaf(float(2.50000000e-01) * M[25], D[61], L[4]);
	L[23] = fmaf(float(5.00000000e-01) * M[7], D[66], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[11], D[36], L[4]);
	L[23] = fmaf(M[1], D[38], L[23]);
	L[4] = fmaf(float(5.00000000e-01) * M[24], D[60], L[4]);
	L[23] = fmaf(M[6], D[63], L[23]);
	L[4] = fmaf(float(2.50000000e-01) * M[23], D[59], L[4]);
	L[23] = fmaf(M[5], D[62], L[23]);
	L[4] = fmaf(float(1.66666667e-01) * M[10], D[35], L[4]);
	L[24] = fmaf(M[5], D[63], L[24]);
	L[4] = fmaf(float(1.66666667e-01) * M[22], D[58], L[4]);
	L[24] = fmaf(M[0], D[24], L[24]);
	L[4] = fmaf(float(1.66666667e-01) * M[21], D[57], L[4]);
	L[24] = fmaf(M[3], D[43], L[24]);
	L[4] = fmaf(float(4.16666667e-02) * M[20], D[56], L[4]);
	L[24] = fmaf(float(5.00000000e-01) * M[9], D[69], L[24]);
	L[4] = fmaf(M[3], D[12], L[4]);
	L[24] = fmaf(M[2], D[42], L[24]);
	L[5] = fmaf(M[3], D[14], L[5]);
	L[24] = fmaf(M[8], D[68], L[24]);
	L[5] = fmaf(M[0], D[5], L[5]);
	L[24] = fmaf(float(5.00000000e-01) * M[7], D[67], L[24]);
	L[5] = fmaf(float(5.00000000e-01) * M[9], D[28], L[5]);
	L[24] = fmaf(M[1], D[39], L[24]);
	L[5] = fmaf(float(4.16666667e-02) * M[20], D[57], L[5]);
	L[24] = fmaf(M[6], D[64], L[24]);
	L[5] = fmaf(float(1.66666667e-01) * M[21], D[59], L[5]);
	L[24] = fmaf(float(5.00000000e-01) * M[4], D[60], L[24]);
	L[5] = fmaf(float(1.66666667e-01) * M[22], D[60], L[5]);
	L[25] = fmaf(M[0], D[25], L[25]);
	L[5] = fmaf(float(1.66666667e-01) * M[10], D[36], L[5]);
	L[25] = fmaf(M[2], D[43], L[25]);
	L[5] = fmaf(float(2.50000000e-01) * M[23], D[62], L[5]);
	L[25] = fmaf(M[6], D[65], L[25]);
	L[5] = fmaf(float(5.00000000e-01) * M[11], D[38], L[5]);
	L[25] = fmaf(M[5], D[64], L[25]);
	L[5] = fmaf(float(1.66666667e-01) * M[26], D[66], L[5]);
	L[25] = fmaf(float(5.00000000e-01) * M[4], D[61], L[25]);
	L[5] = fmaf(float(5.00000000e-01) * M[27], D[67], L[5]);
	L[25] = fmaf(M[1], D[40], L[25]);
	L[5] = fmaf(float(5.00000000e-01) * M[13], D[41], L[5]);
	L[25] = fmaf(float(5.00000000e-01) * M[7], D[68], L[25]);
	L[5] = fmaf(float(5.00000000e-01) * M[28], D[68], L[5]);
	L[25] = fmaf(M[8], D[69], L[25]);
	L[5] = fmaf(M[14], D[42], L[5]);
	L[25] = fmaf(float(5.00000000e-01) * M[9], D[70], L[25]);
	L[5] = fmaf(M[5], D[23], L[5]);
	L[25] = fmaf(M[3], D[44], L[25]);
	L[5] = fmaf(float(1.66666667e-01) * M[29], D[69], L[5]);
	L[26] = fmaf(M[0], D[26], L[26]);
	L[5] = fmaf(float(5.00000000e-01) * M[15], D[43], L[5]);
	L[26] = fmaf(M[3], D[46], L[26]);
	L[5] = fmaf(M[6], D[24], L[5]);
	L[26] = fmaf(float(5.00000000e-01) * M[9], D[73], L[26]);
	L[5] = fmaf(M[1], D[11], L[5]);
	L[26] = fmaf(M[2], D[45], L[26]);
	L[5] = fmaf(float(4.16666667e-02) * M[30], D[71], L[5]);
	L[26] = fmaf(M[8], D[72], L[26]);
	L[5] = fmaf(float(1.66666667e-01) * M[31], D[72], L[5]);
	L[26] = fmaf(float(5.00000000e-01) * M[7], D[71], L[26]);
	L[5] = fmaf(float(1.66666667e-01) * M[16], D[45], L[5]);
	L[26] = fmaf(M[1], D[41], L[26]);
	L[5] = fmaf(float(2.50000000e-01) * M[32], D[73], L[5]);
	L[26] = fmaf(M[6], D[67], L[26]);
	L[5] = fmaf(float(5.00000000e-01) * M[17], D[46], L[5]);
	L[26] = fmaf(M[5], D[66], L[26]);
	L[5] = fmaf(float(5.00000000e-01) * M[7], D[26], L[5]);
	L[26] = fmaf(float(5.00000000e-01) * M[4], D[62], L[26]);
	L[5] = fmaf(float(1.66666667e-01) * M[33], D[74], L[5]);
	L[27] = fmaf(M[3], D[47], L[27]);
	L[5] = fmaf(float(5.00000000e-01) * M[18], D[47], L[5]);
	L[27] = fmaf(float(5.00000000e-01) * M[4], D[63], L[27]);
	L[5] = fmaf(M[8], D[27], L[5]);
	L[27] = fmaf(M[5], D[67], L[27]);
	L[5] = fmaf(M[2], D[13], L[5]);
	L[27] = fmaf(M[6], D[68], L[27]);
	L[5] = fmaf(float(4.16666667e-02) * M[34], D[75], L[5]);
	L[27] = fmaf(M[1], D[42], L[27]);
	L[5] = fmaf(float(1.66666667e-01) * M[19], D[48], L[5]);
	L[27] = fmaf(float(5.00000000e-01) * M[9], D[74], L[27]);
	L[5] = fmaf(float(5.00000000e-01) * M[4], D[21], L[5]);
	L[27] = fmaf(M[0], D[27], L[27]);
	L[5] = fmaf(float(5.00000000e-01) * M[12], D[39], L[5]);
	L[27] = fmaf(float(5.00000000e-01) * M[7], D[72], L[27]);
	L[5] = fmaf(float(2.50000000e-01) * M[25], D[64], L[5]);
	L[27] = fmaf(M[2], D[46], L[27]);
	L[5] = fmaf(float(5.00000000e-01) * M[24], D[63], L[5]);
	L[27] = fmaf(M[8], D[73], L[27]);
	L[6] = fmaf(float(1.66666667e-01) * M[16], D[46], L[6]);
	L[28] = fmaf(M[8], D[74], L[28]);
	L[6] = fmaf(float(5.00000000e-01) * M[18], D[48], L[6]);
	L[28] = fmaf(float(5.00000000e-01) * M[4], D[64], L[28]);
	L[6] = fmaf(M[6], D[25], L[6]);
	L[28] = fmaf(M[5], D[68], L[28]);
	L[6] = fmaf(M[1], D[12], L[6]);
	L[28] = fmaf(M[6], D[69], L[28]);
	L[6] = fmaf(float(4.16666667e-02) * M[30], D[72], L[6]);
	L[28] = fmaf(M[1], D[43], L[28]);
	L[6] = fmaf(float(1.66666667e-01) * M[31], D[73], L[6]);
	L[28] = fmaf(M[0], D[28], L[28]);
	L[6] = fmaf(float(2.50000000e-01) * M[32], D[74], L[6]);
	L[28] = fmaf(M[3], D[48], L[28]);
	L[6] = fmaf(float(5.00000000e-01) * M[17], D[47], L[6]);
	L[28] = fmaf(float(5.00000000e-01) * M[9], D[75], L[28]);
	L[6] = fmaf(float(5.00000000e-01) * M[7], D[27], L[6]);
	L[28] = fmaf(M[2], D[47], L[28]);
	L[6] = fmaf(float(1.66666667e-01) * M[33], D[75], L[6]);
	L[28] = fmaf(float(5.00000000e-01) * M[7], D[73], L[28]);
	L[6] = fmaf(float(1.66666667e-01) * M[21], D[60], L[6]);
	L[29] = fmaf(float(5.00000000e-01) * M[4], D[65], L[29]);
	L[6] = fmaf(M[8], D[28], L[6]);
	L[29] = fmaf(M[5], D[69], L[29]);
	L[6] = fmaf(M[2], D[14], L[6]);
	L[29] = fmaf(M[6], D[70], L[29]);
	L[6] = fmaf(float(4.16666667e-02) * M[34], D[76], L[6]);
	L[29] = fmaf(M[1], D[44], L[29]);
	L[6] = fmaf(float(1.66666667e-01) * M[19], D[49], L[6]);
	L[29] = fmaf(float(5.00000000e-01) * M[7], D[74], L[29]);
	L[6] = fmaf(float(5.00000000e-01) * M[9], D[29], L[6]);
	L[29] = fmaf(M[8], D[75], L[29]);
	L[6] = fmaf(M[3], D[15], L[6]);
	L[29] = fmaf(M[2], D[48], L[29]);
	L[6] = fmaf(M[0], D[6], L[6]);
	L[29] = fmaf(float(5.00000000e-01) * M[9], D[76], L[29]);
	L[6] = fmaf(float(1.66666667e-01) * M[29], D[70], L[6]);
	L[29] = fmaf(M[3], D[49], L[29]);
	L[6] = fmaf(float(4.16666667e-02) * M[20], D[58], L[6]);
	L[29] = fmaf(M[0], D[29], L[29]);
	L[6] = fmaf(float(1.66666667e-01) * M[22], D[61], L[6]);
	L[30] = fmaf(float(5.00000000e-01) * M[4], D[66], L[30]);
	L[6] = fmaf(float(1.66666667e-01) * M[10], D[37], L[6]);
	L[30] = fmaf(M[5], D[71], L[30]);
	L[6] = fmaf(float(2.50000000e-01) * M[23], D[63], L[6]);
	L[30] = fmaf(M[0], D[30], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[24], D[64], L[6]);
	L[30] = fmaf(M[3], D[51], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[11], D[39], L[6]);
	L[30] = fmaf(float(5.00000000e-01) * M[9], D[79], L[30]);
	L[6] = fmaf(float(2.50000000e-01) * M[25], D[65], L[6]);
	L[30] = fmaf(M[2], D[50], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[12], D[40], L[6]);
	L[30] = fmaf(M[8], D[78], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[4], D[22], L[6]);
	L[30] = fmaf(float(5.00000000e-01) * M[7], D[77], L[30]);
	L[6] = fmaf(float(1.66666667e-01) * M[26], D[67], L[6]);
	L[30] = fmaf(M[1], D[45], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[27], D[68], L[6]);
	L[30] = fmaf(M[6], D[72], L[30]);
	L[6] = fmaf(float(5.00000000e-01) * M[13], D[42], L[6]);
	L[31] = fmaf(float(5.00000000e-01) * M[4], D[67], L[31]);
	L[6] = fmaf(float(5.00000000e-01) * M[28], D[69], L[6]);
	L[31] = fmaf(M[5], D[72], L[31]);
	L[6] = fmaf(M[14], D[43], L[6]);
	L[31] = fmaf(M[6], D[73], L[31]);
	L[6] = fmaf(M[5], D[24], L[6]);
	L[31] = fmaf(M[1], D[46], L[31]);
	L[6] = fmaf(float(5.00000000e-01) * M[15], D[44], L[6]);
	L[31] = fmaf(float(5.00000000e-01) * M[7], D[78], L[31]);
	L[7] = fmaf(float(1.66666667e-01) * M[31], D[78], L[7]);
	L[31] = fmaf(M[8], D[79], L[31]);
	L[7] = fmaf(float(4.16666667e-02) * M[20], D[59], L[7]);
	L[31] = fmaf(M[2], D[51], L[31]);
	L[7] = fmaf(float(1.66666667e-01) * M[21], D[62], L[7]);
	L[31] = fmaf(float(5.00000000e-01) * M[9], D[80], L[31]);
	L[7] = fmaf(float(1.66666667e-01) * M[22], D[63], L[7]);
	L[31] = fmaf(M[3], D[52], L[31]);
	L[7] = fmaf(float(1.66666667e-01) * M[10], D[38], L[7]);
	L[31] = fmaf(M[0], D[31], L[31]);
	L[7] = fmaf(float(2.50000000e-01) * M[23], D[66], L[7]);
	L[32] = fmaf(float(5.00000000e-01) * M[4], D[68], L[32]);
	L[7] = fmaf(float(5.00000000e-01) * M[24], D[67], L[7]);
	L[32] = fmaf(M[5], D[73], L[32]);
	L[7] = fmaf(float(2.50000000e-01) * M[25], D[68], L[7]);
	L[32] = fmaf(M[6], D[74], L[32]);
	L[7] = fmaf(float(5.00000000e-01) * M[11], D[41], L[7]);
	L[32] = fmaf(M[1], D[47], L[32]);
	L[7] = fmaf(M[0], D[7], L[7]);
	L[32] = fmaf(float(5.00000000e-01) * M[7], D[79], L[32]);
	L[7] = fmaf(M[3], D[17], L[7]);
	L[32] = fmaf(M[8], D[80], L[32]);
	L[7] = fmaf(float(5.00000000e-01) * M[9], D[32], L[7]);
	L[32] = fmaf(M[2], D[52], L[32]);
	L[7] = fmaf(float(1.66666667e-01) * M[19], D[53], L[7]);
	L[32] = fmaf(float(5.00000000e-01) * M[9], D[81], L[32]);
	L[7] = fmaf(float(4.16666667e-02) * M[34], D[81], L[7]);
	L[32] = fmaf(M[3], D[53], L[32]);
	L[7] = fmaf(M[2], D[16], L[7]);
	L[32] = fmaf(M[0], D[32], L[32]);
	L[7] = fmaf(M[8], D[31], L[7]);
	L[33] = fmaf(M[3], D[54], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[18], D[52], L[7]);
	L[33] = fmaf(float(5.00000000e-01) * M[4], D[69], L[33]);
	L[7] = fmaf(float(1.66666667e-01) * M[33], D[80], L[7]);
	L[33] = fmaf(M[5], D[74], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[7], D[30], L[7]);
	L[33] = fmaf(M[6], D[75], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[17], D[51], L[7]);
	L[33] = fmaf(M[1], D[48], L[33]);
	L[7] = fmaf(float(2.50000000e-01) * M[32], D[79], L[7]);
	L[33] = fmaf(float(5.00000000e-01) * M[7], D[80], L[33]);
	L[7] = fmaf(float(1.66666667e-01) * M[16], D[50], L[7]);
	L[33] = fmaf(M[8], D[81], L[33]);
	L[7] = fmaf(float(4.16666667e-02) * M[30], D[77], L[7]);
	L[33] = fmaf(M[2], D[53], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[12], D[42], L[7]);
	L[33] = fmaf(float(5.00000000e-01) * M[9], D[82], L[33]);
	L[7] = fmaf(float(5.00000000e-01) * M[4], D[23], L[7]);
	L[33] = fmaf(M[0], D[33], L[33]);
	L[7] = fmaf(float(1.66666667e-01) * M[26], D[71], L[7]);
	L[34] = fmaf(M[2], D[54], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[27], D[72], L[7]);
	L[34] = fmaf(M[0], D[34], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[13], D[45], L[7]);
	L[34] = fmaf(float(5.00000000e-01) * M[4], D[70], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[28], D[73], L[7]);
	L[34] = fmaf(M[5], D[75], L[34]);
	L[7] = fmaf(M[5], D[26], L[7]);
	L[34] = fmaf(M[6], D[76], L[34]);
	L[7] = fmaf(float(1.66666667e-01) * M[29], D[74], L[7]);
	L[34] = fmaf(M[1], D[49], L[34]);
	L[7] = fmaf(float(5.00000000e-01) * M[15], D[47], L[7]);
	L[34] = fmaf(float(5.00000000e-01) * M[7], D[81], L[34]);
	L[7] = fmaf(M[6], D[27], L[7]);
	L[34] = fmaf(M[8], D[82], L[34]);
	L[7] = fmaf(M[1], D[13], L[7]);
	L[34] = fmaf(float(5.00000000e-01) * M[9], D[83], L[34]);
	L[7] = fmaf(M[14], D[46], L[7]);
	L[34] = fmaf(M[3], D[55], L[34]);
	L[8] = fmaf(float(1.66666667e-01) * M[16], D[51], L[8]);
	L[35] = fmaf(M[2], D[57], L[35]);
	L[8] = fmaf(float(1.66666667e-01) * M[31], D[79], L[8]);
	L[35] = fmaf(M[1], D[56], L[35]);
	L[8] = fmaf(float(4.16666667e-02) * M[30], D[78], L[8]);
	L[35] = fmaf(M[3], D[58], L[35]);
	L[8] = fmaf(M[1], D[14], L[8]);
	L[35] = fmaf(M[0], D[35], L[35]);
	L[8] = fmaf(M[6], D[28], L[8]);
	L[36] = fmaf(M[0], D[36], L[36]);
	L[8] = fmaf(float(5.00000000e-01) * M[15], D[48], L[8]);
	L[36] = fmaf(M[3], D[60], L[36]);
	L[8] = fmaf(float(1.66666667e-01) * M[29], D[75], L[8]);
	L[36] = fmaf(M[2], D[59], L[36]);
	L[8] = fmaf(M[5], D[27], L[8]);
	L[36] = fmaf(M[1], D[57], L[36]);
	L[8] = fmaf(M[14], D[47], L[8]);
	L[37] = fmaf(M[2], D[60], L[37]);
	L[8] = fmaf(float(5.00000000e-01) * M[28], D[74], L[8]);
	L[37] = fmaf(M[0], D[37], L[37]);
	L[8] = fmaf(M[0], D[8], L[8]);
	L[37] = fmaf(M[1], D[58], L[37]);
	L[8] = fmaf(float(5.00000000e-01) * M[13], D[46], L[8]);
	L[37] = fmaf(M[3], D[61], L[37]);
	L[8] = fmaf(float(2.50000000e-01) * M[32], D[80], L[8]);
	L[38] = fmaf(M[2], D[62], L[38]);
	L[8] = fmaf(float(5.00000000e-01) * M[17], D[52], L[8]);
	L[38] = fmaf(M[1], D[59], L[38]);
	L[8] = fmaf(float(5.00000000e-01) * M[7], D[31], L[8]);
	L[38] = fmaf(M[0], D[38], L[38]);
	L[8] = fmaf(float(1.66666667e-01) * M[33], D[81], L[8]);
	L[38] = fmaf(M[3], D[63], L[38]);
	L[8] = fmaf(float(5.00000000e-01) * M[18], D[53], L[8]);
	L[39] = fmaf(M[0], D[39], L[39]);
	L[8] = fmaf(M[8], D[32], L[8]);
	L[39] = fmaf(M[3], D[64], L[39]);
	L[8] = fmaf(M[2], D[17], L[8]);
	L[39] = fmaf(M[2], D[63], L[39]);
	L[8] = fmaf(float(4.16666667e-02) * M[34], D[82], L[8]);
	L[39] = fmaf(M[1], D[60], L[39]);
	L[8] = fmaf(float(1.66666667e-01) * M[19], D[54], L[8]);
	L[40] = fmaf(M[0], D[40], L[40]);
	L[8] = fmaf(float(5.00000000e-01) * M[9], D[33], L[8]);
	L[40] = fmaf(M[3], D[65], L[40]);
	L[8] = fmaf(M[3], D[18], L[8]);
	L[40] = fmaf(M[2], D[64], L[40]);
	L[8] = fmaf(float(1.66666667e-01) * M[26], D[72], L[8]);
	L[40] = fmaf(M[1], D[61], L[40]);
	L[8] = fmaf(float(5.00000000e-01) * M[27], D[73], L[8]);
	L[41] = fmaf(M[2], D[66], L[41]);
	L[8] = fmaf(float(4.16666667e-02) * M[20], D[60], L[8]);
	L[41] = fmaf(M[1], D[62], L[41]);
	L[8] = fmaf(float(1.66666667e-01) * M[21], D[63], L[8]);
	L[41] = fmaf(M[3], D[67], L[41]);
	L[8] = fmaf(float(1.66666667e-01) * M[22], D[64], L[8]);
	L[41] = fmaf(M[0], D[41], L[41]);
	L[8] = fmaf(float(1.66666667e-01) * M[10], D[39], L[8]);
	L[42] = fmaf(M[1], D[63], L[42]);
	L[8] = fmaf(float(2.50000000e-01) * M[23], D[67], L[8]);
	L[42] = fmaf(M[2], D[67], L[42]);
	L[8] = fmaf(float(5.00000000e-01) * M[24], D[68], L[8]);
	L[42] = fmaf(M[3], D[68], L[42]);
	L[8] = fmaf(float(5.00000000e-01) * M[11], D[42], L[8]);
	L[42] = fmaf(M[0], D[42], L[42]);
	L[8] = fmaf(float(2.50000000e-01) * M[25], D[69], L[8]);
	L[43] = fmaf(M[1], D[64], L[43]);
	L[8] = fmaf(float(5.00000000e-01) * M[12], D[43], L[8]);
	L[43] = fmaf(M[2], D[68], L[43]);
	L[8] = fmaf(float(5.00000000e-01) * M[4], D[24], L[8]);
	L[43] = fmaf(M[3], D[69], L[43]);
	L[9] = fmaf(M[0], D[9], L[9]);
	L[43] = fmaf(M[0], D[43], L[43]);
	L[9] = fmaf(float(5.00000000e-01) * M[7], D[32], L[9]);
	L[44] = fmaf(M[1], D[65], L[44]);
	L[9] = fmaf(float(5.00000000e-01) * M[17], D[53], L[9]);
	L[44] = fmaf(M[2], D[69], L[44]);
	L[9] = fmaf(float(1.66666667e-01) * M[33], D[82], L[9]);
	L[44] = fmaf(M[3], D[70], L[44]);
	L[9] = fmaf(float(2.50000000e-01) * M[32], D[81], L[9]);
	L[44] = fmaf(M[0], D[44], L[44]);
	L[9] = fmaf(float(1.66666667e-01) * M[16], D[52], L[9]);
	L[45] = fmaf(M[1], D[66], L[45]);
	L[9] = fmaf(float(1.66666667e-01) * M[31], D[80], L[9]);
	L[45] = fmaf(M[2], D[71], L[45]);
	L[9] = fmaf(float(4.16666667e-02) * M[30], D[79], L[9]);
	L[45] = fmaf(M[3], D[72], L[45]);
	L[9] = fmaf(float(5.00000000e-01) * M[27], D[74], L[9]);
	L[45] = fmaf(M[0], D[45], L[45]);
	L[9] = fmaf(float(5.00000000e-01) * M[13], D[47], L[9]);
	L[46] = fmaf(M[3], D[73], L[46]);
	L[9] = fmaf(float(5.00000000e-01) * M[28], D[75], L[9]);
	L[46] = fmaf(M[0], D[46], L[46]);
	L[9] = fmaf(M[14], D[48], L[9]);
	L[46] = fmaf(M[2], D[72], L[46]);
	L[9] = fmaf(M[5], D[28], L[9]);
	L[46] = fmaf(M[1], D[67], L[46]);
	L[9] = fmaf(float(1.66666667e-01) * M[29], D[76], L[9]);
	L[47] = fmaf(M[0], D[47], L[47]);
	L[9] = fmaf(float(5.00000000e-01) * M[15], D[49], L[9]);
	L[47] = fmaf(M[3], D[74], L[47]);
	L[9] = fmaf(M[6], D[29], L[9]);
	L[47] = fmaf(M[2], D[73], L[47]);
	L[9] = fmaf(M[1], D[15], L[9]);
	L[47] = fmaf(M[1], D[68], L[47]);
	L[9] = fmaf(M[8], D[33], L[9]);
	L[48] = fmaf(M[0], D[48], L[48]);
	L[9] = fmaf(float(4.16666667e-02) * M[20], D[61], L[9]);
	L[48] = fmaf(M[3], D[75], L[48]);
	L[9] = fmaf(float(1.66666667e-01) * M[21], D[64], L[9]);
	L[48] = fmaf(M[2], D[74], L[48]);
	L[9] = fmaf(float(1.66666667e-01) * M[22], D[65], L[9]);
	L[48] = fmaf(M[1], D[69], L[48]);
	L[9] = fmaf(float(1.66666667e-01) * M[10], D[40], L[9]);
	L[49] = fmaf(M[3], D[76], L[49]);
	L[9] = fmaf(float(2.50000000e-01) * M[23], D[68], L[9]);
	L[49] = fmaf(M[1], D[70], L[49]);
	L[9] = fmaf(float(5.00000000e-01) * M[24], D[69], L[9]);
	L[49] = fmaf(M[2], D[75], L[49]);
	L[9] = fmaf(float(5.00000000e-01) * M[11], D[43], L[9]);
	L[49] = fmaf(M[0], D[49], L[49]);
	L[9] = fmaf(float(2.50000000e-01) * M[25], D[70], L[9]);
	L[50] = fmaf(M[0], D[50], L[50]);
	L[9] = fmaf(float(5.00000000e-01) * M[12], D[44], L[9]);
	L[50] = fmaf(M[3], D[78], L[50]);
	L[9] = fmaf(float(5.00000000e-01) * M[4], D[25], L[9]);
	L[50] = fmaf(M[2], D[77], L[50]);
	L[9] = fmaf(float(1.66666667e-01) * M[26], D[73], L[9]);
	L[50] = fmaf(M[1], D[71], L[50]);
	L[9] = fmaf(M[3], D[19], L[9]);
	L[51] = fmaf(M[0], D[51], L[51]);
	L[9] = fmaf(float(5.00000000e-01) * M[9], D[34], L[9]);
	L[51] = fmaf(M[3], D[79], L[51]);
	L[9] = fmaf(float(1.66666667e-01) * M[19], D[55], L[9]);
	L[51] = fmaf(M[2], D[78], L[51]);
	L[9] = fmaf(float(4.16666667e-02) * M[34], D[83], L[9]);
	L[51] = fmaf(M[1], D[72], L[51]);
	L[9] = fmaf(M[2], D[18], L[9]);
	L[52] = fmaf(M[2], D[79], L[52]);
	L[9] = fmaf(float(5.00000000e-01) * M[18], D[54], L[9]);
	L[52] = fmaf(M[1], D[73], L[52]);
	L[10] = fmaf(M[5], D[36], L[10]);
	L[52] = fmaf(M[3], D[80], L[52]);
	L[10] = fmaf(M[6], D[37], L[10]);
	L[52] = fmaf(M[0], D[52], L[52]);
	L[10] = fmaf(M[0], D[10], L[10]);
	L[53] = fmaf(M[0], D[53], L[53]);
	L[10] = fmaf(M[3], D[22], L[10]);
	L[53] = fmaf(M[3], D[81], L[53]);
	L[10] = fmaf(float(1.66666667e-01) * M[16], D[62], L[10]);
	L[53] = fmaf(M[2], D[80], L[53]);
	L[10] = fmaf(float(5.00000000e-01) * M[17], D[63], L[10]);
	L[53] = fmaf(M[1], D[74], L[53]);
	L[10] = fmaf(float(5.00000000e-01) * M[7], D[38], L[10]);
	L[54] = fmaf(M[3], D[82], L[54]);
	L[10] = fmaf(float(5.00000000e-01) * M[18], D[64], L[10]);
	L[54] = fmaf(M[0], D[54], L[54]);
	L[10] = fmaf(M[8], D[39], L[10]);
	L[54] = fmaf(M[2], D[81], L[54]);
	L[10] = fmaf(float(5.00000000e-01) * M[9], D[40], L[10]);
	L[54] = fmaf(M[1], D[75], L[54]);
	L[10] = fmaf(float(1.66666667e-01) * M[19], D[65], L[10]);
	L[55] = fmaf(M[1], D[76], L[55]);
	L[10] = fmaf(float(1.66666667e-01) * M[10], D[56], L[10]);
	L[55] = fmaf(M[0], D[55], L[55]);
	L[10] = fmaf(float(5.00000000e-01) * M[11], D[57], L[10]);
	L[55] = fmaf(M[3], D[83], L[55]);
	L[10] = fmaf(float(5.00000000e-01) * M[12], D[58], L[10]);
	L[55] = fmaf(M[2], D[82], L[55]);
	L[10] = fmaf(float(5.00000000e-01) * M[4], D[35], L[10]);
	L[56] = fmaf(M[0], D[56], L[56]);
	L[10] = fmaf(float(5.00000000e-01) * M[13], D[59], L[10]);
	L[57] = fmaf(M[0], D[57], L[57]);
	L[10] = fmaf(M[14], D[60], L[10]);
	L[58] = fmaf(M[0], D[58], L[58]);
	L[10] = fmaf(float(5.00000000e-01) * M[15], D[61], L[10]);
	L[59] = fmaf(M[0], D[59], L[59]);
	L[10] = fmaf(M[1], D[20], L[10]);
	L[60] = fmaf(M[0], D[60], L[60]);
	L[10] = fmaf(M[2], D[21], L[10]);
	L[61] = fmaf(M[0], D[61], L[61]);
	L[11] = fmaf(float(1.66666667e-01) * M[16], D[66], L[11]);
	L[62] = fmaf(M[0], D[62], L[62]);
	L[11] = fmaf(float(1.66666667e-01) * M[19], D[69], L[11]);
	L[63] = fmaf(M[0], D[63], L[63]);
	L[11] = fmaf(M[1], D[21], L[11]);
	L[64] = fmaf(M[0], D[64], L[64]);
	L[11] = fmaf(M[6], D[39], L[11]);
	L[65] = fmaf(M[0], D[65], L[65]);
	L[11] = fmaf(float(5.00000000e-01) * M[15], D[64], L[11]);
	L[66] = fmaf(M[0], D[66], L[66]);
	L[11] = fmaf(M[5], D[38], L[11]);
	L[67] = fmaf(M[0], D[67], L[67]);
	L[11] = fmaf(M[14], D[63], L[11]);
	L[68] = fmaf(M[0], D[68], L[68]);
	L[11] = fmaf(float(5.00000000e-01) * M[13], D[62], L[11]);
	L[69] = fmaf(M[0], D[69], L[69]);
	L[11] = fmaf(float(5.00000000e-01) * M[4], D[36], L[11]);
	L[70] = fmaf(M[0], D[70], L[70]);
	L[11] = fmaf(float(5.00000000e-01) * M[12], D[60], L[11]);
	L[71] = fmaf(M[0], D[71], L[71]);
	L[11] = fmaf(float(5.00000000e-01) * M[17], D[67], L[11]);
	L[72] = fmaf(M[0], D[72], L[72]);
	L[11] = fmaf(float(5.00000000e-01) * M[7], D[41], L[11]);
	L[73] = fmaf(M[0], D[73], L[73]);
	L[11] = fmaf(float(5.00000000e-01) * M[18], D[68], L[11]);
	L[74] = fmaf(M[0], D[74], L[74]);
	L[11] = fmaf(M[8], D[42], L[11]);
	L[75] = fmaf(M[0], D[75], L[75]);
	L[11] = fmaf(M[2], D[23], L[11]);
	L[76] = fmaf(M[0], D[76], L[76]);
	L[11] = fmaf(float(5.00000000e-01) * M[9], D[43], L[11]);
	L[77] = fmaf(M[0], D[77], L[77]);
	L[11] = fmaf(M[3], D[24], L[11]);
	L[78] = fmaf(M[0], D[78], L[78]);
	L[11] = fmaf(M[0], D[11], L[11]);
	L[79] = fmaf(M[0], D[79], L[79]);
	L[11] = fmaf(float(1.66666667e-01) * M[10], D[57], L[11]);
	L[80] = fmaf(M[0], D[80], L[80]);
	L[11] = fmaf(float(5.00000000e-01) * M[11], D[59], L[11]);
	L[81] = fmaf(M[0], D[81], L[81]);
	L[12] = fmaf(M[5], D[39], L[12]);
	L[82] = fmaf(M[0], D[82], L[82]);
	L[12] = fmaf(float(1.66666667e-01) * M[10], D[58], L[12]);
	L[83] = fmaf(M[0], D[83], L[83]);
	return 2151 + do_phi * 160;
}

inline array<float, 56> P2M_kernel(array<float, NDIM>& X) {
	array<float, 56> M;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	M[0] = float(1);
	M[1] = X[0];
	M[2] = X[1];
	M[3] = X[2];
	M[9] = M[3] * M[3];
	M[8] = M[2] * M[3];
	M[7] = M[2] * M[2];
	M[6] = M[1] * M[3];
	M[5] = M[1] * M[2];
	M[4] = M[1] * M[1];
	M[19] = M[9] * M[3];
	M[18] = M[8] * M[3];
	M[17] = M[8] * M[2];
	M[16] = M[7] * M[2];
	M[15] = M[6] * M[3];
	M[14] = M[5] * M[3];
	M[13] = M[5] * M[2];
	M[12] = M[6] * M[1];
	M[11] = M[5] * M[1];
	M[10] = M[4] * M[1];
	M[34] = M[9] * M[9];
	M[33] = M[8] * M[9];
	M[32] = M[8] * M[8];
	M[31] = M[8] * M[7];
	M[30] = M[7] * M[7];
	M[29] = M[6] * M[9];
	M[28] = M[5] * M[9];
	M[27] = M[5] * M[8];
	M[26] = M[5] * M[7];
	M[25] = M[6] * M[6];
	M[24] = M[5] * M[6];
	M[23] = M[5] * M[5];
	M[22] = M[6] * M[4];
	M[21] = M[5] * M[4];
	M[20] = M[4] * M[4];
	M[55] = M[19] * M[9];
	M[54] = M[18] * M[9];
	M[53] = M[17] * M[9];
	M[52] = M[17] * M[8];
	M[51] = M[17] * M[7];
	M[50] = M[16] * M[7];
	M[49] = M[15] * M[9];
	M[48] = M[14] * M[9];
	M[47] = M[14] * M[8];
	M[46] = M[14] * M[7];
	M[45] = M[13] * M[7];
	M[44] = M[12] * M[9];
	M[43] = M[14] * M[6];
	M[42] = M[14] * M[5];
	M[41] = M[11] * M[7];
	M[40] = M[12] * M[6];
	M[39] = M[14] * M[4];
	M[38] = M[11] * M[5];
	M[37] = M[12] * M[4];
	M[36] = M[11] * M[4];
	M[35] = M[10] * M[4];
	return M;
/* FLOPS = 55*/
}

inline array<float, 56> M2M_kernel(const array<float,56>& Ma, array<float, NDIM>& X) {
	array<float, 56> Mb;
	X[0] = -X[0];
	X[1] = -X[1];
	X[2] = -X[2];
	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	const float x005 = x003 * x002;
	const float x014 = x012 * x002;
	const float x023 = x021 * x002;
	const float x032 = x021 * x011;
	const float x041 = x021 * x020;
	const float x050 = x030 * x020;
	const float x104 = x102 * x002;
	const float x113 = x111 * x002;
	const float x122 = x111 * x011;
	const float x131 = x111 * x020;
	const float x140 = x120 * x020;
	const float x203 = x201 * x002;
	const float x212 = x111 * x101;
	const float x221 = x111 * x110;
	const float x230 = x210 * x020;
	const float x302 = x201 * x101;
	const float x311 = x111 * x200;
	const float x320 = x210 * x110;
	const float x401 = x201 * x200;
	const float x410 = x210 * x200;
	const float x500 = x300 * x200;
	Mb[0] = Ma[0];
	Mb[1] = Ma[1];
	Mb[2] = Ma[2];
	Mb[3] = Ma[3];
	Mb[4] = Ma[4];
	Mb[5] = Ma[5];
	Mb[6] = Ma[6];
	Mb[7] = Ma[7];
	Mb[8] = Ma[8];
	Mb[9] = Ma[9];
	Mb[10] = Ma[10];
	Mb[11] = Ma[11];
	Mb[12] = Ma[12];
	Mb[13] = Ma[13];
	Mb[14] = Ma[14];
	Mb[15] = Ma[15];
	Mb[16] = Ma[16];
	Mb[17] = Ma[17];
	Mb[18] = Ma[18];
	Mb[19] = Ma[19];
	Mb[20] = Ma[20];
	Mb[21] = Ma[21];
	Mb[22] = Ma[22];
	Mb[23] = Ma[23];
	Mb[24] = Ma[24];
	Mb[25] = Ma[25];
	Mb[26] = Ma[26];
	Mb[27] = Ma[27];
	Mb[28] = Ma[28];
	Mb[29] = Ma[29];
	Mb[30] = Ma[30];
	Mb[31] = Ma[31];
	Mb[32] = Ma[32];
	Mb[33] = Ma[33];
	Mb[34] = Ma[34];
	Mb[35] = Ma[35];
	Mb[36] = Ma[36];
	Mb[37] = Ma[37];
	Mb[38] = Ma[38];
	Mb[39] = Ma[39];
	Mb[40] = Ma[40];
	Mb[41] = Ma[41];
	Mb[42] = Ma[42];
	Mb[43] = Ma[43];
	Mb[44] = Ma[44];
	Mb[45] = Ma[45];
	Mb[46] = Ma[46];
	Mb[47] = Ma[47];
	Mb[48] = Ma[48];
	Mb[49] = Ma[49];
	Mb[50] = Ma[50];
	Mb[51] = Ma[51];
	Mb[52] = Ma[52];
	Mb[53] = Ma[53];
	Mb[54] = Ma[54];
	Mb[55] = Ma[55];
	Mb[1] = fmaf( x100, Ma[0], Mb[1]);
	Mb[38] = fmaf(float(6.00000000e+00) * x210, Ma[5], Mb[38]);
	Mb[2] = fmaf( x010, Ma[0], Mb[2]);
	Mb[38] = fmaf(float(3.00000000e+00) * x200, Ma[13], Mb[38]);
	Mb[3] = fmaf( x001, Ma[0], Mb[3]);
	Mb[38] = fmaf(float(3.00000000e+00) * x120, Ma[4], Mb[38]);
	Mb[4] = fmaf(float(2.00000000e+00) * x100, Ma[1], Mb[4]);
	Mb[38] = fmaf(float(3.00000000e+00) * x100, Ma[23], Mb[38]);
	Mb[4] = fmaf( x200, Ma[0], Mb[4]);
	Mb[38] = fmaf( x020, Ma[10], Mb[38]);
	Mb[5] = fmaf( x010, Ma[1], Mb[5]);
	Mb[38] = fmaf(float(2.00000000e+00) * x010, Ma[21], Mb[38]);
	Mb[5] = fmaf( x100, Ma[2], Mb[5]);
	Mb[39] = fmaf(float(3.00000000e+00) * x101, Ma[11], Mb[39]);
	Mb[5] = fmaf( x110, Ma[0], Mb[5]);
	Mb[39] = fmaf( x311, Ma[0], Mb[39]);
	Mb[6] = fmaf( x001, Ma[1], Mb[6]);
	Mb[39] = fmaf( x310, Ma[3], Mb[39]);
	Mb[6] = fmaf( x100, Ma[3], Mb[6]);
	Mb[39] = fmaf( x301, Ma[2], Mb[39]);
	Mb[6] = fmaf( x101, Ma[0], Mb[6]);
	Mb[39] = fmaf( x300, Ma[8], Mb[39]);
	Mb[7] = fmaf(float(2.00000000e+00) * x010, Ma[2], Mb[7]);
	Mb[39] = fmaf(float(3.00000000e+00) * x211, Ma[1], Mb[39]);
	Mb[7] = fmaf( x020, Ma[0], Mb[7]);
	Mb[39] = fmaf(float(3.00000000e+00) * x210, Ma[6], Mb[39]);
	Mb[8] = fmaf( x001, Ma[2], Mb[8]);
	Mb[39] = fmaf(float(3.00000000e+00) * x201, Ma[5], Mb[39]);
	Mb[8] = fmaf( x010, Ma[3], Mb[8]);
	Mb[39] = fmaf(float(3.00000000e+00) * x111, Ma[4], Mb[39]);
	Mb[8] = fmaf( x011, Ma[0], Mb[8]);
	Mb[39] = fmaf(float(3.00000000e+00) * x110, Ma[12], Mb[39]);
	Mb[9] = fmaf(float(2.00000000e+00) * x001, Ma[3], Mb[9]);
	Mb[39] = fmaf( x001, Ma[21], Mb[39]);
	Mb[9] = fmaf( x002, Ma[0], Mb[9]);
	Mb[39] = fmaf(float(3.00000000e+00) * x100, Ma[24], Mb[39]);
	Mb[10] = fmaf(float(3.00000000e+00) * x100, Ma[4], Mb[10]);
	Mb[39] = fmaf( x011, Ma[10], Mb[39]);
	Mb[10] = fmaf(float(3.00000000e+00) * x200, Ma[1], Mb[10]);
	Mb[39] = fmaf( x010, Ma[22], Mb[39]);
	Mb[10] = fmaf( x300, Ma[0], Mb[10]);
	Mb[39] = fmaf(float(3.00000000e+00) * x200, Ma[14], Mb[39]);
	Mb[11] = fmaf( x010, Ma[4], Mb[11]);
	Mb[40] = fmaf(float(3.00000000e+00) * x200, Ma[15], Mb[40]);
	Mb[11] = fmaf( x210, Ma[0], Mb[11]);
	Mb[40] = fmaf( x302, Ma[0], Mb[40]);
	Mb[11] = fmaf( x200, Ma[2], Mb[11]);
	Mb[40] = fmaf(float(2.00000000e+00) * x301, Ma[3], Mb[40]);
	Mb[11] = fmaf(float(2.00000000e+00) * x100, Ma[5], Mb[11]);
	Mb[40] = fmaf( x300, Ma[9], Mb[40]);
	Mb[11] = fmaf(float(2.00000000e+00) * x110, Ma[1], Mb[11]);
	Mb[40] = fmaf(float(3.00000000e+00) * x202, Ma[1], Mb[40]);
	Mb[12] = fmaf( x001, Ma[4], Mb[12]);
	Mb[40] = fmaf(float(6.00000000e+00) * x201, Ma[6], Mb[40]);
	Mb[12] = fmaf(float(2.00000000e+00) * x100, Ma[6], Mb[12]);
	Mb[40] = fmaf(float(3.00000000e+00) * x102, Ma[4], Mb[40]);
	Mb[12] = fmaf(float(2.00000000e+00) * x101, Ma[1], Mb[12]);
	Mb[40] = fmaf(float(6.00000000e+00) * x101, Ma[12], Mb[40]);
	Mb[12] = fmaf( x200, Ma[3], Mb[12]);
	Mb[40] = fmaf(float(3.00000000e+00) * x100, Ma[25], Mb[40]);
	Mb[12] = fmaf( x201, Ma[0], Mb[12]);
	Mb[40] = fmaf( x002, Ma[10], Mb[40]);
	Mb[13] = fmaf( x100, Ma[7], Mb[13]);
	Mb[40] = fmaf(float(2.00000000e+00) * x001, Ma[22], Mb[40]);
	Mb[13] = fmaf( x120, Ma[0], Mb[13]);
	Mb[41] = fmaf(float(2.00000000e+00) * x100, Ma[26], Mb[41]);
	Mb[13] = fmaf(float(2.00000000e+00) * x110, Ma[2], Mb[13]);
	Mb[41] = fmaf( x230, Ma[0], Mb[41]);
	Mb[13] = fmaf( x020, Ma[1], Mb[13]);
	Mb[41] = fmaf(float(3.00000000e+00) * x220, Ma[2], Mb[41]);
	Mb[13] = fmaf(float(2.00000000e+00) * x010, Ma[5], Mb[13]);
	Mb[41] = fmaf(float(3.00000000e+00) * x210, Ma[7], Mb[41]);
	Mb[14] = fmaf( x001, Ma[5], Mb[14]);
	Mb[41] = fmaf( x200, Ma[16], Mb[41]);
	Mb[14] = fmaf( x010, Ma[6], Mb[14]);
	Mb[41] = fmaf(float(2.00000000e+00) * x130, Ma[1], Mb[41]);
	Mb[14] = fmaf( x111, Ma[0], Mb[14]);
	Mb[41] = fmaf(float(6.00000000e+00) * x110, Ma[13], Mb[41]);
	Mb[14] = fmaf( x110, Ma[3], Mb[14]);
	Mb[41] = fmaf(float(3.00000000e+00) * x010, Ma[23], Mb[41]);
	Mb[14] = fmaf( x101, Ma[2], Mb[14]);
	Mb[41] = fmaf( x030, Ma[4], Mb[41]);
	Mb[14] = fmaf( x100, Ma[8], Mb[14]);
	Mb[41] = fmaf(float(3.00000000e+00) * x020, Ma[11], Mb[41]);
	Mb[14] = fmaf( x011, Ma[1], Mb[14]);
	Mb[41] = fmaf(float(6.00000000e+00) * x120, Ma[5], Mb[41]);
	Mb[15] = fmaf( x100, Ma[9], Mb[15]);
	Mb[42] = fmaf(float(2.00000000e+00) * x121, Ma[1], Mb[42]);
	Mb[15] = fmaf( x002, Ma[1], Mb[15]);
	Mb[42] = fmaf( x221, Ma[0], Mb[42]);
	Mb[15] = fmaf(float(2.00000000e+00) * x101, Ma[3], Mb[15]);
	Mb[42] = fmaf( x220, Ma[3], Mb[42]);
	Mb[15] = fmaf( x102, Ma[0], Mb[15]);
	Mb[42] = fmaf(float(2.00000000e+00) * x211, Ma[2], Mb[42]);
	Mb[15] = fmaf(float(2.00000000e+00) * x001, Ma[6], Mb[15]);
	Mb[42] = fmaf(float(2.00000000e+00) * x210, Ma[8], Mb[42]);
	Mb[16] = fmaf(float(3.00000000e+00) * x010, Ma[7], Mb[16]);
	Mb[42] = fmaf( x201, Ma[7], Mb[42]);
	Mb[16] = fmaf(float(3.00000000e+00) * x020, Ma[2], Mb[16]);
	Mb[42] = fmaf( x200, Ma[17], Mb[42]);
	Mb[16] = fmaf( x030, Ma[0], Mb[16]);
	Mb[42] = fmaf(float(2.00000000e+00) * x120, Ma[6], Mb[42]);
	Mb[17] = fmaf( x001, Ma[7], Mb[17]);
	Mb[42] = fmaf(float(4.00000000e+00) * x110, Ma[14], Mb[42]);
	Mb[17] = fmaf(float(2.00000000e+00) * x010, Ma[8], Mb[17]);
	Mb[42] = fmaf(float(4.00000000e+00) * x111, Ma[5], Mb[42]);
	Mb[17] = fmaf(float(2.00000000e+00) * x011, Ma[2], Mb[17]);
	Mb[42] = fmaf(float(2.00000000e+00) * x101, Ma[13], Mb[42]);
	Mb[17] = fmaf( x020, Ma[3], Mb[17]);
	Mb[42] = fmaf(float(2.00000000e+00) * x100, Ma[27], Mb[42]);
	Mb[17] = fmaf( x021, Ma[0], Mb[17]);
	Mb[42] = fmaf( x021, Ma[4], Mb[42]);
	Mb[18] = fmaf( x002, Ma[2], Mb[18]);
	Mb[42] = fmaf( x020, Ma[12], Mb[42]);
	Mb[18] = fmaf( x012, Ma[0], Mb[18]);
	Mb[42] = fmaf(float(2.00000000e+00) * x011, Ma[11], Mb[42]);
	Mb[18] = fmaf(float(2.00000000e+00) * x011, Ma[3], Mb[18]);
	Mb[42] = fmaf(float(2.00000000e+00) * x010, Ma[24], Mb[42]);
	Mb[18] = fmaf( x010, Ma[9], Mb[18]);
	Mb[42] = fmaf( x001, Ma[23], Mb[42]);
	Mb[18] = fmaf(float(2.00000000e+00) * x001, Ma[8], Mb[18]);
	Mb[43] = fmaf(float(4.00000000e+00) * x111, Ma[6], Mb[43]);
	Mb[19] = fmaf(float(3.00000000e+00) * x001, Ma[9], Mb[19]);
	Mb[43] = fmaf(float(2.00000000e+00) * x112, Ma[1], Mb[43]);
	Mb[19] = fmaf(float(3.00000000e+00) * x002, Ma[3], Mb[19]);
	Mb[43] = fmaf( x200, Ma[18], Mb[43]);
	Mb[19] = fmaf( x003, Ma[0], Mb[19]);
	Mb[43] = fmaf(float(2.00000000e+00) * x201, Ma[8], Mb[43]);
	Mb[20] = fmaf(float(4.00000000e+00) * x100, Ma[10], Mb[20]);
	Mb[43] = fmaf( x202, Ma[2], Mb[43]);
	Mb[20] = fmaf(float(6.00000000e+00) * x200, Ma[4], Mb[20]);
	Mb[43] = fmaf( x210, Ma[9], Mb[43]);
	Mb[20] = fmaf(float(4.00000000e+00) * x300, Ma[1], Mb[20]);
	Mb[43] = fmaf(float(2.00000000e+00) * x211, Ma[3], Mb[43]);
	Mb[20] = fmaf( x400, Ma[0], Mb[20]);
	Mb[43] = fmaf( x212, Ma[0], Mb[43]);
	Mb[21] = fmaf(float(3.00000000e+00) * x210, Ma[1], Mb[21]);
	Mb[43] = fmaf(float(2.00000000e+00) * x011, Ma[12], Mb[43]);
	Mb[21] = fmaf( x310, Ma[0], Mb[21]);
	Mb[43] = fmaf(float(2.00000000e+00) * x102, Ma[5], Mb[43]);
	Mb[21] = fmaf( x300, Ma[2], Mb[21]);
	Mb[43] = fmaf(float(4.00000000e+00) * x101, Ma[14], Mb[43]);
	Mb[21] = fmaf(float(3.00000000e+00) * x200, Ma[5], Mb[21]);
	Mb[43] = fmaf(float(2.00000000e+00) * x100, Ma[28], Mb[43]);
	Mb[21] = fmaf(float(3.00000000e+00) * x110, Ma[4], Mb[21]);
	Mb[43] = fmaf( x012, Ma[4], Mb[43]);
	Mb[21] = fmaf(float(3.00000000e+00) * x100, Ma[11], Mb[21]);
	Mb[43] = fmaf( x010, Ma[25], Mb[43]);
	Mb[21] = fmaf( x010, Ma[10], Mb[21]);
	Mb[43] = fmaf( x002, Ma[11], Mb[43]);
	Mb[22] = fmaf( x001, Ma[10], Mb[22]);
	Mb[43] = fmaf(float(2.00000000e+00) * x001, Ma[24], Mb[43]);
	Mb[22] = fmaf(float(3.00000000e+00) * x100, Ma[12], Mb[22]);
	Mb[43] = fmaf(float(2.00000000e+00) * x110, Ma[15], Mb[43]);
	Mb[22] = fmaf(float(3.00000000e+00) * x101, Ma[4], Mb[22]);
	Mb[44] = fmaf(float(3.00000000e+00) * x202, Ma[3], Mb[44]);
	Mb[22] = fmaf(float(3.00000000e+00) * x200, Ma[6], Mb[22]);
	Mb[44] = fmaf( x203, Ma[0], Mb[44]);
	Mb[22] = fmaf(float(3.00000000e+00) * x201, Ma[1], Mb[22]);
	Mb[44] = fmaf(float(3.00000000e+00) * x201, Ma[9], Mb[44]);
	Mb[22] = fmaf( x300, Ma[3], Mb[22]);
	Mb[44] = fmaf( x200, Ma[19], Mb[44]);
	Mb[22] = fmaf( x301, Ma[0], Mb[22]);
	Mb[44] = fmaf(float(2.00000000e+00) * x103, Ma[1], Mb[44]);
	Mb[23] = fmaf( x020, Ma[4], Mb[23]);
	Mb[44] = fmaf(float(6.00000000e+00) * x102, Ma[6], Mb[44]);
	Mb[23] = fmaf( x220, Ma[0], Mb[23]);
	Mb[44] = fmaf(float(6.00000000e+00) * x101, Ma[15], Mb[44]);
	Mb[23] = fmaf(float(2.00000000e+00) * x210, Ma[2], Mb[23]);
	Mb[44] = fmaf(float(2.00000000e+00) * x100, Ma[29], Mb[44]);
	Mb[23] = fmaf( x200, Ma[7], Mb[23]);
	Mb[44] = fmaf( x003, Ma[4], Mb[44]);
	Mb[23] = fmaf(float(2.00000000e+00) * x120, Ma[1], Mb[23]);
	Mb[44] = fmaf(float(3.00000000e+00) * x002, Ma[12], Mb[44]);
	Mb[23] = fmaf(float(4.00000000e+00) * x110, Ma[5], Mb[23]);
	Mb[44] = fmaf(float(3.00000000e+00) * x001, Ma[25], Mb[44]);
	Mb[23] = fmaf(float(2.00000000e+00) * x100, Ma[13], Mb[23]);
	Mb[45] = fmaf(float(4.00000000e+00) * x010, Ma[26], Mb[45]);
	Mb[23] = fmaf(float(2.00000000e+00) * x010, Ma[11], Mb[23]);
	Mb[45] = fmaf(float(4.00000000e+00) * x030, Ma[5], Mb[45]);
	Mb[24] = fmaf(float(2.00000000e+00) * x100, Ma[14], Mb[24]);
	Mb[45] = fmaf( x040, Ma[1], Mb[45]);
	Mb[24] = fmaf( x211, Ma[0], Mb[24]);
	Mb[45] = fmaf( x100, Ma[30], Mb[45]);
	Mb[24] = fmaf( x210, Ma[3], Mb[24]);
	Mb[45] = fmaf(float(4.00000000e+00) * x110, Ma[16], Mb[45]);
	Mb[24] = fmaf( x201, Ma[2], Mb[24]);
	Mb[45] = fmaf(float(6.00000000e+00) * x120, Ma[7], Mb[45]);
	Mb[24] = fmaf( x200, Ma[8], Mb[24]);
	Mb[45] = fmaf(float(4.00000000e+00) * x130, Ma[2], Mb[45]);
	Mb[24] = fmaf(float(2.00000000e+00) * x111, Ma[1], Mb[24]);
	Mb[45] = fmaf( x140, Ma[0], Mb[45]);
	Mb[24] = fmaf(float(2.00000000e+00) * x101, Ma[5], Mb[24]);
	Mb[45] = fmaf(float(6.00000000e+00) * x020, Ma[13], Mb[45]);
	Mb[24] = fmaf( x011, Ma[4], Mb[24]);
	Mb[46] = fmaf( x101, Ma[16], Mb[46]);
	Mb[24] = fmaf( x010, Ma[12], Mb[24]);
	Mb[46] = fmaf( x131, Ma[0], Mb[46]);
	Mb[24] = fmaf( x001, Ma[11], Mb[24]);
	Mb[46] = fmaf( x130, Ma[3], Mb[46]);
	Mb[24] = fmaf(float(2.00000000e+00) * x110, Ma[6], Mb[24]);
	Mb[46] = fmaf(float(3.00000000e+00) * x121, Ma[2], Mb[46]);
	Mb[25] = fmaf(float(2.00000000e+00) * x102, Ma[1], Mb[25]);
	Mb[46] = fmaf(float(3.00000000e+00) * x120, Ma[8], Mb[46]);
	Mb[25] = fmaf( x202, Ma[0], Mb[25]);
	Mb[46] = fmaf(float(3.00000000e+00) * x111, Ma[7], Mb[46]);
	Mb[25] = fmaf(float(2.00000000e+00) * x201, Ma[3], Mb[25]);
	Mb[46] = fmaf(float(3.00000000e+00) * x110, Ma[17], Mb[46]);
	Mb[25] = fmaf( x200, Ma[9], Mb[25]);
	Mb[46] = fmaf( x100, Ma[31], Mb[46]);
	Mb[25] = fmaf(float(4.00000000e+00) * x101, Ma[6], Mb[25]);
	Mb[46] = fmaf( x031, Ma[1], Mb[46]);
	Mb[25] = fmaf(float(2.00000000e+00) * x100, Ma[15], Mb[25]);
	Mb[46] = fmaf( x030, Ma[6], Mb[46]);
	Mb[25] = fmaf( x002, Ma[4], Mb[25]);
	Mb[46] = fmaf(float(3.00000000e+00) * x021, Ma[5], Mb[46]);
	Mb[25] = fmaf(float(2.00000000e+00) * x001, Ma[12], Mb[25]);
	Mb[46] = fmaf(float(3.00000000e+00) * x020, Ma[14], Mb[46]);
	Mb[26] = fmaf( x030, Ma[1], Mb[26]);
	Mb[46] = fmaf(float(3.00000000e+00) * x011, Ma[13], Mb[46]);
	Mb[26] = fmaf( x100, Ma[16], Mb[26]);
	Mb[46] = fmaf(float(3.00000000e+00) * x010, Ma[27], Mb[46]);
	Mb[26] = fmaf(float(3.00000000e+00) * x110, Ma[7], Mb[26]);
	Mb[46] = fmaf( x001, Ma[26], Mb[46]);
	Mb[26] = fmaf(float(3.00000000e+00) * x120, Ma[2], Mb[26]);
	Mb[47] = fmaf(float(2.00000000e+00) * x101, Ma[17], Mb[47]);
	Mb[26] = fmaf( x130, Ma[0], Mb[26]);
	Mb[47] = fmaf( x102, Ma[7], Mb[47]);
	Mb[26] = fmaf(float(3.00000000e+00) * x020, Ma[5], Mb[26]);
	Mb[47] = fmaf(float(2.00000000e+00) * x110, Ma[18], Mb[47]);
	Mb[26] = fmaf(float(3.00000000e+00) * x010, Ma[13], Mb[26]);
	Mb[47] = fmaf(float(4.00000000e+00) * x111, Ma[8], Mb[47]);
	Mb[27] = fmaf(float(2.00000000e+00) * x111, Ma[2], Mb[27]);
	Mb[47] = fmaf(float(2.00000000e+00) * x112, Ma[2], Mb[47]);
	Mb[27] = fmaf(float(2.00000000e+00) * x110, Ma[8], Mb[27]);
	Mb[47] = fmaf( x120, Ma[9], Mb[47]);
	Mb[27] = fmaf( x101, Ma[7], Mb[27]);
	Mb[47] = fmaf(float(2.00000000e+00) * x121, Ma[3], Mb[47]);
	Mb[27] = fmaf( x100, Ma[17], Mb[27]);
	Mb[47] = fmaf( x122, Ma[0], Mb[47]);
	Mb[27] = fmaf( x021, Ma[1], Mb[27]);
	Mb[47] = fmaf(float(2.00000000e+00) * x001, Ma[27], Mb[47]);
	Mb[27] = fmaf( x020, Ma[6], Mb[27]);
	Mb[47] = fmaf( x100, Ma[32], Mb[47]);
	Mb[27] = fmaf(float(2.00000000e+00) * x011, Ma[5], Mb[27]);
	Mb[47] = fmaf( x022, Ma[1], Mb[47]);
	Mb[27] = fmaf(float(2.00000000e+00) * x010, Ma[14], Mb[27]);
	Mb[47] = fmaf(float(2.00000000e+00) * x021, Ma[6], Mb[47]);
	Mb[27] = fmaf( x001, Ma[13], Mb[27]);
	Mb[47] = fmaf( x020, Ma[15], Mb[47]);
	Mb[27] = fmaf( x120, Ma[3], Mb[27]);
	Mb[47] = fmaf(float(2.00000000e+00) * x012, Ma[5], Mb[47]);
	Mb[27] = fmaf( x121, Ma[0], Mb[27]);
	Mb[47] = fmaf(float(4.00000000e+00) * x011, Ma[14], Mb[47]);
	Mb[28] = fmaf( x010, Ma[15], Mb[28]);
	Mb[47] = fmaf(float(2.00000000e+00) * x010, Ma[28], Mb[47]);
	Mb[28] = fmaf( x002, Ma[5], Mb[28]);
	Mb[47] = fmaf( x002, Ma[13], Mb[47]);
	Mb[28] = fmaf( x112, Ma[0], Mb[28]);
	Mb[48] = fmaf( x113, Ma[0], Mb[48]);
	Mb[28] = fmaf(float(2.00000000e+00) * x111, Ma[3], Mb[28]);
	Mb[48] = fmaf(float(3.00000000e+00) * x112, Ma[3], Mb[48]);
	Mb[28] = fmaf( x110, Ma[9], Mb[28]);
	Mb[48] = fmaf(float(3.00000000e+00) * x111, Ma[9], Mb[48]);
	Mb[28] = fmaf( x102, Ma[2], Mb[28]);
	Mb[48] = fmaf( x110, Ma[19], Mb[48]);
	Mb[28] = fmaf(float(2.00000000e+00) * x101, Ma[8], Mb[28]);
	Mb[48] = fmaf( x103, Ma[2], Mb[48]);
	Mb[28] = fmaf( x100, Ma[18], Mb[28]);
	Mb[48] = fmaf(float(3.00000000e+00) * x102, Ma[8], Mb[48]);
	Mb[28] = fmaf( x012, Ma[1], Mb[28]);
	Mb[48] = fmaf(float(3.00000000e+00) * x101, Ma[18], Mb[48]);
	Mb[28] = fmaf(float(2.00000000e+00) * x011, Ma[6], Mb[28]);
	Mb[48] = fmaf( x013, Ma[1], Mb[48]);
	Mb[28] = fmaf(float(2.00000000e+00) * x001, Ma[14], Mb[28]);
	Mb[48] = fmaf( x100, Ma[33], Mb[48]);
	Mb[29] = fmaf(float(3.00000000e+00) * x001, Ma[15], Mb[29]);
	Mb[48] = fmaf(float(3.00000000e+00) * x001, Ma[28], Mb[48]);
	Mb[29] = fmaf(float(3.00000000e+00) * x002, Ma[6], Mb[29]);
	Mb[48] = fmaf(float(3.00000000e+00) * x002, Ma[14], Mb[48]);
	Mb[29] = fmaf( x003, Ma[1], Mb[29]);
	Mb[48] = fmaf( x003, Ma[5], Mb[48]);
	Mb[29] = fmaf( x100, Ma[19], Mb[29]);
	Mb[48] = fmaf(float(3.00000000e+00) * x011, Ma[15], Mb[48]);
	Mb[29] = fmaf(float(3.00000000e+00) * x101, Ma[9], Mb[29]);
	Mb[48] = fmaf(float(3.00000000e+00) * x012, Ma[6], Mb[48]);
	Mb[29] = fmaf(float(3.00000000e+00) * x102, Ma[3], Mb[29]);
	Mb[48] = fmaf( x010, Ma[29], Mb[48]);
	Mb[29] = fmaf( x103, Ma[0], Mb[29]);
	Mb[49] = fmaf(float(4.00000000e+00) * x103, Ma[3], Mb[49]);
	Mb[30] = fmaf( x040, Ma[0], Mb[30]);
	Mb[49] = fmaf( x104, Ma[0], Mb[49]);
	Mb[30] = fmaf(float(6.00000000e+00) * x020, Ma[7], Mb[30]);
	Mb[49] = fmaf(float(6.00000000e+00) * x102, Ma[9], Mb[49]);
	Mb[30] = fmaf(float(4.00000000e+00) * x030, Ma[2], Mb[30]);
	Mb[49] = fmaf(float(4.00000000e+00) * x101, Ma[19], Mb[49]);
	Mb[30] = fmaf(float(4.00000000e+00) * x010, Ma[16], Mb[30]);
	Mb[49] = fmaf( x100, Ma[34], Mb[49]);
	Mb[31] = fmaf( x001, Ma[16], Mb[31]);
	Mb[49] = fmaf( x004, Ma[1], Mb[49]);
	Mb[31] = fmaf(float(3.00000000e+00) * x010, Ma[17], Mb[31]);
	Mb[49] = fmaf(float(4.00000000e+00) * x003, Ma[6], Mb[49]);
	Mb[31] = fmaf(float(3.00000000e+00) * x011, Ma[7], Mb[31]);
	Mb[49] = fmaf(float(6.00000000e+00) * x002, Ma[15], Mb[49]);
	Mb[31] = fmaf(float(3.00000000e+00) * x020, Ma[8], Mb[31]);
	Mb[49] = fmaf(float(4.00000000e+00) * x001, Ma[29], Mb[49]);
	Mb[31] = fmaf(float(3.00000000e+00) * x021, Ma[2], Mb[31]);
	Mb[50] = fmaf(float(5.00000000e+00) * x010, Ma[30], Mb[50]);
	Mb[31] = fmaf( x030, Ma[3], Mb[31]);
	Mb[50] = fmaf(float(1.00000000e+01) * x020, Ma[16], Mb[50]);
	Mb[31] = fmaf( x031, Ma[0], Mb[31]);
	Mb[50] = fmaf(float(1.00000000e+01) * x030, Ma[7], Mb[50]);
	Mb[32] = fmaf(float(2.00000000e+00) * x021, Ma[3], Mb[32]);
	Mb[50] = fmaf(float(5.00000000e+00) * x040, Ma[2], Mb[50]);
	Mb[32] = fmaf( x022, Ma[0], Mb[32]);
	Mb[50] = fmaf( x050, Ma[0], Mb[50]);
	Mb[32] = fmaf( x020, Ma[9], Mb[32]);
	Mb[51] = fmaf( x041, Ma[0], Mb[51]);
	Mb[32] = fmaf(float(2.00000000e+00) * x012, Ma[2], Mb[32]);
	Mb[51] = fmaf( x040, Ma[3], Mb[51]);
	Mb[32] = fmaf(float(2.00000000e+00) * x010, Ma[18], Mb[32]);
	Mb[51] = fmaf(float(4.00000000e+00) * x031, Ma[2], Mb[51]);
	Mb[32] = fmaf( x002, Ma[7], Mb[32]);
	Mb[51] = fmaf(float(4.00000000e+00) * x030, Ma[8], Mb[51]);
	Mb[32] = fmaf(float(2.00000000e+00) * x001, Ma[17], Mb[32]);
	Mb[51] = fmaf(float(6.00000000e+00) * x020, Ma[17], Mb[51]);
	Mb[32] = fmaf(float(4.00000000e+00) * x011, Ma[8], Mb[32]);
	Mb[51] = fmaf(float(4.00000000e+00) * x011, Ma[16], Mb[51]);
	Mb[33] = fmaf(float(3.00000000e+00) * x012, Ma[3], Mb[33]);
	Mb[51] = fmaf(float(4.00000000e+00) * x010, Ma[31], Mb[51]);
	Mb[33] = fmaf( x013, Ma[0], Mb[33]);
	Mb[51] = fmaf( x001, Ma[30], Mb[51]);
	Mb[33] = fmaf(float(3.00000000e+00) * x011, Ma[9], Mb[33]);
	Mb[51] = fmaf(float(6.00000000e+00) * x021, Ma[7], Mb[51]);
	Mb[33] = fmaf( x010, Ma[19], Mb[33]);
	Mb[52] = fmaf(float(2.00000000e+00) * x031, Ma[3], Mb[52]);
	Mb[33] = fmaf( x003, Ma[2], Mb[33]);
	Mb[52] = fmaf( x032, Ma[0], Mb[52]);
	Mb[33] = fmaf(float(3.00000000e+00) * x002, Ma[8], Mb[33]);
	Mb[52] = fmaf( x030, Ma[9], Mb[52]);
	Mb[33] = fmaf(float(3.00000000e+00) * x001, Ma[18], Mb[33]);
	Mb[52] = fmaf(float(3.00000000e+00) * x022, Ma[2], Mb[52]);
	Mb[34] = fmaf(float(4.00000000e+00) * x001, Ma[19], Mb[34]);
	Mb[52] = fmaf(float(6.00000000e+00) * x021, Ma[8], Mb[52]);
	Mb[34] = fmaf(float(6.00000000e+00) * x002, Ma[9], Mb[34]);
	Mb[52] = fmaf(float(3.00000000e+00) * x012, Ma[7], Mb[52]);
	Mb[34] = fmaf(float(4.00000000e+00) * x003, Ma[3], Mb[34]);
	Mb[52] = fmaf(float(6.00000000e+00) * x011, Ma[17], Mb[52]);
	Mb[34] = fmaf( x004, Ma[0], Mb[34]);
	Mb[52] = fmaf(float(3.00000000e+00) * x010, Ma[32], Mb[52]);
	Mb[35] = fmaf(float(5.00000000e+00) * x100, Ma[20], Mb[35]);
	Mb[52] = fmaf( x002, Ma[16], Mb[52]);
	Mb[35] = fmaf(float(1.00000000e+01) * x200, Ma[10], Mb[35]);
	Mb[52] = fmaf(float(2.00000000e+00) * x001, Ma[31], Mb[52]);
	Mb[35] = fmaf(float(1.00000000e+01) * x300, Ma[4], Mb[35]);
	Mb[52] = fmaf(float(3.00000000e+00) * x020, Ma[18], Mb[52]);
	Mb[35] = fmaf(float(5.00000000e+00) * x400, Ma[1], Mb[35]);
	Mb[53] = fmaf(float(2.00000000e+00) * x010, Ma[33], Mb[53]);
	Mb[35] = fmaf( x500, Ma[0], Mb[35]);
	Mb[53] = fmaf( x023, Ma[0], Mb[53]);
	Mb[36] = fmaf( x010, Ma[20], Mb[36]);
	Mb[53] = fmaf(float(3.00000000e+00) * x022, Ma[3], Mb[53]);
	Mb[36] = fmaf( x410, Ma[0], Mb[36]);
	Mb[53] = fmaf(float(3.00000000e+00) * x021, Ma[9], Mb[53]);
	Mb[36] = fmaf( x400, Ma[2], Mb[36]);
	Mb[53] = fmaf( x020, Ma[19], Mb[53]);
	Mb[36] = fmaf(float(4.00000000e+00) * x310, Ma[1], Mb[36]);
	Mb[53] = fmaf(float(2.00000000e+00) * x013, Ma[2], Mb[53]);
	Mb[36] = fmaf(float(4.00000000e+00) * x300, Ma[5], Mb[36]);
	Mb[53] = fmaf(float(6.00000000e+00) * x012, Ma[8], Mb[53]);
	Mb[36] = fmaf(float(6.00000000e+00) * x200, Ma[11], Mb[36]);
	Mb[53] = fmaf(float(6.00000000e+00) * x011, Ma[18], Mb[53]);
	Mb[36] = fmaf(float(4.00000000e+00) * x110, Ma[10], Mb[36]);
	Mb[53] = fmaf( x003, Ma[7], Mb[53]);
	Mb[36] = fmaf(float(4.00000000e+00) * x100, Ma[21], Mb[36]);
	Mb[53] = fmaf(float(3.00000000e+00) * x002, Ma[17], Mb[53]);
	Mb[36] = fmaf(float(6.00000000e+00) * x210, Ma[4], Mb[36]);
	Mb[53] = fmaf(float(3.00000000e+00) * x001, Ma[32], Mb[53]);
	Mb[37] = fmaf(float(4.00000000e+00) * x300, Ma[6], Mb[37]);
	Mb[54] = fmaf(float(4.00000000e+00) * x013, Ma[3], Mb[54]);
	Mb[37] = fmaf( x401, Ma[0], Mb[37]);
	Mb[54] = fmaf(float(4.00000000e+00) * x001, Ma[33], Mb[54]);
	Mb[37] = fmaf( x400, Ma[3], Mb[37]);
	Mb[54] = fmaf(float(6.00000000e+00) * x002, Ma[18], Mb[54]);
	Mb[37] = fmaf(float(4.00000000e+00) * x301, Ma[1], Mb[37]);
	Mb[54] = fmaf(float(4.00000000e+00) * x003, Ma[8], Mb[54]);
	Mb[37] = fmaf(float(6.00000000e+00) * x201, Ma[4], Mb[37]);
	Mb[54] = fmaf( x004, Ma[2], Mb[54]);
	Mb[37] = fmaf(float(6.00000000e+00) * x200, Ma[12], Mb[37]);
	Mb[54] = fmaf( x010, Ma[34], Mb[54]);
	Mb[37] = fmaf(float(4.00000000e+00) * x101, Ma[10], Mb[37]);
	Mb[54] = fmaf(float(4.00000000e+00) * x011, Ma[19], Mb[54]);
	Mb[37] = fmaf(float(4.00000000e+00) * x100, Ma[22], Mb[37]);
	Mb[54] = fmaf(float(6.00000000e+00) * x012, Ma[9], Mb[54]);
	Mb[37] = fmaf( x001, Ma[20], Mb[37]);
	Mb[54] = fmaf( x014, Ma[0], Mb[54]);
	Mb[38] = fmaf(float(6.00000000e+00) * x110, Ma[11], Mb[38]);
	Mb[55] = fmaf(float(5.00000000e+00) * x001, Ma[34], Mb[55]);
	Mb[38] = fmaf( x320, Ma[0], Mb[38]);
	Mb[55] = fmaf(float(1.00000000e+01) * x002, Ma[19], Mb[55]);
	Mb[38] = fmaf(float(2.00000000e+00) * x310, Ma[2], Mb[38]);
	Mb[55] = fmaf(float(1.00000000e+01) * x003, Ma[9], Mb[55]);
	Mb[38] = fmaf( x300, Ma[7], Mb[38]);
	Mb[55] = fmaf(float(5.00000000e+00) * x004, Ma[3], Mb[55]);
	Mb[38] = fmaf(float(3.00000000e+00) * x220, Ma[1], Mb[38]);
	Mb[55] = fmaf( x005, Ma[0], Mb[55]);
	return Mb;
/* FLOPS = 1095*/
}

static __device__ char Ldest1[379] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10};
static __device__ float factor1[379] = { 1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,4.16666679e-02,8.33333358e-02,1.66666672e-01,8.33333358e-02,8.33333358e-02,2.50000000e-01,2.50000000e-01,8.33333358e-02,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,8.33333358e-02,8.33333358e-02,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,4.16666679e-02,8.33333358e-02,1.66666672e-01,8.33333358e-02,8.33333358e-02,2.50000000e-01,2.50000000e-01,8.33333358e-02,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,8.33333358e-02,8.33333358e-02,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,4.16666679e-02,8.33333358e-02,1.66666672e-01,8.33333358e-02,8.33333358e-02,2.50000000e-01,2.50000000e-01,8.33333358e-02,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,4.16666679e-02,8.33333358e-02,8.33333358e-02,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,1.66666672e-01,2.50000000e-01,5.00000000e-01,2.50000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,4.16666679e-02,1.66666672e-01,2.50000000e-01,1.66666672e-01,4.16666679e-02,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01};
static __device__ char xsrc1[379] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,1,2,3,4,5,6,7,8,9,10};
static __device__ char Lsrc1[379] = { 4,5,6,10,11,12,13,14,15,20,21,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,5,7,8,11,13,14,16,17,18,21,23,24,26,27,28,30,31,32,33,36,38,39,41,42,43,45,46,47,48,50,51,52,53,54,57,59,60,62,63,64,66,67,68,69,71,72,73,74,75,77,78,79,80,81,82,6,8,9,12,14,15,17,18,19,22,24,25,27,28,29,31,32,33,34,37,39,40,42,43,44,46,47,48,49,51,52,53,54,55,58,60,61,63,64,65,67,68,69,70,72,73,74,75,76,78,79,80,81,82,83,10,11,12,20,21,22,23,24,25,35,36,37,38,39,40,41,42,43,44,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,11,13,14,21,23,24,26,27,28,36,38,39,41,42,43,45,46,47,48,57,59,60,62,63,64,66,67,68,69,71,72,73,74,75,12,14,15,22,24,25,27,28,29,37,39,40,42,43,44,46,47,48,49,58,60,61,63,64,65,67,68,69,70,72,73,74,75,76,13,16,17,23,26,27,30,31,32,38,41,42,45,46,47,50,51,52,53,59,62,63,66,67,68,71,72,73,74,77,78,79,80,81,14,17,18,24,27,28,31,32,33,39,42,43,46,47,48,51,52,53,54,60,63,64,67,68,69,72,73,74,75,78,79,80,81,82,15,18,19,25,28,29,32,33,34,40,43,44,47,48,49,52,53,54,55,61,64,65,68,69,70,73,74,75,76,79,80,81,82,83,20,21,22,35,36,37,38,39,40,56};
static __device__ char Ldest2[378] = { 10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55};
static __device__ float factor2[378] = { 5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.66666672e-01,5.00000000e-01,5.00000000e-01,1.66666672e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.00000000e+00,5.00000000e-01,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00,1.00000000e+00};
static __device__ char xsrc2[378] = { 11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3};
static __device__ char Lsrc2[378] = { 57,58,59,60,61,62,63,64,65,21,23,24,36,38,39,41,42,43,57,59,60,62,63,64,66,67,68,69,22,24,25,37,39,40,42,43,44,58,60,61,63,64,65,67,68,69,70,23,26,27,38,41,42,45,46,47,59,62,63,66,67,68,71,72,73,74,24,27,28,39,42,43,46,47,48,60,63,64,67,68,69,72,73,74,75,25,28,29,40,43,44,47,48,49,61,64,65,68,69,70,73,74,75,76,26,30,31,41,45,46,50,51,52,62,66,67,71,72,73,77,78,79,80,27,31,32,42,46,47,51,52,53,63,67,68,72,73,74,78,79,80,81,28,32,33,43,47,48,52,53,54,64,68,69,73,74,75,79,80,81,82,29,33,34,44,48,49,53,54,55,65,69,70,74,75,76,80,81,82,83,35,36,37,56,57,58,59,60,61,36,38,39,57,59,60,62,63,64,37,39,40,58,60,61,63,64,65,38,41,42,59,62,63,66,67,68,39,42,43,60,63,64,67,68,69,40,43,44,61,64,65,68,69,70,41,45,46,62,66,67,71,72,73,42,46,47,63,67,68,72,73,74,43,47,48,64,68,69,73,74,75,44,48,49,65,69,70,74,75,76,45,50,51,66,71,72,77,78,79,46,51,52,67,72,73,78,79,80,47,52,53,68,73,74,79,80,81,48,53,54,69,74,75,80,81,82,49,54,55,70,75,76,81,82,83,56,57,58,57,59,60,58,60,61,59,62,63,60,63,64,61,64,65,62,66,67,63,67,68,64,68,69,65,69,70,66,71,72,67,72,73,68,73,74,69,74,75,70,75,76,71,77,78,72,78,79,73,79,80,74,80,81,75,81,82,76,82,83};
static __device__ float phi_factor[83] = { 1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,1.38888892e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,2.08333340e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,2.77777780e-02,4.16666679e-02,4.16666679e-02,2.08333340e-02,8.33333377e-03,8.33333377e-03,1.38888892e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,8.33333377e-03,1.00000000e+00,1.00000000e+00,5.00000000e-01,1.66666672e-01,4.16666679e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,4.16666679e-02,4.16666679e-02,8.33333377e-03,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,2.08333340e-02,5.00000000e-01,5.00000000e-01,2.50000000e-01,8.33333358e-02,2.50000000e-01,2.50000000e-01,1.25000000e-01,8.33333358e-02,8.33333358e-02,2.08333340e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,2.77777780e-02,1.66666672e-01,1.66666672e-01,8.33333358e-02,8.33333358e-02,8.33333358e-02,2.77777780e-02,4.16666679e-02,4.16666679e-02,2.08333340e-02,4.16666679e-02,4.16666679e-02,2.08333340e-02,8.33333377e-03,8.33333377e-03,8.33333377e-03,1.38888892e-03};
static __device__ char phi_Lsrc[83] = { 3,9,19,34,55,83,2,8,18,33,54,82,7,17,32,53,81,16,31,52,80,30,51,79,50,78,77,1,6,15,29,49,76,5,14,28,48,75,13,27,47,74,26,46,73,45,72,71,4,12,25,44,70,11,24,43,69,23,42,68,41,67,66,10,22,40,65,21,39,64,38,63,62,20,37,61,36,60,59,35,58,57,56};

#ifdef __CUDACC__
__device__
inline array<float, 84> L2L_kernel(const array<float, 84>& La, const array<float, NDIM>& X, bool do_phi) {
	const int tid = threadIdx.x;
	array<float, 84> Lb;
	for( int i = 0; i < EXPANSION_SIZE; i++) {
		Lb[i] = 0.0f;
	}
	for( int i = tid; i < EXPANSION_SIZE; i += WARP_SIZE ) {
		Lb[i] = La[i];
	}
	array<float,84> dx;
	dx[0] = float(1);
	dx[1] = X[0];
	dx[2] = X[1];
	dx[3] = X[2];
	dx[9]= dx[3] * dx[3];
	dx[8]= dx[2] * dx[3];
	dx[7]= dx[2] * dx[2];
	dx[6]= dx[1] * dx[3];
	dx[5]= dx[1] * dx[2];
	dx[4]= dx[1] * dx[1];
	dx[19]= dx[9] * dx[3];
	dx[18]= dx[8] * dx[3];
	dx[17]= dx[8] * dx[2];
	dx[16]= dx[7] * dx[2];
	dx[15]= dx[6] * dx[3];
	dx[14]= dx[5] * dx[3];
	dx[13]= dx[5] * dx[2];
	dx[12]= dx[6] * dx[1];
	dx[11]= dx[5] * dx[1];
	dx[10]= dx[4] * dx[1];
	dx[34]= dx[9] * dx[9];
	dx[33]= dx[8] * dx[9];
	dx[32]= dx[8] * dx[8];
	dx[31]= dx[8] * dx[7];
	dx[30]= dx[7] * dx[7];
	dx[29]= dx[6] * dx[9];
	dx[28]= dx[5] * dx[9];
	dx[27]= dx[5] * dx[8];
	dx[26]= dx[5] * dx[7];
	dx[25]= dx[6] * dx[6];
	dx[24]= dx[5] * dx[6];
	dx[23]= dx[5] * dx[5];
	dx[22]= dx[6] * dx[4];
	dx[21]= dx[5] * dx[4];
	dx[20]= dx[4] * dx[4];
	dx[55]= dx[19] * dx[9];
	dx[54]= dx[18] * dx[9];
	dx[53]= dx[17] * dx[9];
	dx[52]= dx[17] * dx[8];
	dx[51]= dx[17] * dx[7];
	dx[50]= dx[16] * dx[7];
	dx[49]= dx[15] * dx[9];
	dx[48]= dx[14] * dx[9];
	dx[47]= dx[14] * dx[8];
	dx[46]= dx[14] * dx[7];
	dx[45]= dx[13] * dx[7];
	dx[44]= dx[12] * dx[9];
	dx[43]= dx[14] * dx[6];
	dx[42]= dx[14] * dx[5];
	dx[41]= dx[11] * dx[7];
	dx[40]= dx[12] * dx[6];
	dx[39]= dx[14] * dx[4];
	dx[38]= dx[11] * dx[5];
	dx[37]= dx[12] * dx[4];
	dx[36]= dx[11] * dx[4];
	dx[35]= dx[10] * dx[4];
	dx[83]= dx[19] * dx[19];
	dx[82]= dx[18] * dx[19];
	dx[81]= dx[17] * dx[19];
	dx[80]= dx[17] * dx[18];
	dx[79]= dx[17] * dx[17];
	dx[78]= dx[17] * dx[16];
	dx[77]= dx[16] * dx[16];
	dx[76]= dx[15] * dx[19];
	dx[75]= dx[14] * dx[19];
	dx[74]= dx[14] * dx[18];
	dx[73]= dx[14] * dx[17];
	dx[72]= dx[14] * dx[16];
	dx[71]= dx[13] * dx[16];
	dx[70]= dx[12] * dx[19];
	dx[69]= dx[14] * dx[15];
	dx[68]= dx[14] * dx[14];
	dx[67]= dx[14] * dx[13];
	dx[66]= dx[11] * dx[16];
	dx[65]= dx[12] * dx[15];
	dx[64]= dx[14] * dx[12];
	dx[63]= dx[14] * dx[11];
	dx[62]= dx[11] * dx[13];
	dx[61]= dx[12] * dx[12];
	dx[60]= dx[14] * dx[10];
	dx[59]= dx[11] * dx[11];
	dx[58]= dx[12] * dx[10];
	dx[57]= dx[11] * dx[10];
	dx[56]= dx[10] * dx[10];
	for( int i = tid; i < 378; i+=WARP_SIZE) {
		Lb[Ldest1[i]] = fmaf(factor1[i] * dx[xsrc1[i]], La[Lsrc1[i]], Lb[Ldest1[i]]);
		Lb[Ldest2[i]] = fmaf(factor2[i] * dx[xsrc2[i]], La[Lsrc2[i]], Lb[Ldest2[i]]);
	}
	if( tid == 0 ) {
		Lb[Ldest1[378]] = fmaf(factor1[378] * dx[xsrc1[378]], La[Lsrc1[378]], Lb[Ldest1[378]]);
	}
	if( do_phi ) {
		for( int i = tid; i < 83; i+=WARP_SIZE) {
			Lb[0] = fmaf(phi_factor[i] * dx[phi_Lsrc[i]], La[phi_Lsrc[i]], Lb[0]);
		}
	}
	for (int P = warpSize / 2; P >= 1; P /= 2) {
		for (int i = 0; i < EXPANSION_SIZE; i++) {
			Lb[i] += __shfl_xor_sync(0xffffffff, Lb[i], P);
		}
	}
	return Lb;
/* FLOPS = 3108 + do_phi * 332*/
}
#endif

__device__
inline array<float, 4> L2P_kernel(const array<float, 84>& La, const array<float, NDIM>& X, bool do_phi) {
	array<float, 4> Lb;
//	const float x000 = float(1);
	const float& x100 = X[0];
	const float& x010 = X[1];
	const float& x001 = X[2];
	const float x002 = x001 * x001;
	const float x011 = x010 * x001;
	const float x020 = x010 * x010;
	const float x101 = x100 * x001;
	const float x110 = x100 * x010;
	const float x200 = x100 * x100;
	const float x003 = x002 * x001;
	const float x012 = x011 * x001;
	const float x021 = x011 * x010;
	const float x030 = x020 * x010;
	const float x102 = x101 * x001;
	const float x111 = x110 * x001;
	const float x120 = x110 * x010;
	const float x201 = x101 * x100;
	const float x210 = x110 * x100;
	const float x300 = x200 * x100;
	const float x004 = x002 * x002;
	const float x013 = x011 * x002;
	const float x022 = x011 * x011;
	const float x031 = x011 * x020;
	const float x040 = x020 * x020;
	const float x103 = x101 * x002;
	const float x112 = x110 * x002;
	const float x121 = x110 * x011;
	const float x130 = x110 * x020;
	const float x202 = x101 * x101;
	const float x211 = x110 * x101;
	const float x220 = x110 * x110;
	const float x301 = x101 * x200;
	const float x310 = x110 * x200;
	const float x400 = x200 * x200;
	const float x005 = x003 * x002;
	const float x014 = x012 * x002;
	const float x023 = x021 * x002;
	const float x032 = x021 * x011;
	const float x041 = x021 * x020;
	const float x050 = x030 * x020;
	const float x104 = x102 * x002;
	const float x113 = x111 * x002;
	const float x122 = x111 * x011;
	const float x131 = x111 * x020;
	const float x140 = x120 * x020;
	const float x203 = x201 * x002;
	const float x212 = x111 * x101;
	const float x221 = x111 * x110;
	const float x230 = x210 * x020;
	const float x302 = x201 * x101;
	const float x311 = x111 * x200;
	const float x320 = x210 * x110;
	const float x401 = x201 * x200;
	const float x410 = x210 * x200;
	const float x500 = x300 * x200;
	const float x006 = x003 * x003;
	const float x015 = x012 * x003;
	const float x024 = x021 * x003;
	const float x033 = x021 * x012;
	const float x042 = x021 * x021;
	const float x051 = x021 * x030;
	const float x060 = x030 * x030;
	const float x105 = x102 * x003;
	const float x114 = x111 * x003;
	const float x123 = x111 * x012;
	const float x132 = x111 * x021;
	const float x141 = x111 * x030;
	const float x150 = x120 * x030;
	const float x204 = x201 * x003;
	const float x213 = x111 * x102;
	const float x222 = x111 * x111;
	const float x231 = x111 * x120;
	const float x240 = x210 * x030;
	const float x303 = x201 * x102;
	const float x312 = x111 * x201;
	const float x321 = x111 * x210;
	const float x330 = x210 * x120;
	const float x402 = x201 * x201;
	const float x411 = x111 * x300;
	const float x420 = x210 * x210;
	const float x501 = x201 * x300;
	const float x510 = x210 * x300;
	const float x600 = x300 * x300;
	Lb[0] = La[0];
	Lb[1] = La[1];
	Lb[2] = La[2];
	Lb[3] = La[3];
	if( do_phi ) {
		Lb[0] = fmaf( x001, La[3], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x002, La[9], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x003, La[19], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x004, La[34], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x005, La[55], Lb[0]);
		Lb[0] = fmaf(float(1.38888889e-03) * x006, La[83], Lb[0]);
		Lb[0] = fmaf( x010, La[2], Lb[0]);
		Lb[0] = fmaf( x011, La[8], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x012, La[18], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x013, La[33], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x014, La[54], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x015, La[82], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x020, La[7], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x021, La[17], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x022, La[32], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x023, La[53], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x024, La[81], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x030, La[16], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x031, La[31], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x032, La[52], Lb[0]);
		Lb[0] = fmaf(float(2.77777778e-02) * x033, La[80], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x040, La[30], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x041, La[51], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x042, La[79], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x050, La[50], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x051, La[78], Lb[0]);
		Lb[0] = fmaf(float(1.38888889e-03) * x060, La[77], Lb[0]);
		Lb[0] = fmaf( x100, La[1], Lb[0]);
		Lb[0] = fmaf( x101, La[6], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x102, La[15], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x103, La[29], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x104, La[49], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x105, La[76], Lb[0]);
		Lb[0] = fmaf( x110, La[5], Lb[0]);
		Lb[0] = fmaf( x111, La[14], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x112, La[28], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x113, La[48], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x114, La[75], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x120, La[13], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x121, La[27], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x122, La[47], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x123, La[74], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x130, La[26], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x131, La[46], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x132, La[73], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x140, La[45], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x141, La[72], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x150, La[71], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x200, La[4], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x201, La[12], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x202, La[25], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x203, La[44], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x204, La[70], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x210, La[11], Lb[0]);
		Lb[0] = fmaf(float(5.00000000e-01) * x211, La[24], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x212, La[43], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x213, La[69], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x220, La[23], Lb[0]);
		Lb[0] = fmaf(float(2.50000000e-01) * x221, La[42], Lb[0]);
		Lb[0] = fmaf(float(1.25000000e-01) * x222, La[68], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x230, La[41], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x231, La[67], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x240, La[66], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x300, La[10], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x301, La[22], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x302, La[40], Lb[0]);
		Lb[0] = fmaf(float(2.77777778e-02) * x303, La[65], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x310, La[21], Lb[0]);
		Lb[0] = fmaf(float(1.66666667e-01) * x311, La[39], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x312, La[64], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x320, La[38], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-02) * x321, La[63], Lb[0]);
		Lb[0] = fmaf(float(2.77777778e-02) * x330, La[62], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x400, La[20], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x401, La[37], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x402, La[61], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x410, La[36], Lb[0]);
		Lb[0] = fmaf(float(4.16666667e-02) * x411, La[60], Lb[0]);
		Lb[0] = fmaf(float(2.08333333e-02) * x420, La[59], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x500, La[35], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x501, La[58], Lb[0]);
		Lb[0] = fmaf(float(8.33333333e-03) * x510, La[57], Lb[0]);
		Lb[0] = fmaf(float(1.38888889e-03) * x600, La[56], Lb[0]);
	}
	Lb[1] = fmaf( x100, La[4], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x103, La[48], Lb[2]);
	Lb[1] = fmaf( x010, La[5], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x040, La[50], Lb[2]);
	Lb[1] = fmaf( x001, La[6], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x031, La[51], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x200, La[10], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x022, La[52], Lb[2]);
	Lb[1] = fmaf( x110, La[11], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x013, La[53], Lb[2]);
	Lb[1] = fmaf( x101, La[12], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x004, La[54], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x020, La[13], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-03) * x500, La[57], Lb[2]);
	Lb[1] = fmaf( x011, La[14], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x410, La[59], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x002, La[15], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x401, La[60], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x300, La[20], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x320, La[62], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x210, La[21], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x311, La[63], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x201, La[22], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x302, La[64], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x120, La[23], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x230, La[66], Lb[2]);
	Lb[1] = fmaf( x111, La[24], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x221, La[67], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x102, La[25], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x212, La[68], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x030, La[26], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x203, La[69], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x021, La[27], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x140, La[71], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x012, La[28], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x131, La[72], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x003, La[29], Lb[1]);
	Lb[2] = fmaf(float(2.50000000e-01) * x122, La[73], Lb[2]);
	Lb[1] = fmaf(float(4.16666667e-02) * x400, La[35], Lb[1]);
	Lb[2] = fmaf(float(1.66666667e-01) * x113, La[74], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x310, La[36], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x104, La[75], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x301, La[37], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-03) * x050, La[77], Lb[2]);
	Lb[1] = fmaf(float(2.50000000e-01) * x220, La[38], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x041, La[78], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x211, La[39], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x032, La[79], Lb[2]);
	Lb[1] = fmaf(float(2.50000000e-01) * x202, La[40], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-02) * x023, La[80], Lb[2]);
	Lb[1] = fmaf(float(1.66666667e-01) * x130, La[41], Lb[1]);
	Lb[2] = fmaf(float(4.16666667e-02) * x014, La[81], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x121, La[42], Lb[1]);
	Lb[2] = fmaf(float(8.33333333e-03) * x005, La[82], Lb[2]);
	Lb[1] = fmaf(float(5.00000000e-01) * x112, La[43], Lb[1]);
	Lb[3] = fmaf( x100, La[6], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x103, La[44], Lb[1]);
	Lb[3] = fmaf( x010, La[8], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x040, La[45], Lb[1]);
	Lb[3] = fmaf( x001, La[9], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x031, La[46], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x200, La[12], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x022, La[47], Lb[1]);
	Lb[3] = fmaf( x110, La[14], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x013, La[48], Lb[1]);
	Lb[3] = fmaf( x101, La[15], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x004, La[49], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x020, La[17], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-03) * x500, La[56], Lb[1]);
	Lb[3] = fmaf( x011, La[18], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x410, La[57], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x002, La[19], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x401, La[58], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x300, La[22], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x320, La[59], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x210, La[24], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x311, La[60], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x201, La[25], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x302, La[61], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x120, La[27], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x230, La[62], Lb[1]);
	Lb[3] = fmaf( x111, La[28], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x221, La[63], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x102, La[29], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x212, La[64], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x030, La[31], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x203, La[65], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x021, La[32], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x140, La[66], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x012, La[33], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x131, La[67], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x003, La[34], Lb[3]);
	Lb[1] = fmaf(float(2.50000000e-01) * x122, La[68], Lb[1]);
	Lb[3] = fmaf(float(4.16666667e-02) * x400, La[37], Lb[3]);
	Lb[1] = fmaf(float(1.66666667e-01) * x113, La[69], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x310, La[39], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x104, La[70], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x301, La[40], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-03) * x050, La[71], Lb[1]);
	Lb[3] = fmaf(float(2.50000000e-01) * x220, La[42], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x041, La[72], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x211, La[43], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x032, La[73], Lb[1]);
	Lb[3] = fmaf(float(2.50000000e-01) * x202, La[44], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-02) * x023, La[74], Lb[1]);
	Lb[3] = fmaf(float(1.66666667e-01) * x130, La[46], Lb[3]);
	Lb[1] = fmaf(float(4.16666667e-02) * x014, La[75], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x121, La[47], Lb[3]);
	Lb[1] = fmaf(float(8.33333333e-03) * x005, La[76], Lb[1]);
	Lb[3] = fmaf(float(5.00000000e-01) * x112, La[48], Lb[3]);
	Lb[2] = fmaf( x100, La[5], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x103, La[49], Lb[3]);
	Lb[2] = fmaf( x010, La[7], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x040, La[51], Lb[3]);
	Lb[2] = fmaf( x001, La[8], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x031, La[52], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x200, La[11], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x022, La[53], Lb[3]);
	Lb[2] = fmaf( x110, La[13], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x013, La[54], Lb[3]);
	Lb[2] = fmaf( x101, La[14], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x004, La[55], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x020, La[16], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-03) * x500, La[58], Lb[3]);
	Lb[2] = fmaf( x011, La[17], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x410, La[60], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x002, La[18], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x401, La[61], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x300, La[21], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x320, La[63], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x210, La[23], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x311, La[64], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x201, La[24], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x302, La[65], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x120, La[26], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x230, La[67], Lb[3]);
	Lb[2] = fmaf( x111, La[27], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x221, La[68], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x102, La[28], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x212, La[69], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x030, La[30], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x203, La[70], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x021, La[31], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x140, La[72], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x012, La[32], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x131, La[73], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x003, La[33], Lb[2]);
	Lb[3] = fmaf(float(2.50000000e-01) * x122, La[74], Lb[3]);
	Lb[2] = fmaf(float(4.16666667e-02) * x400, La[36], Lb[2]);
	Lb[3] = fmaf(float(1.66666667e-01) * x113, La[75], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x310, La[38], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x104, La[76], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x301, La[39], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-03) * x050, La[78], Lb[3]);
	Lb[2] = fmaf(float(2.50000000e-01) * x220, La[41], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x041, La[79], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x211, La[42], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x032, La[80], Lb[3]);
	Lb[2] = fmaf(float(2.50000000e-01) * x202, La[43], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-02) * x023, La[81], Lb[3]);
	Lb[2] = fmaf(float(1.66666667e-01) * x130, La[45], Lb[2]);
	Lb[3] = fmaf(float(4.16666667e-02) * x014, La[82], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x121, La[46], Lb[2]);
	Lb[3] = fmaf(float(8.33333333e-03) * x005, La[83], Lb[3]);
	Lb[2] = fmaf(float(5.00000000e-01) * x112, La[47], Lb[2]);
	return Lb;
/* FLOPS = 796*/
}

